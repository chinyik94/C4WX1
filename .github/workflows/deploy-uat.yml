name: Deploy C4WX1 to ECS UAT

on:
  push:
    branches:
      - master
    paths:
      - 'src/C4WX1.API/**'
      - 'src/C4WX1.Database/**'
      - 'tests/**'
      - '.github/workflows/deploy-uat.yml'

env:
  AWS_REGION: ap-southeast-1  
  ECR_REPOSITORY: c4wx1-api        
  ECS_SERVICE: c4wx1-api-uat               
  ECS_CLUSTER: c4wx1-api-cluster 
  CONTAINER_NAME: c4wx1-api-uat
  ECS_TASK_DEFINITION_NAME: c4wx1-api-uat-task-definition           

jobs:
  deploy:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    environment: uat

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Run Tests
        run: |
          dotnet tool install -g dotnet-trx
          dotnet test --logger trx; trx --output

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=$(date +%y%m%d)-$(echo $GITHUB_SHA | cut -c1-7)-uat
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
      
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f src/C4WX1.API/Dockerfile.UAT .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      
      - name: Retrieve the current ECS task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION_NAME }} \
            --query taskDefinition > task-definition.json
          echo "ECS_TASK_DEFINITION=task-definition.json" >> $GITHUB_ENV

      - name: Clean up task-definition.json
        run: |
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .enableFaultInjection)' task-definition.json > cleaned-task-definition.json
          mv cleaned-task-definition.json task-definition.json

      - name: Set ECS_TASK_DEFINITION environment variable
        run: echo "ECS_TASK_DEFINITION=task-definition.json" >> $GITHUB_ENV

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
