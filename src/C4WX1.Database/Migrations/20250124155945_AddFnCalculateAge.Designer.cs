// <auto-generated />
using System;
using C4WX1.Database.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace C4WX1.Database.Migrations
{
    [DbContext(typeof(THCC_C4WDEVContext))]
    [Migration("20250124155945_AddFnCalculateAge")]
    partial class AddFnCalculateAge
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AI")
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("C4WX1.Database.Models.AMTQuestion", b =>
                {
                    b.Property<int>("AMTQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AMTQuestionId"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ordering")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AMTQuestionId");

                    b.ToTable("AMTQuestion", t =>
                        {
                            t.HasTrigger("tr_AMTQuestion");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIAccessKey", b =>
                {
                    b.Property<int>("APIAccessKeyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("APIAccessKeyID"));

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TokenCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId_FK")
                        .HasColumnType("integer");

                    b.HasKey("APIAccessKeyID")
                        .HasName("PK__APIAcces__79CAEB20D6CC8EEA");

                    b.HasIndex(new[] { "TokenCode", "ExpiryDate" }, "idx_APIAccessKey1");

                    b.HasIndex(new[] { "TokenCode" }, "idx_APIAccessKey2");

                    b.HasIndex(new[] { "TokenCode", "ExpiryDate", "CreatedDate" }, "idx_APIAccessKey3");

                    b.ToTable("APIAccessKey", t =>
                        {
                            t.HasTrigger("tr_APIAccessKey");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIMonitor", b =>
                {
                    b.Property<int>("MonitorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MonitorID"));

                    b.Property<string>("APIName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.HasKey("MonitorID")
                        .HasName("PK_MonitorID");

                    b.ToTable("APIMonitor", t =>
                        {
                            t.HasTrigger("tr_APIMonitor");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrder", b =>
                {
                    b.Property<int>("APIOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("APIOrderId"));

                    b.Property<int?>("AcceptedBy")
                        .HasColumnType("integer");

                    b.Property<string>("AcceptedByName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AcceptedInstitutionID")
                        .HasColumnType("integer");

                    b.Property<string>("AcceptedInstitutionName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Clinicalsynopsis")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DoctorMCR")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderID")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("OrderedByID")
                        .HasColumnType("integer");

                    b.Property<string>("OrderedByInstitution")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("OrderedByInstitutionID")
                        .HasColumnType("integer");

                    b.Property<string>("OrderedByName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("integer");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("PatientNRIC")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("ResourceType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("APIOrderId");

                    b.ToTable("APIOrder", t =>
                        {
                            t.HasTrigger("tr_APIOrder");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrderAllergy", b =>
                {
                    b.Property<int>("APIOrderAllergyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("APIOrderAllergyID"));

                    b.Property<int>("APIOrderID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AllergyAgent")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AllergyAgentID")
                        .HasColumnType("integer");

                    b.Property<string>("AllergyReaction")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AllergyReactionID")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("APIOrderAllergyID");

                    b.HasIndex("APIOrderID_FK");

                    b.ToTable("APIOrderAllergy", t =>
                        {
                            t.HasTrigger("tr_APIOrderAllergy");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrderDiagnosis", b =>
                {
                    b.Property<int>("APIOrderDiagnosisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("APIOrderDiagnosisID"));

                    b.Property<int>("APIOrderID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DiagnosisDesc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DiagnosisType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("APIOrderDiagnosisID");

                    b.HasIndex("APIOrderID_FK");

                    b.ToTable("APIOrderDiagnosis", t =>
                        {
                            t.HasTrigger("tr_APIOrderDiagnosis");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrderMedication", b =>
                {
                    b.Property<int>("APIOrderMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("APIOrderMedicationID"));

                    b.Property<int>("APIOrderID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DosageID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("MedicationAsNeeded")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicationDisplay")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("MedicationFrequency")
                        .HasColumnType("integer");

                    b.Property<int?>("MedicationFrequencyID")
                        .HasColumnType("integer");

                    b.Property<int?>("MedicationID")
                        .HasColumnType("integer");

                    b.Property<string>("MedicationName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("MedicationPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("MedicationPeriodUnit")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("MedicationQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("MedicationQuantityUnit")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("MedicationStatus")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("APIOrderMedicationID");

                    b.HasIndex("APIOrderID_FK");

                    b.ToTable("APIOrderMedication", t =>
                        {
                            t.HasTrigger("tr_APIOrderMedication");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrderTask", b =>
                {
                    b.Property<int>("APIOrderTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("APIOrderTaskID"));

                    b.Property<int>("APIOrderID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TaskDisplay")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("TaskEndDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaskFrequency")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskFrequencyID")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskID")
                        .HasColumnType("integer");

                    b.Property<string>("TaskName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("TaskPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("TaskPeriodUnit")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime?>("TaskStartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaskTypeID")
                        .HasColumnType("integer");

                    b.HasKey("APIOrderTaskID");

                    b.HasIndex("APIOrderID_FK");

                    b.ToTable("APIOrderTask", t =>
                        {
                            t.HasTrigger("tr_APIOrderTask");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.APNSNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsCritical")
                        .HasColumnType("boolean");

                    b.Property<string>("NotificationMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("NotificationTitle")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool?>("SentStatus")
                        .HasColumnType("boolean");

                    b.Property<int?>("TaskID")
                        .HasColumnType("integer");

                    b.Property<int?>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("APNSNotification", t =>
                        {
                            t.HasTrigger("tr_APNSNotification");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Activity", b =>
                {
                    b.Property<int>("ActivityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActivityID"));

                    b.Property<string>("ActivityDetail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProblemListID_FK")
                        .HasColumnType("integer");

                    b.HasKey("ActivityID");

                    b.HasIndex("DiseaseID_FK");

                    b.HasIndex("ProblemListID_FK");

                    b.ToTable("Activity", t =>
                        {
                            t.HasTrigger("tr_Activity");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.AuditTrail", b =>
                {
                    b.Property<int>("AuditTrailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditTrailId"));

                    b.Property<string>("APIRequest")
                        .HasColumnType("text");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Module")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("AuditTrailId");

                    b.HasIndex("CreatedBy_FK");

                    b.ToTable("AuditTrail");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_AMTQuestion", b =>
                {
                    b.Property<int>("AMTQuestionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ordering")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Audit_AMTQuestion");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_APIAccessKey", b =>
                {
                    b.Property<int>("APIAccessKeyID")
                        .HasColumnType("integer");

                    b.Property<string>("AccessKey")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TokenCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_APIAccessKey");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_APIMonitor", b =>
                {
                    b.Property<string>("APIName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MonitorID")
                        .HasColumnType("integer");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.ToTable("Audit_APIMonitor");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_APIOrder", b =>
                {
                    b.Property<int>("APIOrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("AcceptedBy")
                        .HasColumnType("integer");

                    b.Property<string>("AcceptedByName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AcceptedInstitutionID")
                        .HasColumnType("integer");

                    b.Property<string>("AcceptedInstitutionName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Clinicalsynopsis")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DoctorMCR")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderID")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("OrderedByID")
                        .HasColumnType("integer");

                    b.Property<string>("OrderedByInstitution")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("OrderedByInstitutionID")
                        .HasColumnType("integer");

                    b.Property<string>("OrderedByName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PatientFirstName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("PatientID")
                        .HasColumnType("integer");

                    b.Property<string>("PatientLastName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("PatientNRIC")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("ResourceType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Audit_APIOrder");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_APIOrderAllergy", b =>
                {
                    b.Property<int>("APIOrderAllergyID")
                        .HasColumnType("integer");

                    b.Property<int>("APIOrderID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AllergyAgent")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AllergyAgentID")
                        .HasColumnType("integer");

                    b.Property<string>("AllergyReaction")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AllergyReactionID")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_APIOrderAllergy");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_APIOrderDiagnosis", b =>
                {
                    b.Property<int>("APIOrderDiagnosisID")
                        .HasColumnType("integer");

                    b.Property<int>("APIOrderID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DiagnosisDesc")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DiagnosisType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_APIOrderDiagnosis");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_APIOrderMedication", b =>
                {
                    b.Property<int>("APIOrderID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("APIOrderMedicationID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DosageID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("MedicationAsNeeded")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicationDisplay")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("MedicationFrequency")
                        .HasColumnType("integer");

                    b.Property<int?>("MedicationFrequencyID")
                        .HasColumnType("integer");

                    b.Property<int?>("MedicationID")
                        .HasColumnType("integer");

                    b.Property<string>("MedicationName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("MedicationPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("MedicationPeriodUnit")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("MedicationQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("MedicationQuantityUnit")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("MedicationStatus")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_APIOrderMedication");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_APIOrderTask", b =>
                {
                    b.Property<int>("APIOrderID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("APIOrderTaskID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TaskDisplay")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("TaskEndDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaskFrequency")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskFrequencyID")
                        .HasColumnType("integer");

                    b.Property<int?>("TaskID")
                        .HasColumnType("integer");

                    b.Property<string>("TaskName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("TaskPeriod")
                        .HasColumnType("integer");

                    b.Property<string>("TaskPeriodUnit")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime?>("TaskStartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TaskTypeID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_APIOrderTask");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_APNSNotification", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCritical")
                        .HasColumnType("boolean");

                    b.Property<string>("NotificationMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("NotificationTitle")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool?>("SentStatus")
                        .HasColumnType("boolean");

                    b.Property<int?>("TaskID")
                        .HasColumnType("integer");

                    b.Property<int?>("UserID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_APNSNotification");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Activity", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ActivityDetail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ActivityID")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProblemListID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Activity");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_BillingInvoice", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BillingInvoiceID")
                        .HasColumnType("integer");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("Consumable")
                        .HasColumnType("boolean");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("EmailBCC")
                        .HasColumnType("text");

                    b.Property<string>("EmailCC")
                        .HasColumnType("text");

                    b.Property<bool?>("EmailPatient")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailTo")
                        .HasColumnType("text");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InvoiceDueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("SendEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.ToTable("Audit_BillingInvoice");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_BillingInvoiceConsumable", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BillingInvoiceConsumableID")
                        .HasColumnType("integer");

                    b.Property<int>("BillingInvoiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable("Audit_BillingInvoiceConsumable");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_BillingInvoiceService", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BillingInvoiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("BillingInvoiceServiceID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProposalID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("Session")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable("Audit_BillingInvoiceService");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_BillingPackage", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BillingServiceID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int?>("Session")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("Validity")
                        .HasColumnType("integer");

                    b.ToTable("Audit_BillingPackage");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_BillingPackageInformation", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BillingPackageID")
                        .HasColumnType("integer");

                    b.Property<int>("BillingServiceID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Session")
                        .HasColumnType("integer");

                    b.ToTable("Audit_BillingPackageInformation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_BillingPackageRequest", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("BillingAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Discount")
                        .HasColumnType("boolean");

                    b.Property<decimal>("DiscountAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DiscountType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PackageList")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PackageRequestID")
                        .HasColumnType("integer");

                    b.Property<string>("PackageRequestNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SendBillTo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("TotalPackageAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable("Audit_BillingPackageRequest");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_BillingProposal", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BillingProposalID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("EmailBCC")
                        .HasColumnType("text");

                    b.Property<string>("EmailCC")
                        .HasColumnType("text");

                    b.Property<bool?>("EmailPatient")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailTo")
                        .HasColumnType("text");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ProposalNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProposalType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<bool?>("SendEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.ToTable("Audit_BillingProposal");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_BillingProposalService", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BillingProposalID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("BillingProposalServiceID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Duration1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Duration2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("text");

                    b.Property<int>("ServiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("Session")
                        .HasColumnType("integer");

                    b.Property<int>("SessionUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Visit")
                        .HasColumnType("integer");

                    b.ToTable("Audit_BillingProposalService");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_BillingService", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostPerSession")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ServiceID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Weekend")
                        .HasColumnType("boolean");

                    b.ToTable("Audit_BillingService");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Branch", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Address3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BranchID")
                        .HasColumnType("integer");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.ToTable("Audit_Branch");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_C4WDeviceToken", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("C4WDeviceTokenId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientEnvironment")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Device")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NewDeviceToken")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("OldDeviceToken")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.ToTable("Audit_C4WDeviceToken");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CPGoals", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CPGoalsID")
                        .HasColumnType("integer");

                    b.Property<string>("CPGoalsInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_CPGoals");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlan", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CarePlanDetailID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CarePlanID")
                        .HasColumnType("integer");

                    b.Property<string>("CarePlanName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CarePlanStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CarePlanType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiagnosisID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonInCharge")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.ToTable("Audit_CarePlan");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlanDetail", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CarePlanDetailID")
                        .HasColumnType("integer");

                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("SystemID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CarePlanDetail");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlanStatus", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("CarePlanStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CarePlanStatusID")
                        .HasColumnType("integer");

                    b.Property<string>("CareReviewFrequency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_CarePlanStatus");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlanSub", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("CarePlanGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CarePlanID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CarePlanSubID")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Goal")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("GoalStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("GroupCode")
                        .HasColumnType("integer");

                    b.Property<string>("InterventionStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("PersonInCharge")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SubCarePlanName")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CarePlanSub");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlanSubActivity", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ActivityID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CarePlanSubActivity");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlanSubCPGoals", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CPGoalsID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CarePlanSubCPGoals");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlanSubGoal", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CarePlanSubGoalID")
                        .HasColumnType("integer");

                    b.Property<string>("CarePlanSubGoalName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OperatorID")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score1")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("Score2")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("ScoreTypeID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CarePlanSubGoal");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlanSubIntervention", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("InterventionID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CarePlanSubIntervention");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlanSubProblemList", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CarePlanSubProblemListID")
                        .HasColumnType("integer");

                    b.Property<string>("Goal")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("PLReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PLStatus")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("PersonInChargeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemListID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfGoal")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CarePlanSubProblemList");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CarePlanSubProblemListGoal", b =>
                {
                    b.Property<int?>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CarePlanSubProblemListGoalID")
                        .HasColumnType("integer");

                    b.Property<int>("CarePlanSubProblemListID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Goal")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("OperatorID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProblemListGoalID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score1")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("Score2")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<int?>("ScoreTypeID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CarePlanSubProblemListGoal");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CareReport", b =>
                {
                    b.Property<bool?>("ACP")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ACP_DoneDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ACP_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AggravatingFactor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AirwayBreathingID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AirwayBreathingRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("BladderCareID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("BladderCareNPU")
                        .HasColumnType("integer");

                    b.Property<string>("BladderCareRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("BladderCareTimes")
                        .HasColumnType("integer");

                    b.Property<int?>("BowelCareID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("BowelInterventions")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BowelRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BowelSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("BowelType")
                        .HasColumnType("integer");

                    b.Property<string>("BreathSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CapillaryRefillID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CarePlanID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CareReportID")
                        .HasColumnType("integer");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CareReportRehabilitationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CareReportSystemInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CareReportType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("CharacteristicOfUrine")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("CirculationID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CirculationRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ColorOthers")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Consistency")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("CoughAmount")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("CoughID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DayNightReversal")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("DiapersID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Dysuria")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Environment")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EnvironmentRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Eyes")
                        .HasColumnType("integer");

                    b.Property<string>("Frequency")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("HeartSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("HowManyDaysBNO")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LeftEyeReaction")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("LeftEyeSize")
                        .HasColumnType("integer");

                    b.Property<int?>("LipsID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("LowerEyelidsID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Memo1")
                        .HasColumnType("text");

                    b.Property<string>("Memo2")
                        .HasColumnType("text");

                    b.Property<string>("Memo3")
                        .HasColumnType("text");

                    b.Property<string>("Memo4")
                        .HasColumnType("text");

                    b.Property<string>("Memo5")
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MotorResponse")
                        .HasColumnType("integer");

                    b.Property<string>("Nebuliser")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("NeuroOrMental")
                        .HasColumnType("integer");

                    b.Property<string>("NeuroRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("NoOfBowelTimes")
                        .HasColumnType("integer");

                    b.Property<int?>("O2AidID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("O2Litres")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal?>("O2LitresPercent")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<string>("OtherTreatment")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("OtherTreatmentOther")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherTreatmentRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Pain")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("PainDescriptionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PainLevel")
                        .HasColumnType("integer");

                    b.Property<string>("PainRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PainScaleType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientNutritionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PeripheralPulsesPedalID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PeripheralPulsesRadialID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("PersonalHygiene")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("PersonalHygieneRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PsychoEmotionalSpiritual")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PsychoRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RelievingFactor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RightEyeReaction")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("RightEyeSize")
                        .HasColumnType("integer");

                    b.Property<string>("SectionRequireInput")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SectionRequired")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SectionStatus")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SiteOfPain")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SkinAndWoundCare")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("SleepRestID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("SleepRestRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Stoma")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("StomaAmountOfOutput")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StomaAppearance")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StomaColour")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("StomaCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StomaEffluent")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StomaOstomyProductUsed")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StomaPeristomalSkin")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StomaProtrusion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("StomaReviewDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("StomaSizeBreath")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal?>("StomaSizeLength")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Sunction")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("TemperatureID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("TemperatureInterventions")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TemperatureRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TypeOfPain")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("TypeOfUrine")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("VerbalResponse")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VisitEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VisitStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("VisitedBy_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("VitalSignID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CareReport");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CareReportConfig", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CareReportConfigID")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SectionAccess")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("UserTypeID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CareReportConfig");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CareReportRehabilitation", b =>
                {
                    b.Property<string>("ADLAssistanceType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Bounded")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("CareReportRehabilitationID")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DVTType")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool?>("IsADLAssistance")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDVTPrevention")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLowerLimbStrengthLeft")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLowerLimbStrengthRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpperLimbStrengthLeft")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpperLimbStrengthRight")
                        .HasColumnType("boolean");

                    b.Property<int?>("LowerLimbStrengthLeft")
                        .HasColumnType("integer");

                    b.Property<int?>("LowerLimbStrengthRight")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NoOfSatOutOfBed")
                        .HasColumnType("integer");

                    b.Property<int?>("NoOfTimesTurned")
                        .HasColumnType("integer");

                    b.Property<string>("RehabilitationRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("RequireOccupationTherapist")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RequirePhysioTherapist")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RequireSpeechTherapist")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RequireWalkingAid")
                        .HasColumnType("boolean");

                    b.Property<int?>("UpperLimbStrengthLeft")
                        .HasColumnType("integer");

                    b.Property<int?>("UpperLimbStrengthRight")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitForOccupationTherapist")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitForPhysioTherapist")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitForSpeechTherapist")
                        .HasColumnType("integer");

                    b.Property<string>("WalkingAidType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.ToTable("Audit_CareReportRehabilitation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CareReportSocialSupport", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CareReportSocialSupportID")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientSocialSupportID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CareReportSocialSupport");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CareReportSystemInfo", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CareReportSystemInfoID")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdateFamily")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpdateKeyPerson1")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpdateKeyPerson2")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpdatePrimaryDoctor")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpdateSecondaryDoctor")
                        .HasColumnType("boolean");

                    b.Property<int?>("KeyPerson1UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("KeyPerson2UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PrimaryDoctorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PrimaryDoctorUserID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("SecondaryDoctorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SecondaryDoctorUserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_CareReportSystemInfo");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Chat", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Attachment_Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("ChatID")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Family")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Chat");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Code", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("AllergyReaction_Drug")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AllergyReaction_Others")
                        .HasColumnType("boolean");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeId")
                        .HasColumnType("integer");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CodeTypeId_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Critical")
                        .HasColumnType("boolean");

                    b.Property<string>("CurrencyCodeA")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CurrencyCodeN")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CurrencyInvoiceFooter")
                        .HasColumnType("text");

                    b.Property<bool?>("Indication_Acute")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Indication_PRN")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("MedicationGroupID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ordering")
                        .HasColumnType("integer");

                    b.Property<string>("Referral_Code")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.ToTable("Audit_Code");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_CodeType", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CodeTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_CodeType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Diagnosis", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("DiagnosisID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_Diagnosis");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_DischargeSummaryReport", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DischargeSummaryReportId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SummaryCaseNote")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VisitDateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VisitDateStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("VisitedBy_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_DischargeSummaryReport");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_DischargeSummaryReportAttachment", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DischargeSummaryReportAttachmentID")
                        .HasColumnType("integer");

                    b.Property<int>("DischargeSummaryReportID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Audit_DischargeSummaryReportAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Disease", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DiseaseCode")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("DiseaseID")
                        .HasColumnType("integer");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAdditionalInfo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuggestPalliativeCare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SystemID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Disease");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_DiseaseInfo", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("DiseaseInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DiseaseInfoID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_DiseaseInfo");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_DiseaseSubInfo", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("DiseaseSubInfo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DiseaseSubInfoID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_DiseaseSubInfo");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_DiseaseVitalSignType", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("DiseaseVitalSignTypeID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VitalSignTypeID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_DiseaseVitalSignType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_EBASDEPQuestion", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EBASDEPQuestionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ordering")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Audit_EBASDEPQuestion");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Enquiry", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CareManagerAssignedID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CaregiverAtHomeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactNumberOfCaller")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailOfCaller")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("EnquiryID")
                        .HasColumnType("integer");

                    b.Property<int?>("EnquirySourceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("GenderID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MedicalHistory")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NameOfCaller")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrderID")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("OtherPreferredLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OtherRace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PatientAddress3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("PreferredAppointmentDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PreferredLanguageID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("RaceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ServicesRequiredID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserOrganizationID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Enquiry");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_EnquiryAttachment", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EnquiryAttachmentID")
                        .HasColumnType("integer");

                    b.Property<int>("EnquiryID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Audit_EnquiryAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_EnquiryConfig", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailContent")
                        .HasColumnType("text");

                    b.Property<string>("EmailtoCMContent")
                        .HasColumnType("text");

                    b.Property<int>("EnquiryConfigID")
                        .HasColumnType("integer");

                    b.Property<int?>("EscalatingPersonID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("EscalationEmail")
                        .HasColumnType("text");

                    b.Property<decimal?>("EscalationPeriod")
                        .HasColumnType("decimal(2, 0)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SCMID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_EnquiryConfig");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_EnquiryEscPerson", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("EnquiryConfigID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_EnquiryEscPerson");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_EnquiryLanguage", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("EnquiryID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_EnquiryLanguage");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_EnquirySCM", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("EnquiryConfigID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_EnquirySCM");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_EnquiryServicesRequired", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("EnquiryID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_EnquiryServicesRequired");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Event", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EventID")
                        .HasColumnType("integer");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("EventTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PeriodTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserCategory_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Event");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_EventUser", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EventID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("EventUserID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.ToTable("Audit_EventUser");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_EventUserLog", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EventID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("EventUserLogID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_EventUserLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ExternalDoctor", b =>
                {
                    b.Property<int?>("AccessHospitalID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("ClinicianTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ExternalDoctorID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Audit_ExternalDoctor");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_GeoFencing", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("GeoFencingId")
                        .HasColumnType("integer");

                    b.Property<string>("IP")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWhitelisted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_GeoFencing");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Group", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_Group");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_GroupRole", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("GroupId_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RoleId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_GroupRole");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ICAWoundCare", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_ICAWoundCare");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_InitialCareAssessment", b =>
                {
                    b.Property<bool?>("AbdomenSymmetry")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AblePassUrine")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AddressIssue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AnxietyLevel")
                        .HasColumnType("integer");

                    b.Property<bool?>("AnySkinIssue")
                        .HasColumnType("boolean");

                    b.Property<int?>("ApicalPulse")
                        .HasColumnType("integer");

                    b.Property<string>("AssistiveAids")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("BeliefInfluenced")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("BestWellbeing")
                        .HasColumnType("integer");

                    b.Property<string>("BowelHabitsDays")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("BowelHabitsTimes")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("BowelSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BowelType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BreathSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Breathing")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CAAlertness")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CACommunication")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("CADementia")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CAPerson")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CAPlace")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CASituation")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CAdateAndTime")
                        .HasColumnType("boolean");

                    b.Property<string>("Catheter")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime?>("CatheterDateInserted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CatheterNextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CatheterSize")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CatheterType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("ChestSymmetry")
                        .HasColumnType("boolean");

                    b.Property<string>("Concern")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ConsciousLevel")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Cough")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Depressed")
                        .HasColumnType("boolean");

                    b.Property<int?>("DepressionLevel")
                        .HasColumnType("integer");

                    b.Property<bool?>("DifficultyCoping")
                        .HasColumnType("boolean");

                    b.Property<string>("DifficultyCopingYes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("DrowsinessLevel")
                        .HasColumnType("integer");

                    b.Property<string>("EmotionalState")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EmotionalYes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("EmotionalYesNo")
                        .HasColumnType("boolean");

                    b.Property<string>("Faith")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GeneralCondition")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("GetSupport")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GiveMeaningToLife")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Hearing")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("HearingAid")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HearingImpairedLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("HearingImpairedRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("HearingImpairedRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HearingImpairedWithHearingAidLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("HearingImpairedWithHearingAidRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("HearingImpairedWithHearingAidRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityAffectCareManager")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityAffectCaregiver")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityCommunication")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityCooking")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityRefrigeration")
                        .HasColumnType("boolean");

                    b.Property<string>("HomeFacilityRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("HomeFacilityStairs")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityToileting")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityVentilation")
                        .HasColumnType("boolean");

                    b.Property<string>("HowCanIHelp")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("HowDoYouScope")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("Incontinence")
                        .HasColumnType("boolean");

                    b.Property<string>("IncontinenceType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("InfluenceTakeCare")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("InitialCareAssessmentID")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBeliefImportant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPartOfCommunity")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReligious")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRequirePalliativeCare")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTracheostomyInnerCannula")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LMP")
                        .HasColumnType("datetime");

                    b.Property<int?>("LackOfAppetiteLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftLowerLimbStrength")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftUpperLimbStrength")
                        .HasColumnType("integer");

                    b.Property<bool?>("LostInterest")
                        .HasColumnType("boolean");

                    b.Property<string>("LostInterestYes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MakeSense")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MedicalHistory")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MilkFeedRx")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MobilityStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NauseaLevel")
                        .HasColumnType("integer");

                    b.Property<bool?>("NutritionalImbalance")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("O2Litres")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<string>("O2LitresVia")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int?>("OralCavityAssessmentScore1")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore2")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore3")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore4")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore5")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore6")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore7")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore8")
                        .HasColumnType("integer");

                    b.Property<string>("Oralhealth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OtherBreathing")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherEmotionalState")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("OxygenLMin")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("OxygenRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("OxygenRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("OxygenType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PainLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Palpation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PatientAdditionalInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientMBIID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientMFSID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientMedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientNutritionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientProfileID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientRAFID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientReferralID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Percussion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PersonalConcern")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Physique")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("PressureInjuries")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReferCounsellor")
                        .HasColumnType("boolean");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("RightLowerLimbStrength")
                        .HasColumnType("integer");

                    b.Property<int?>("RightUpperLimbStrength")
                        .HasColumnType("integer");

                    b.Property<string>("RoleOfBeliefForCommunity")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RoleOfBeliefForInfluence")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SectionStatus")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("ShortnessOfBreath")
                        .HasColumnType("integer");

                    b.Property<string>("SkinIssue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SkinTurgor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SkinType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("Sputum")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Stoma")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("StomaAmountOfOutput")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StomaAppearance")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StomaColour")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("StomaCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StomaEffluent")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StomaOstomyProductUsed")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StomaPeristomalSkin")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StomaProtrusion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("StomaReviewDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("StomaSizeBreath")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal?>("StomaSizeLength")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("StoolsType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("SuctioningRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("SupportTo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TalkToSomeone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Teeth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TenderNGuarding")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TirednessLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TracheostomyDateInserted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TracheostomyNextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TracheostomySize")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TracheostomyType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UrinaryFrequencyDay")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("UrinaryFrequencyTimes")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("UrinaryTypes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UrineColour")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UrineConsistency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("UseOfDrug")
                        .HasColumnType("boolean");

                    b.Property<string>("UseOfDrugExplain")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("VSIntermittent")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VSLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("VSOnSetDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VSPainFrequency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VSPainFrequencyIntermittentNumber")
                        .HasColumnType("integer");

                    b.Property<string>("VSPrecipitatingFactors")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("VSQuality")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VSRelievingFactors")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Vision")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("VisionImpairedCataract")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionImpairedCataractLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("VisionImpairedCataractRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("VisionImpairedCataractRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionImpairedGlaucoma")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionImpairedGlaucomaLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("VisionImpairedGlaucomaRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("VisionImpairedGlaucomaRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionImpairedLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("VisionImpairedRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("VisionImpairedRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionSpectacles")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("VisitDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("VitalSignID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore1")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore2")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore3")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore4")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore5")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore6")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("painOnSetDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_InitialCareAssessment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_InitialCareAssessmentAttachment", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("InitialCareAssessmentAttachmentID")
                        .HasColumnType("integer");

                    b.Property<int>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDischargeAssessment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferralAssessment")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Audit_InitialCareAssessmentAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_InitialCareAssessmentSpecialInstruction", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("InitialCareAssessmentSpecialInstructionID")
                        .HasColumnType("integer");

                    b.Property<string>("Instructions")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_InitialCareAssessmentSpecialInstruction");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_InitialCareAssessmentVitalSign", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimeOfRecord")
                        .HasColumnType("datetime");

                    b.Property<int>("VitalSignID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_InitialCareAssessmentVitalSign");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Intervention", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("InterventionID")
                        .HasColumnType("integer");

                    b.Property<string>("InterventionInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_Intervention");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Item", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<bool?>("AvailableInBilling")
                        .HasColumnType("boolean");

                    b.Property<int>("CategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemID")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ItemUnitID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable("Audit_Item");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ItemStock", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ItemStockID")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.ToTable("Audit_ItemStock");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_LoginDevice", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("LoginDeviceId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_LoginDevice");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_MailSettings", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("displayMsgBCC")
                        .HasColumnType("boolean");

                    b.Property<bool?>("displayMsgCC")
                        .HasColumnType("boolean");

                    b.Property<bool?>("displayMsgTo")
                        .HasColumnType("boolean");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<string>("msgBCC")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("msgBody")
                        .HasColumnType("text");

                    b.Property<string>("msgCC")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("msgSubj")
                        .HasColumnType("text");

                    b.Property<string>("msgTo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Audit_MailSettings");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_MedicationVitalSignType", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("MedicationVitalSignTypeID")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VitalSignTypeID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_MedicationVitalSignType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_MobileAppVersioning", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AppName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MobileVersionId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Audit_MobileAppVersioning");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_MultiDisciplinaryMeeting", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<int>("AssignedToFollowUp")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuesOverall")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MultiDisciplinaryMeetingID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Audit_MultiDisciplinaryMeeting");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_MultiDisciplinaryMeetingDetail", b =>
                {
                    b.Property<int>("ActionPlan")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("IssueCatID")
                        .HasColumnType("integer");

                    b.Property<string>("IssueContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IssueTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MultiDisciplinaryMeetingDetailID")
                        .HasColumnType("integer");

                    b.Property<int>("MultiDisciplinaryMeetingID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_MultiDisciplinaryMeetingDetail");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_NotificationChat", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("ChatID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationChatID")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_NotificationChat");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_NotificationEvent", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EventID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationEventID")
                        .HasColumnType("integer");

                    b.Property<int>("NotificationId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_NotificationEvent");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_NotificationMessageTemplates", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<string>("notificationMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("notificationSubject")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("notificationgroupCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_NotificationMessageTemplates");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_NotificationTask", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationId_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("NotificationTaskID")
                        .HasColumnType("integer");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_NotificationTask");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_NotificationVitalSignDetails", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("VitalSignDetailId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<int>("notificationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_NotificationVitalSignDetails");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Notifications", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("FacilityID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isRead")
                        .HasColumnType("boolean");

                    b.Property<string>("notificationTypeCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Notifications");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_NutritionTask", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ActionTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AfterImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("AmountReferenceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("BeforeImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ColorReferenceID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Food")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("GivenAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Liquid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NutritionTaskID")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TakenAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeReferenceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.ToTable("Audit_NutritionTask");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_NutritionTaskReference", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeId_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReferenceID")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.ToTable("Audit_NutritionTaskReference");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Otp", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OtpId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Otp");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Package", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PackageDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PackageID")
                        .HasColumnType("integer");

                    b.Property<string>("PackageName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Audit_Package");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Patient", b =>
                {
                    b.Property<bool?>("ACID")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ACP")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AMD")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("AccessHospitalID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ActionDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AdmittedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("BloodTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CareManagerAssignedID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CareReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<int?>("DischargeNoticePeriodInMonths")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DrugAllergy")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("GenderID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("GenogramPicture")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IdentificationAttachmentFilename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdentificationAttachmentPhysical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IntegrationSourceID")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("InvoiceModeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForFamilyNotification1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForFamilyNotification2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForVitalAlert1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForVitalAlert2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForVitalAlert3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailingAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MailingAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MailingAddress3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("MaritalStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("MedicalHistoryRemarks")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NRIC")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("NumberOfChildren")
                        .HasColumnType("integer");

                    b.Property<string>("NursingStation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Occupation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OrderID")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("OtherLanguage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherRace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("PACEMAKER")
                        .HasColumnType("boolean");

                    b.Property<int?>("PatientAdditionalInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientMedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientProfileID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientReferralByID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientReferralID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Photo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("RaceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonOfAdmission")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ReferringDiagnosis")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ReligionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ResidentTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<bool?>("UpfrontPayment")
                        .HasColumnType("boolean");

                    b.Property<string>("VisitingFrequency")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.ToTable("Audit_Patient");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientAMT", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Alertness")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientAMTID")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("VitalSignDetailId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientAMT");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientAMTAnswer", b =>
                {
                    b.Property<int>("AMTQuestionID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Answer")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("PatientAMTID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientAMTAnswer");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientAccessLine", b =>
                {
                    b.Property<string>("AccessLine")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("AccessLineRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateDueForChange")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfInsertion")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Patent")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("PatentReSited")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime?>("PatentReSitedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PatentSite")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("PatientAccessLineID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientAccessLine");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientAdditionalInfo", b =>
                {
                    b.Property<bool?>("ACP")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ACP_DoneDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ACP_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("AICD")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AICD_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AICD_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("AICD_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<bool?>("CVCLine")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CVCLine_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CVCLine_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CVCLine_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DNR")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DNR_DateInitiated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DNR_DateTerminated")
                        .HasColumnType("datetime");

                    b.Property<string>("DNR_InitiatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DNR_TerminatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IVLine")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IVLine_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IVLine_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("IVLine_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PICCLine")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PICCLine_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PICCLine_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("PICCLine_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Pacemaker")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Pacemaker_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Pacemaker_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("Pacemaker_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientAdditionalInfoID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientAdditionalInfo");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientAttachment", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FileTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientAttachmentID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Audit_PatientAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientBradenScale", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientBradenScaleID")
                        .HasColumnType("integer");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientBradenScale");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientClinician", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ExternalDoctorID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientClinicianID")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("UserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientClinician");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientDrugAllergy", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DrugAllergyID")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ReactionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientDrugAllergy");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientEBASDEP", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Alertness")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientEBASDEPID")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("VitalSignDetailId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientEBASDEP");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientEBASDEPAnswer", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Answer")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("EBASDEPQuestionID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientEBASDEPID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientEBASDEPAnswer");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientFamilyHistory", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientFamilyHistoryID")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int?>("YearDiagnose")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientFamilyHistory");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientGCS", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientGCSID")
                        .HasColumnType("integer");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientGCS");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientImmunisation", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("ImmunisationID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("NextDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Place")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.ToTable("Audit_PatientImmunisation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientLanguage", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientLanguage");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientMBI", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientMBIID")
                        .HasColumnType("integer");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score10")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<int?>("Score7")
                        .HasColumnType("integer");

                    b.Property<int?>("Score8")
                        .HasColumnType("integer");

                    b.Property<int?>("Score9")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientMBI");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientMFS", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientMFSID")
                        .HasColumnType("integer");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientMFS");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientMMSE", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientMMSEID")
                        .HasColumnType("integer");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score10")
                        .HasColumnType("integer");

                    b.Property<int?>("Score11")
                        .HasColumnType("integer");

                    b.Property<int?>("Score12")
                        .HasColumnType("integer");

                    b.Property<int?>("Score13")
                        .HasColumnType("integer");

                    b.Property<int?>("Score14")
                        .HasColumnType("integer");

                    b.Property<int?>("Score15")
                        .HasColumnType("integer");

                    b.Property<int?>("Score16")
                        .HasColumnType("integer");

                    b.Property<int?>("Score17")
                        .HasColumnType("integer");

                    b.Property<int?>("Score18")
                        .HasColumnType("integer");

                    b.Property<int?>("Score19")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score20")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<int?>("Score7")
                        .HasColumnType("integer");

                    b.Property<int?>("Score8")
                        .HasColumnType("integer");

                    b.Property<int?>("Score9")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientMMSE");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientMedicalHistory", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("ClinicianID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MedicalStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientMedicalHistoryID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientMedicalHistory");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientMedication", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Allergies")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<bool?>("Compliant")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientMedicationID")
                        .HasColumnType("integer");

                    b.Property<bool?>("SelfAdminister")
                        .HasColumnType("boolean");

                    b.ToTable("Audit_PatientMedication");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientMedicationConsume", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("AcutePRNIndicationID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("ChronicDiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ChronicDiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ClinicHosp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClinicHospED")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DosageID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("DrContact")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrContactED")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrNameED")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FrequencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Indication")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("InstructedBy2ID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InstructedByID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MCRNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MCRNoED")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("MedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientMedicationConsumeID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientMedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonOfDiscontinue")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ReferID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("RouteID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_PatientMedicationConsume");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientMedicationConsumeAttachment", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsEndDate")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientMedicationConsumeAttachmentID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientMedicationConsumeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Audit_PatientMedicationConsumeAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientMedicationSupply", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("PatientMedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("SupplyID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientMedicationSupply");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientNutrition", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Appetite")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DiagnosedDysphasia")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DiagnosedDysphasiaLastReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Diet")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EatingAndSwallowing")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("EatingAndSwallowingDateDue")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EatingAndSwallowingDateInserted")
                        .HasColumnType("datetime");

                    b.Property<string>("EatingAndSwallowingSize")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EatingAndSwallowingTypeOfTube")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EatingAndSwallowingTypeOfTubeFeeding")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Enteralfeeding")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FluidConsistency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("FluidRestrictionMLSPerDay")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("IVtherapy")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("IVtherapyMLSPerDay")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<string>("IVtherapyStateType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFIsluidRestriction")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MilkFeedAmt")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientNutritionID")
                        .HasColumnType("integer");

                    b.Property<bool?>("ReferralToSpeechTherapist")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReviewedBySpeechTherapist")
                        .HasColumnType("boolean");

                    b.Property<string>("SizeofPEGJtube")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("SwallowingIssues")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("WaterPerDay")
                        .HasColumnType("decimal(4, 0)");

                    b.ToTable("Audit_PatientNutrition");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientOtherAllergy", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DescriptionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OtherAllergyID")
                        .HasColumnType("integer");

                    b.Property<string>("OtherDescription")
                        .HasColumnType("text");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ReactionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientOtherAllergy");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientPackage", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("PackageID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientPackage");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientProfile", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Bed")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("BloodTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Organization")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherReligion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PatientOrganizationID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientProfileID")
                        .HasColumnType("integer");

                    b.Property<int?>("ReligionID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Ward")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Audit_PatientProfile");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientRAF", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientRAFID")
                        .HasColumnType("integer");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5a")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5b")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5c")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5d")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<int?>("Score7")
                        .HasColumnType("integer");

                    b.Property<int?>("Score8")
                        .HasColumnType("integer");

                    b.Property<int?>("Score9")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientRAF");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientReferral", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FamilyAwareDiagnose")
                        .HasColumnType("boolean");

                    b.Property<string>("FamilyAwareDiagnoseReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("FamilyAwarePrognosis")
                        .HasColumnType("boolean");

                    b.Property<string>("FamilyAwarePrognosisReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PatientAwareDiagnose")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientAwareDiagnoseReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("PatientAwarePrognosis")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientAwarePrognosisReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PatientReferralID")
                        .HasColumnType("integer");

                    b.Property<int?>("PrimaryClinicianID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PrimaryNurseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondaryClinicianID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondaryNurseID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientReferral");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientReferralService", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("PatientReferralID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientReferralService");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientSocialSupport", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<bool?>("BillTo")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("GenderID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("MaritalStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NationalityID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("NotifyEmail")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NotifyPhoneCall")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NotifySMS")
                        .HasColumnType("boolean");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientSocialSupportID")
                        .HasColumnType("integer");

                    b.Property<int?>("RelationshipID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("Spokeperson")
                        .HasColumnType("boolean");

                    b.Property<string>("UserType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Audit_PatientSocialSupport");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientSpecialIndicator", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientSpecialIndicator");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWound", b =>
                {
                    b.Property<string>("ActionDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationOfWound")
                        .HasColumnType("text");

                    b.Property<string>("LocationRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OccurDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundID")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("StatusRemark")
                        .HasColumnType("text");

                    b.Property<int?>("WoundStatusID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientWound");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWoundDraft", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AnnotatedImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AnnotatedImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("AssignDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<decimal?>("AverageDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DepthEighty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthForty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("DepthImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DepthImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("DepthMax")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthNans")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthNegative")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthSixty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthTwenty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Edges")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Epithelizing")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Exudate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExudateNature")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExudatedConsistency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Granulation")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ImageUpload")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsAccept")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRedness")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSmell")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSwelling")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWarmToTouch")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationOfWound")
                        .HasColumnType("text");

                    b.Property<string>("LocationRemark")
                        .HasColumnType("text");

                    b.Property<decimal?>("MaximumDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("MeasurementUpdateRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("MinimumDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Necrosis")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextTreatmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OccurDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OriginalImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OriginalImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Others")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundDraftID")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientWoundID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("PeriWound")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Perimeter")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<decimal?>("Rotation")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Site")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeDepth_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeLength")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeLength_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeWidth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeWidth_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("Slough")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Stage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Suffering")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SurfaceArea")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("TCUpdateRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TO_Comments")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("TreatmentRemarks")
                        .HasColumnType("text");

                    b.Property<string>("UnderMining")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("WoundBedImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WoundBedImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("WoundStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("isTCModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isUploadImageModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isWMModified")
                        .HasColumnType("boolean");

                    b.Property<string>("woundOverlaysImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("woundOverlaysImageDistance")
                        .HasColumnType("decimal(5, 2)");

                    b.ToTable("Audit_PatientWoundDraft");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWoundReviewBy", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientWoundReviewById")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewComments")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientWoundReviewBy");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWoundVisit", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AnnotatedImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Appearance")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("AssignedToID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<decimal?>("AverageDepth")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CleansingSolutionUsed")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DESIGN_R_Depth")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("DESIGN_R_Exudate")
                        .HasColumnType("integer");

                    b.Property<int?>("DESIGN_R_Granulation")
                        .HasColumnType("integer");

                    b.Property<int?>("DESIGN_R_Inflammation")
                        .HasColumnType("integer");

                    b.Property<int?>("DESIGN_R_Necrotic")
                        .HasColumnType("integer");

                    b.Property<int?>("DESIGN_R_Pocket")
                        .HasColumnType("integer");

                    b.Property<int?>("DESIGN_R_Score")
                        .HasColumnType("integer");

                    b.Property<int?>("DESIGN_R_Size")
                        .HasColumnType("integer");

                    b.Property<string>("Debridement")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("DepthEighty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthForty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("DepthImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DepthImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("DepthMax")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthNans")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthNegative")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthSixty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthTwenty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Edges")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Exudate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExudateSubInfo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExudateSubInfo2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FrequencyOfVisit")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUpload")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("InfectionRemarks")
                        .HasColumnType("text");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDESIGN_R")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDraft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsRedness")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSmell")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSwelling")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWarmToTouch")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaximumDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("MeasurementUpdateRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("MinimumDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Model_jpg")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Model_mtl")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Model_obj")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextTreatmentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrigWoundId")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PatientWoundID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundVisitID")
                        .HasColumnType("integer");

                    b.Property<string>("PeriWound")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Perimeter")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ProgressiveWoundStage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReasonForChangeClassification")
                        .HasColumnType("text");

                    b.Property<string>("ReasonForChangeMeasurement")
                        .HasColumnType("text");

                    b.Property<int?>("ReferID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rotation")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeDepth_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeLength")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeLength_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeWidth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeWidth_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool?>("SmallWound")
                        .HasColumnType("boolean");

                    b.Property<string>("Smell")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("StatusRemark")
                        .HasColumnType("text");

                    b.Property<int?>("Suffering")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SurfaceArea")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("TCUpdateRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TC_AnnotatedImage")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<decimal?>("TC_Auto_Epithelizing")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("TC_Auto_Granulation")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("TC_Auto_Necrosis")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("TC_Auto_Others")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("TC_Auto_Slough")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("TC_Epithelizing")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("TC_Granulation")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool?>("TC_IsAccept")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("TC_Necrosis")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("TC_OriginalImage")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<decimal?>("TC_Others")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("TC_Reason")
                        .HasColumnType("text");

                    b.Property<decimal?>("TC_Slough")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("TC_WoundBedImage")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("TO_Comments")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("TreatmentRemarks")
                        .HasColumnType("text");

                    b.Property<string>("UnderMining")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("UnderMiningDepth")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("VitalSignID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("WoundBedImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WoundCaptureMode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("WoundInfection")
                        .HasColumnType("boolean");

                    b.Property<string>("WoundSubType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WoundType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WoundTypeOther")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("abscessPuss")
                        .HasColumnType("boolean");

                    b.Property<bool?>("delayedHealing")
                        .HasColumnType("boolean");

                    b.Property<bool?>("erythema")
                        .HasColumnType("boolean");

                    b.Property<bool?>("fever")
                        .HasColumnType("boolean");

                    b.Property<bool?>("increasedExcudate")
                        .HasColumnType("boolean");

                    b.Property<bool?>("increasedPain")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isTCAndImageModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isTCModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isUploadImageModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isWMModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("localWarmth")
                        .HasColumnType("boolean");

                    b.Property<bool?>("maladour")
                        .HasColumnType("boolean");

                    b.Property<bool?>("oedema")
                        .HasColumnType("boolean");

                    b.Property<string>("otherTissueName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool?>("pocketing")
                        .HasColumnType("boolean");

                    b.Property<bool?>("suspectedInfection")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("temperature")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("woundOverlaysImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("woundOverlaysImageDistance")
                        .HasColumnType("decimal(5, 2)");

                    b.ToTable("Audit_PatientWoundVisit");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWoundVisitAppearance", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientWoundVisitAppearance");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWoundVisitCleansingItem", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientWoundVisitCleansingItem");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWoundVisitClinician", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExternalDoctorID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientWoundVisitClinicianID")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("UserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientWoundVisitClinician");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWoundVisitTreatment", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsChargeable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundVisitTreatmentID")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientWoundVisitTreatment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWoundVisitTreatmentList", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundVisitTListID")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TListItemID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientWoundVisitTreatmentList");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_PatientWoundVisitTreatmentObjectives", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("ObjectiveID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_PatientWoundVisitTreatmentObjectives");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ProblemList", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProblemInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ProblemListID")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfGoal")
                        .HasColumnType("integer");

                    b.ToTable("Audit_ProblemList");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ProblemListGoal", b =>
                {
                    b.Property<int?>("Action")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Goal")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("OperatorID")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemListGoalID")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemListID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ScoreTypeID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_ProblemListGoal");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Receipt", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("EmailBCC")
                        .HasColumnType("text");

                    b.Property<string>("EmailCC")
                        .HasColumnType("text");

                    b.Property<bool?>("EmailPatient")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailTo")
                        .HasColumnType("text");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentModeID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReceiptID")
                        .HasColumnType("integer");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ReceivedFrom")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<bool?>("SendEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable("Audit_Receipt");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ReceiptForInvoice", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Amt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BillingInvoiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ReceiptForInvoiceID")
                        .HasColumnType("integer");

                    b.Property<int>("ReceiptID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_ReceiptForInvoice");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_RegisteredDevice", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("DeviceID")
                        .HasColumnType("integer");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int?>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<int?>("UserID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_RegisteredDevice");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_RegisteredDeviceV2", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AppName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstRegisterIpAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RegisteredDeviceID")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserId_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.ToTable("Audit_RegisteredDeviceV2");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ResidentAssessmentCategory", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Category1Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category1Recommendation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category2Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category2Recommendation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category3Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category3Recommendation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category4Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category4Recommendation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ResidentAssessmentCategoryID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_ResidentAssessmentCategory");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Role", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("OptionValue")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Role");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ScheduledTasks", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<bool>("Everyday")
                        .HasColumnType("boolean");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<string>("IntervalType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime");

                    b.Property<int>("NDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NextRun")
                        .HasColumnType("datetime");

                    b.Property<string>("PerformTask")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("ScheduleDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("datetime");

                    b.Property<string>("WeekDays")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("Weekday")
                        .HasColumnType("boolean");

                    b.ToTable("Audit_ScheduledTasks");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ServiceForBilling", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duration1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Duration2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServiceForBillingID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Audit_ServiceForBilling");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ServiceForBillingCost", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServiceForBillingCostID")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceForBillingID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable("Audit_ServiceForBillingCost");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_ServiceSkillset", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("ServiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("SkillsetID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_ServiceSkillset");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_SyncPatientLog", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OffPatientID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<int?>("ServerPatientID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncBatchTs")
                        .HasColumnType("integer");

                    b.Property<int>("SyncLogId")
                        .HasColumnType("integer");

                    b.Property<bool>("SyncResult")
                        .HasColumnType("boolean");

                    b.ToTable("Audit_SyncPatientLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_SyncWoundLog", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OffWoundID")
                        .HasColumnType("integer");

                    b.Property<int>("ServerPatientID")
                        .HasColumnType("integer");

                    b.Property<int>("ServerWoundID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncBatchTs")
                        .HasColumnType("integer");

                    b.Property<int>("SyncLogId")
                        .HasColumnType("integer");

                    b.Property<bool>("SyncResult")
                        .HasColumnType("boolean");

                    b.Property<int>("WoundID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_SyncWoundLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_SyncWoundVisitLog", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OffWoundVisitID")
                        .HasColumnType("integer");

                    b.Property<int>("ServerWoundID")
                        .HasColumnType("integer");

                    b.Property<int>("ServerWoundVisitID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncBatchTs")
                        .HasColumnType("integer");

                    b.Property<int>("SyncLogId")
                        .HasColumnType("integer");

                    b.Property<bool>("SyncResult")
                        .HasColumnType("boolean");

                    b.ToTable("Audit_SyncWoundVisitLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_SysConfig", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("ConfigName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsConfigurable")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_SysConfig");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_SystemForDisease", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("GroupCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("System")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SystemID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_SystemForDisease");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TD_WoundAssessmentFactor", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("TD_WoundAssessmentID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_TD_WoundAssessmentFactor");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Task", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ActionTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("DosageID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FrequencyID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("H2OFlushingMLS")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<int?>("MedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("MedicationInstructions")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("MilkFeedVolumeMLS")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherLocation")
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("Pending")
                        .HasColumnType("boolean");

                    b.Property<int?>("Recurrence_Days")
                        .HasColumnType("integer");

                    b.Property<int?>("Recurrence_Frequency")
                        .HasColumnType("integer");

                    b.Property<int?>("Recurrence_Interval")
                        .HasColumnType("integer");

                    b.Property<int?>("Recurrence_IntervalFlag")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferenceID")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Supplement")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TaskID")
                        .HasColumnType("integer");

                    b.Property<int?>("UserCategory_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("recurrenceDailyHourly")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Task");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TaskFileAttachment", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FileAttachmentID")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_TaskFileAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TaskServicesRequired", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_TaskServicesRequired");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TaskSpecificDate", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("TaskSpecificDateID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_TaskSpecificDate");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TaskUser", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("TaskUserID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.ToTable("Audit_TaskUser");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TaskUserLog", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FailReason")
                        .HasColumnType("text");

                    b.Property<bool?>("HideDashboard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("TaskUserLogID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_TaskUserLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TaskUserLogAttachment", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FileAttachmentID")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskUserLogID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_TaskUserLogAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TeleconsultationRecording", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("RecordingID")
                        .HasColumnType("integer");

                    b.Property<int>("RecordingType")
                        .HasColumnType("integer");

                    b.Property<string>("Sid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_TeleconsultationRecording");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TeleconsultationReport", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("TeleReportID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_TeleconsultationReport");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Thresholds", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("createdBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ews_max_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_7")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_7")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("maxValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("minValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("updatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_Thresholds");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TreatmentListItem", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemBrand")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TListItemID")
                        .HasColumnType("integer");

                    b.Property<int>("TListTypeID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_TreatmentListItem");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_TreatmentTOL", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("TListItemID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("TreatmentTOLID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_TreatmentTOL");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Types", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("codeValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime");

                    b.Property<int>("ordering")
                        .HasColumnType("integer");

                    b.Property<string>("parentCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_Types");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UploadFile", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<byte[]>("ByteData")
                        .HasColumnType("bytea");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UploadFileId")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UploadFile");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserAddress", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Address3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserLocationID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserAddress");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserBranch", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("BranchID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserBranch");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserCategory", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("EnableGeoFencing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserCategoryID")
                        .HasColumnType("integer");

                    b.Property<int?>("UserCategoryOrganizationID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserCategory");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserCategoryRole", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserCategoryID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserCategoryRole");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserLanguage", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("LanguageID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserLanguage");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserOrganization", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserOrganization");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserRole", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RoleId_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserId_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserRole");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserSkillset", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserSkillset");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserType", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("ManpowerRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserCategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserTypeID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_UserUserType", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserTypeID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_UserUserType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_Users", b =>
                {
                    b.Property<int?>("AccessLevelID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Designation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("HasValidEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTCAccepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLogoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LocationNow1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LocationNow2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LocationNow3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LocationNowModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Photo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PostalCodeNow")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("PreferredLanguage")
                        .HasColumnType("integer");

                    b.Property<string>("PreviousPasswords")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PreviousPasswords2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("ResetPassword")
                        .HasColumnType("boolean");

                    b.Property<string>("SessionKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("SharePdf")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("TokenID")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("UserOrganizationID_FK")
                        .HasColumnType("integer");

                    b.ToTable("Audit_Users");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_VitalSignDetails", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("detailValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<int>("vitalSignId")
                        .HasColumnType("integer");

                    b.Property<int>("vitalSignTypeId")
                        .HasColumnType("integer");

                    b.ToTable("Audit_VitalSignDetails");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_VitalSignRelationships", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<int>("patientId")
                        .HasColumnType("integer");

                    b.Property<int>("thresholdId")
                        .HasColumnType("integer");

                    b.Property<int>("vitalSignTypeId")
                        .HasColumnType("integer");

                    b.ToTable("Audit_VitalSignRelationships");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_VitalSignTypeThreshold", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VitalSignTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ews_max_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_7")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_7")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable("Audit_VitalSignTypeThreshold");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_VitalSignTypes", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("createdBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("updatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_VitalSignTypes");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_VitalSigns", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("createdBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<int>("icaId")
                        .HasColumnType("integer");

                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("patientId")
                        .HasColumnType("integer");

                    b.Property<string>("source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("updatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.ToTable("Audit_VitalSigns");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Audit_WoundConsolidatedEmail", b =>
                {
                    b.Property<DateTime>("ActionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("AuditAction")
                        .IsRequired()
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MailSettingsID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PDFContent")
                        .HasColumnType("text");

                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("WoundConsolidatedEmailID")
                        .HasColumnType("integer");

                    b.ToTable("Audit_WoundConsolidatedEmail");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingInvoice", b =>
                {
                    b.Property<int>("BillingInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BillingInvoiceID"));

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("Consumable")
                        .HasColumnType("boolean");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("EmailBCC")
                        .HasColumnType("text");

                    b.Property<string>("EmailCC")
                        .HasColumnType("text");

                    b.Property<bool?>("EmailPatient")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailTo")
                        .HasColumnType("text");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("InvoiceDueDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("SendEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.HasKey("BillingInvoiceID");

                    b.HasIndex("CareReportID_FK");

                    b.HasIndex("CreatedBy_FK");

                    b.HasIndex("CurrencyID_FK");

                    b.HasIndex("ModifiedBy_FK");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("BillingInvoice", t =>
                        {
                            t.HasTrigger("tr_BillingInvoice");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingInvoiceConsumable", b =>
                {
                    b.Property<int>("BillingInvoiceConsumableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BillingInvoiceConsumableID"));

                    b.Property<int>("BillingInvoiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("BillingInvoiceConsumableID");

                    b.HasIndex("BillingInvoiceID_FK");

                    b.HasIndex("ItemID_FK");

                    b.ToTable("BillingInvoiceConsumable", t =>
                        {
                            t.HasTrigger("tr_BillingInvoiceConsumable");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingInvoiceService", b =>
                {
                    b.Property<int>("BillingInvoiceServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BillingInvoiceServiceID"));

                    b.Property<int>("BillingInvoiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ProposalID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("Session")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("BillingInvoiceServiceID");

                    b.HasIndex("BillingInvoiceID_FK");

                    b.HasIndex("ProposalID_FK");

                    b.HasIndex("ServiceID_FK");

                    b.ToTable("BillingInvoiceService", t =>
                        {
                            t.HasTrigger("tr_BillingInvoiceService");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingPackage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("BillingServiceID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int?>("Session")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Type")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("Validity")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("BillingServiceID");

                    b.ToTable("BillingPackage", t =>
                        {
                            t.HasTrigger("tr_BillingPackage");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingPackageInformation", b =>
                {
                    b.Property<int>("BillingPackageID")
                        .HasColumnType("integer");

                    b.Property<int>("BillingServiceID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Session")
                        .HasColumnType("integer");

                    b.HasKey("BillingPackageID", "BillingServiceID");

                    b.ToTable("BillingPackageInformation", t =>
                        {
                            t.HasTrigger("tr_BillingPackageInformation");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingPackageRequest", b =>
                {
                    b.Property<int>("PackageRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PackageRequestID"));

                    b.Property<string>("BillingAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character(10)")
                        .IsFixedLength();

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Discount")
                        .HasColumnType("boolean");

                    b.Property<decimal>("DiscountAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DiscountType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PackageList")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PackageRequestNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SendBillTo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalPackageAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PackageRequestID")
                        .HasName("PK_PackageRequestID");

                    b.ToTable("BillingPackageRequest", t =>
                        {
                            t.HasTrigger("tr_BillingPackageRequest");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingProposal", b =>
                {
                    b.Property<int>("BillingProposalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BillingProposalID"));

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("EmailBCC")
                        .HasColumnType("text");

                    b.Property<string>("EmailCC")
                        .HasColumnType("text");

                    b.Property<bool?>("EmailPatient")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailTo")
                        .HasColumnType("text");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ProposalNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ProposalType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<bool?>("SendEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<short>("Version")
                        .HasColumnType("smallint");

                    b.HasKey("BillingProposalID");

                    b.HasIndex("CreatedBy_FK");

                    b.HasIndex("CurrencyID_FK");

                    b.HasIndex("ModifiedBy_FK");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("BillingProposal", t =>
                        {
                            t.HasTrigger("tr_BillingProposal");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingProposalService", b =>
                {
                    b.Property<int>("BillingProposalServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BillingProposalServiceID"));

                    b.Property<int>("BillingProposalID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Duration1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Duration2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("text");

                    b.Property<int>("ServiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("Session")
                        .HasColumnType("integer");

                    b.Property<int>("SessionUsed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Visit")
                        .HasColumnType("integer");

                    b.HasKey("BillingProposalServiceID");

                    b.HasIndex("BillingProposalID_FK");

                    b.HasIndex("ServiceID_FK");

                    b.ToTable("BillingProposalService", t =>
                        {
                            t.HasTrigger("tr_BillingProposalService");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingService", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceID"));

                    b.Property<int>("CategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal>("CostPerSession")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("Weekend")
                        .HasColumnType("boolean");

                    b.HasKey("ServiceID")
                        .HasName("PK_ServiceID");

                    b.HasIndex("CategoryID_FK");

                    b.ToTable("BillingService", t =>
                        {
                            t.HasTrigger("tr_BillingService");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Branch", b =>
                {
                    b.Property<int>("BranchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BranchID"));

                    b.Property<string>("Address1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Address3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.HasKey("BranchID");

                    b.HasIndex("CurrencyID_FK");

                    b.ToTable("Branch", t =>
                        {
                            t.HasTrigger("tr_Branch");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.C4WDeviceToken", b =>
                {
                    b.Property<int>("C4WDeviceTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("C4WDeviceTokenId"));

                    b.Property<string>("ClientEnvironment")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Device")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NewDeviceToken")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("OldDeviceToken")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("C4WDeviceTokenId");

                    b.ToTable("C4WDeviceToken", t =>
                        {
                            t.HasTrigger("tr_C4WDeviceToken");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.C4WImage", b =>
                {
                    b.Property<int>("C4WImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("C4WImageId"));

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DepthImageData")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("DepthImageName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TissueImageData")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("TissueImageName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("WoundBedImageData")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("WoundBedImageName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("WoundImageData")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("WoundImageName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.HasKey("C4WImageId");

                    b.ToTable("C4WImage");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CPGoals", b =>
                {
                    b.Property<int>("CPGoalsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CPGoalsID"));

                    b.Property<string>("CPGoalsInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CPGoalsID");

                    b.HasIndex("DiseaseID_FK");

                    b.ToTable("CPGoals", t =>
                        {
                            t.HasTrigger("tr_CPGoals");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlan", b =>
                {
                    b.Property<int>("CarePlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarePlanID"));

                    b.Property<int?>("CarePlanDetailID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CarePlanName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CarePlanStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CarePlanType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiagnosisID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonInCharge")
                        .HasColumnType("integer");

                    b.Property<string>("Remark")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("CarePlanID");

                    b.HasIndex("CarePlanStatusID_FK");

                    b.HasIndex("DiagnosisID_FK");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("CarePlan", t =>
                        {
                            t.HasTrigger("tr_CarePlan");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanDetail", b =>
                {
                    b.Property<int>("CarePlanDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarePlanDetailID"));

                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("SystemID_FK")
                        .HasColumnType("integer");

                    b.HasKey("CarePlanDetailID")
                        .HasName("PK_CarePlanDetail_");

                    b.HasIndex("CarePlanSubID_FK");

                    b.HasIndex("DiseaseID_FK");

                    b.HasIndex("SystemID_FK");

                    b.ToTable("CarePlanDetail", t =>
                        {
                            t.HasTrigger("tr_CarePlanDetail");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanStatus", b =>
                {
                    b.Property<int>("CarePlanStatusID")
                        .HasColumnType("integer");

                    b.Property<string>("CarePlanStatus1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("CarePlanStatus");

                    b.Property<string>("CareReviewFrequency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CarePlanStatusID");

                    b.ToTable("CarePlanStatus", t =>
                        {
                            t.HasTrigger("tr_CarePlanStatus");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSub", b =>
                {
                    b.Property<int>("CarePlanSubID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarePlanSubID"));

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CarePlanGroupName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CarePlanID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Goal")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("GoalStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("GroupCode")
                        .HasColumnType("integer");

                    b.Property<string>("InterventionStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("PersonInCharge")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SubCarePlanName")
                        .HasColumnType("integer");

                    b.HasKey("CarePlanSubID")
                        .HasName("PK_CarePlanDetail");

                    b.HasIndex("CarePlanID_FK");

                    b.ToTable("CarePlanSub", t =>
                        {
                            t.HasTrigger("tr_CarePlanSub");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubActivity", b =>
                {
                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ActivityID_FK")
                        .HasColumnType("integer");

                    b.HasKey("CarePlanSubID_FK", "ActivityID_FK");

                    b.HasIndex("ActivityID_FK");

                    b.ToTable("CarePlanSubActivity", t =>
                        {
                            t.HasTrigger("tr_CarePlanSubActivity");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubCPGoals", b =>
                {
                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CPGoalsID_FK")
                        .HasColumnType("integer");

                    b.HasKey("CarePlanSubID_FK", "CPGoalsID_FK");

                    b.HasIndex("CPGoalsID_FK");

                    b.ToTable("CarePlanSubCPGoals", t =>
                        {
                            t.HasTrigger("tr_CarePlanSubCPGoals");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubGoal", b =>
                {
                    b.Property<int>("CarePlanSubGoalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarePlanSubGoalID"));

                    b.Property<string>("CarePlanSubGoalName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OperatorID")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score1")
                        .HasColumnType("numeric(3, 0)");

                    b.Property<decimal?>("Score2")
                        .HasColumnType("numeric(3, 0)");

                    b.Property<int?>("ScoreTypeID")
                        .HasColumnType("integer");

                    b.HasKey("CarePlanSubGoalID");

                    b.HasIndex("CarePlanSubID_FK");

                    b.HasIndex("DiseaseID_FK");

                    b.ToTable("CarePlanSubGoal", t =>
                        {
                            t.HasTrigger("tr_CarePlanSubGoal");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubIntervention", b =>
                {
                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("InterventionID_FK")
                        .HasColumnType("integer");

                    b.HasKey("CarePlanSubID_FK", "InterventionID_FK");

                    b.HasIndex("InterventionID_FK");

                    b.ToTable("CarePlanSubIntervention", t =>
                        {
                            t.HasTrigger("tr_CarePlanSubIntervention");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubProblemList", b =>
                {
                    b.Property<int>("CarePlanSubProblemListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarePlanSubProblemListID"));

                    b.Property<int>("CarePlanSubID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Goal")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("PLReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PLStatus")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("PersonInChargeID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemListID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeOfGoal")
                        .HasColumnType("integer");

                    b.HasKey("CarePlanSubProblemListID");

                    b.HasIndex("CarePlanSubID_FK");

                    b.HasIndex("ProblemListID_FK");

                    b.ToTable("CarePlanSubProblemList", t =>
                        {
                            t.HasTrigger("tr_CarePlanSubProblemList");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubProblemListGoal", b =>
                {
                    b.Property<int>("CarePlanSubProblemListGoalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CarePlanSubProblemListGoalID"));

                    b.Property<int?>("Action")
                        .HasColumnType("integer");

                    b.Property<int>("CarePlanSubProblemListID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Goal")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("OperatorID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProblemListGoalID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Score1")
                        .HasColumnType("numeric(3, 0)");

                    b.Property<decimal?>("Score2")
                        .HasColumnType("numeric(3, 0)");

                    b.Property<int?>("ScoreTypeID")
                        .HasColumnType("integer");

                    b.HasKey("CarePlanSubProblemListGoalID");

                    b.HasIndex("CarePlanSubProblemListID_FK");

                    b.HasIndex("OperatorID");

                    b.HasIndex("ProblemListGoalID_FK");

                    b.HasIndex("ScoreTypeID");

                    b.ToTable("CarePlanSubProblemListGoal", t =>
                        {
                            t.HasTrigger("tr_CarePlanSubProblemListGoal");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReport", b =>
                {
                    b.Property<int>("CareReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CareReportID"));

                    b.Property<bool?>("ACP")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ACP_DoneDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ACP_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AggravatingFactor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AirwayBreathingID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AirwayBreathingRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("BladderCareID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("BladderCareNPU")
                        .HasColumnType("integer");

                    b.Property<string>("BladderCareRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("BladderCareTimes")
                        .HasColumnType("integer");

                    b.Property<int?>("BowelCareID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("BowelInterventions")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BowelRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("BowelSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("BowelType")
                        .HasColumnType("integer");

                    b.Property<string>("BreathSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CapillaryRefillID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CarePlanID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CareReportRehabilitationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CareReportSystemInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CareReportType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("CharacteristicOfUrine")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("CirculationID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CirculationRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ColorOthers")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Consistency")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("CoughAmount")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("CoughID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DayNightReversal")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("DiapersID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Dysuria")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("Environment")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EnvironmentRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Eyes")
                        .HasColumnType("integer");

                    b.Property<string>("Frequency")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("HeartSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("HowManyDaysBNO")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LeftEyeReaction")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("LeftEyeSize")
                        .HasColumnType("integer");

                    b.Property<int?>("LipsID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("LowerEyelidsID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Memo1")
                        .HasColumnType("text");

                    b.Property<string>("Memo2")
                        .HasColumnType("text");

                    b.Property<string>("Memo3")
                        .HasColumnType("text");

                    b.Property<string>("Memo4")
                        .HasColumnType("text");

                    b.Property<string>("Memo5")
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MotorResponse")
                        .HasColumnType("integer");

                    b.Property<string>("Nebuliser")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("NeuroOrMental")
                        .HasColumnType("integer");

                    b.Property<string>("NeuroRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("NoOfBowelTimes")
                        .HasColumnType("integer");

                    b.Property<int?>("O2AidID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("O2Litres")
                        .HasColumnType("decimal(4, 1)");

                    b.Property<decimal?>("O2LitresPercent")
                        .HasColumnType("decimal(3, 0)");

                    b.Property<string>("OtherTreatment")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("OtherTreatmentOther")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherTreatmentRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Pain")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("PainDescriptionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PainLevel")
                        .HasColumnType("integer");

                    b.Property<string>("PainRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PainScaleType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientNutritionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PeripheralPulsesPedalID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PeripheralPulsesRadialID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("PersonalHygiene")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("PersonalHygieneRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PsychoEmotionalSpiritual")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PsychoRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RelievingFactor")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RightEyeReaction")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("RightEyeSize")
                        .HasColumnType("integer");

                    b.Property<string>("SectionRequireInput")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SectionRequired")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SectionStatus")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("SiteOfPain")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SkinAndWoundCare")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("SleepRestID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("SleepRestRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Stoma")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("StomaAmountOfOutput")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StomaAppearance")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StomaColour")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("StomaCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StomaEffluent")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StomaOstomyProductUsed")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StomaPeristomalSkin")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StomaProtrusion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("StomaReviewDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("StomaSizeBreath")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal?>("StomaSizeLength")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Sunction")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int?>("TemperatureID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("TemperatureInterventions")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TemperatureRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TypeOfPain")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("TypeOfUrine")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("VerbalResponse")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("VisitEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VisitStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("VisitedBy_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("VitalSignID_FK")
                        .HasColumnType("integer");

                    b.HasKey("CareReportID");

                    b.HasIndex("AirwayBreathingID_FK");

                    b.HasIndex("BladderCareID_FK");

                    b.HasIndex("BowelCareID_FK");

                    b.HasIndex("CapillaryRefillID_FK");

                    b.HasIndex("CarePlanID_FK");

                    b.HasIndex("CareReportID_FK");

                    b.HasIndex("CareReportRehabilitationID_FK");

                    b.HasIndex("CareReportSystemInfoID_FK");

                    b.HasIndex("CirculationID_FK");

                    b.HasIndex("CoughID_FK");

                    b.HasIndex("DiapersID_FK");

                    b.HasIndex("LipsID_FK");

                    b.HasIndex("LowerEyelidsID_FK");

                    b.HasIndex("O2AidID_FK");

                    b.HasIndex("PainDescriptionID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("PatientNutritionID_FK");

                    b.HasIndex("PeripheralPulsesPedalID_FK");

                    b.HasIndex("PeripheralPulsesRadialID_FK");

                    b.HasIndex("SleepRestID_FK");

                    b.HasIndex("TemperatureID_FK");

                    b.HasIndex("VisitedBy_FK");

                    b.HasIndex("VitalSignID_FK");

                    b.ToTable("CareReport", t =>
                        {
                            t.HasTrigger("tr_CareReport");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReportConfig", b =>
                {
                    b.Property<int>("CareReportConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CareReportConfigID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SectionAccess")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("UserTypeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("CareReportConfigID");

                    b.HasIndex("UserTypeID_FK");

                    b.ToTable("CareReportConfig", t =>
                        {
                            t.HasTrigger("tr_CareReportConfig");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReportRehabilitation", b =>
                {
                    b.Property<int>("CareReportRehabilitationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CareReportRehabilitationID"));

                    b.Property<string>("ADLAssistanceType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Bounded")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DVTType")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool?>("IsADLAssistance")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDVTPrevention")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLowerLimbStrengthLeft")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsLowerLimbStrengthRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpperLimbStrengthLeft")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpperLimbStrengthRight")
                        .HasColumnType("boolean");

                    b.Property<int?>("LowerLimbStrengthLeft")
                        .HasColumnType("integer");

                    b.Property<int?>("LowerLimbStrengthRight")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NoOfSatOutOfBed")
                        .HasColumnType("integer");

                    b.Property<int?>("NoOfTimesTurned")
                        .HasColumnType("integer");

                    b.Property<string>("RehabilitationRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("RequireOccupationTherapist")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RequirePhysioTherapist")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RequireSpeechTherapist")
                        .HasColumnType("boolean");

                    b.Property<bool?>("RequireWalkingAid")
                        .HasColumnType("boolean");

                    b.Property<int?>("UpperLimbStrengthLeft")
                        .HasColumnType("integer");

                    b.Property<int?>("UpperLimbStrengthRight")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitForOccupationTherapist")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitForPhysioTherapist")
                        .HasColumnType("integer");

                    b.Property<int?>("VisitForSpeechTherapist")
                        .HasColumnType("integer");

                    b.Property<string>("WalkingAidType")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("CareReportRehabilitationID");

                    b.ToTable("CareReportRehabilitation", t =>
                        {
                            t.HasTrigger("tr_CareReportRehabilitation");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReportSocialSupport", b =>
                {
                    b.Property<int>("CareReportSocialSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CareReportSocialSupportID"));

                    b.Property<int>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientSocialSupportID_FK")
                        .HasColumnType("integer");

                    b.HasKey("CareReportSocialSupportID");

                    b.HasIndex("CareReportID_FK");

                    b.HasIndex("PatientSocialSupportID_FK");

                    b.ToTable("CareReportSocialSupport", t =>
                        {
                            t.HasTrigger("tr_CareReportSocialSupport");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReportSystemInfo", b =>
                {
                    b.Property<int>("CareReportSystemInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CareReportSystemInfoID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdateFamily")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpdateKeyPerson1")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpdateKeyPerson2")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpdatePrimaryDoctor")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsUpdateSecondaryDoctor")
                        .HasColumnType("boolean");

                    b.Property<int?>("KeyPerson1UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("KeyPerson2UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PrimaryDoctorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PrimaryDoctorUserID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("SecondaryDoctorName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("SecondaryDoctorUserID_FK")
                        .HasColumnType("integer");

                    b.HasKey("CareReportSystemInfoID");

                    b.HasIndex("KeyPerson1UserID_FK");

                    b.HasIndex("KeyPerson2UserID_FK");

                    b.HasIndex("PrimaryDoctorUserID_FK");

                    b.HasIndex("SecondaryDoctorUserID_FK");

                    b.ToTable("CareReportSystemInfo", t =>
                        {
                            t.HasTrigger("tr_CareReportSystemInfo");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Chat", b =>
                {
                    b.Property<int>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChatID"));

                    b.Property<string>("Attachment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Attachment_Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Family")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ParentID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.HasKey("ChatID");

                    b.HasIndex("CreatedBy_FK");

                    b.HasIndex("ParentID_FK");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("Chat", t =>
                        {
                            t.HasTrigger("tr_Chat");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Code", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodeId"));

                    b.Property<bool?>("AllergyReaction_Drug")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AllergyReaction_Others")
                        .HasColumnType("boolean");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CodeTypeId_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Critical")
                        .HasColumnType("boolean");

                    b.Property<string>("CurrencyCodeA")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CurrencyCodeN")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("CurrencyInvoiceFooter")
                        .HasColumnType("text");

                    b.Property<bool?>("Indication_Acute")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Indication_PRN")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("MedicationGroupID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ordering")
                        .HasColumnType("integer");

                    b.Property<string>("Referral_Code")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.HasKey("CodeId");

                    b.HasIndex("CodeTypeId_FK");

                    b.HasIndex("MedicationGroupID_FK");

                    b.ToTable("Code", t =>
                        {
                            t.HasTrigger("tr_Code");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.CodeType", b =>
                {
                    b.Property<int>("CodeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CodeTypeId"));

                    b.Property<string>("CodeTypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CodeTypeId");

                    b.ToTable("CodeType", t =>
                        {
                            t.HasTrigger("tr_CodeType");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiagnosisID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Diagnosis1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Diagnosis");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DiagnosisID");

                    b.ToTable("Diagnosis", t =>
                        {
                            t.HasTrigger("tr_Diagnosis");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.DischargeSummaryReport", b =>
                {
                    b.Property<int>("DischargeSummaryReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DischargeSummaryReportId"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SummaryCaseNote")
                        .HasColumnType("text");

                    b.Property<DateTime?>("VisitDateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VisitDateStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("VisitedBy_FK")
                        .HasColumnType("integer");

                    b.HasKey("DischargeSummaryReportId");

                    b.ToTable("DischargeSummaryReport", t =>
                        {
                            t.HasTrigger("tr_DischargeSummaryReport");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.DischargeSummaryReportAttachment", b =>
                {
                    b.Property<int>("DischargeSummaryReportAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DischargeSummaryReportAttachmentID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DischargeSummaryReportID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DischargeSummaryReportAttachmentID");

                    b.HasIndex("DischargeSummaryReportID_FK");

                    b.ToTable("DischargeSummaryReportAttachment", t =>
                        {
                            t.HasTrigger("tr_DischargeSummaryReportAttachment");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Disease", b =>
                {
                    b.Property<int>("DiseaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiseaseID"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DiseaseCode")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAdditionalInfo")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSuggestPalliativeCare")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SystemID_FK")
                        .HasColumnType("integer");

                    b.HasKey("DiseaseID");

                    b.HasIndex("SystemID_FK");

                    b.ToTable("Disease", t =>
                        {
                            t.HasTrigger("tr_Disease");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.DiseaseInfo", b =>
                {
                    b.Property<int>("DiseaseInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiseaseInfoID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("DiseaseInfo1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DiseaseInfo");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DiseaseInfoID");

                    b.HasIndex("DiseaseID_FK");

                    b.ToTable("DiseaseInfo", t =>
                        {
                            t.HasTrigger("tr_DiseaseInfo");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.DiseaseSubInfo", b =>
                {
                    b.Property<int>("DiseaseSubInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiseaseSubInfoID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("DiseaseSubInfo1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DiseaseSubInfo");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DiseaseSubInfoID");

                    b.HasIndex("DiseaseID_FK");

                    b.ToTable("DiseaseSubInfo", t =>
                        {
                            t.HasTrigger("tr_DiseaseSubInfo");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.DiseaseVitalSignType", b =>
                {
                    b.Property<int>("DiseaseVitalSignTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DiseaseVitalSignTypeID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VitalSignTypeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("DiseaseVitalSignTypeID");

                    b.HasIndex("DiseaseID_FK");

                    b.HasIndex("VitalSignTypeID_FK");

                    b.ToTable("DiseaseVitalSignType", t =>
                        {
                            t.HasTrigger("tr_DiseaseVitalSignType");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EBASDEPQuestion", b =>
                {
                    b.Property<int>("EBASDEPQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EBASDEPQuestionId"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Ordering")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("EBASDEPQuestionId");

                    b.ToTable("EBASDEPQuestion", t =>
                        {
                            t.HasTrigger("tr_EBASDEPQuestion");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EmailLog", b =>
                {
                    b.Property<int>("EmailLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmailLogId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("attachmentName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("isHtml")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isSent")
                        .HasColumnType("boolean");

                    b.Property<string>("msgBCC")
                        .HasColumnType("text");

                    b.Property<string>("msgBody")
                        .HasColumnType("text");

                    b.Property<string>("msgCC")
                        .HasColumnType("text");

                    b.Property<string>("msgFrom")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("msgFromName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("msgSubj")
                        .HasColumnType("text");

                    b.Property<string>("msgTo")
                        .HasColumnType("text");

                    b.Property<string>("smtpLogin")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("smtpPassword")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("smtpPort")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("smtpServerAddress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("EmailLogId");

                    b.ToTable("EmailLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Enquiry", b =>
                {
                    b.Property<int>("EnquiryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnquiryID"));

                    b.Property<int?>("CareManagerAssignedID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CaregiverAtHomeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CaseNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ContactNumberOfCaller")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailOfCaller")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("EnquirySourceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("GenderID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MedicalHistory")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NameOfCaller")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OrderID")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("OtherPreferredLanguage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OtherRace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PatientAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PatientAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PatientAddress3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTime?>("PreferredAppointmentDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("PreferredLanguageID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("RaceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ServicesRequiredID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserOrganizationID_FK")
                        .HasColumnType("integer");

                    b.HasKey("EnquiryID");

                    b.HasIndex("CareManagerAssignedID_FK");

                    b.HasIndex("CaregiverAtHomeID_FK");

                    b.HasIndex("EnquirySourceID_FK");

                    b.HasIndex("GenderID_FK");

                    b.HasIndex("PreferredLanguageID_FK");

                    b.HasIndex("RaceID_FK");

                    b.HasIndex("ServicesRequiredID_FK");

                    b.HasIndex("UserOrganizationID_FK");

                    b.ToTable("Enquiry", t =>
                        {
                            t.HasTrigger("tr_Enquiry");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryAttachment", b =>
                {
                    b.Property<int>("EnquiryAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnquiryAttachmentID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EnquiryID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("EnquiryAttachmentID");

                    b.HasIndex("EnquiryID_FK");

                    b.ToTable("EnquiryAttachment", t =>
                        {
                            t.HasTrigger("tr_EnquiryAttachment");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryConfig", b =>
                {
                    b.Property<int>("EnquiryConfigID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EnquiryConfigID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailContent")
                        .HasColumnType("text");

                    b.Property<string>("EmailtoCMContent")
                        .HasColumnType("text");

                    b.Property<int?>("EscalatingPersonID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("EscalationEmail")
                        .HasColumnType("text");

                    b.Property<decimal?>("EscalationPeriod")
                        .HasColumnType("decimal(2, 0)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SCMID_FK")
                        .HasColumnType("integer");

                    b.HasKey("EnquiryConfigID");

                    b.HasIndex("EscalatingPersonID_FK");

                    b.HasIndex("SCMID_FK");

                    b.ToTable("EnquiryConfig", t =>
                        {
                            t.HasTrigger("tr_EnquiryConfig");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryEscPerson", b =>
                {
                    b.Property<int>("EnquiryConfigID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.HasKey("EnquiryConfigID", "UserID_FK");

                    b.HasIndex("UserID_FK");

                    b.ToTable("EnquiryEscPerson", t =>
                        {
                            t.HasTrigger("tr_EnquiryEscPerson");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryLanguage", b =>
                {
                    b.Property<int>("EnquiryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("EnquiryID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("EnquiryLanguage", t =>
                        {
                            t.HasTrigger("tr_EnquiryLanguage");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquirySCM", b =>
                {
                    b.Property<int>("EnquiryConfigID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.HasKey("EnquiryConfigID_FK", "UserID_FK");

                    b.HasIndex("UserID_FK");

                    b.ToTable("EnquirySCM", t =>
                        {
                            t.HasTrigger("tr_EnquirySCM");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryServicesRequired", b =>
                {
                    b.Property<int>("EnquiryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("EnquiryID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("EnquiryServicesRequired", t =>
                        {
                            t.HasTrigger("tr_EnquiryServicesRequired");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ErrorLogId"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("EventTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PeriodTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserCategory_FK")
                        .HasColumnType("integer");

                    b.HasKey("EventID");

                    b.HasIndex("CreatedBy_FK");

                    b.HasIndex("EventTypeID_FK");

                    b.HasIndex("PeriodTypeID_FK");

                    b.HasIndex("UserCategory_FK");

                    b.ToTable("Event", t =>
                        {
                            t.HasTrigger("tr_Event");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EventUser", b =>
                {
                    b.Property<int>("EventUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventUserID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EventID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("EventUserID");

                    b.HasIndex("EventID_FK");

                    b.HasIndex("UserID_FK");

                    b.ToTable("EventUser", t =>
                        {
                            t.HasTrigger("tr_EventUser");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.EventUserLog", b =>
                {
                    b.Property<int>("EventUserLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventUserLogID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EventID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.HasKey("EventUserLogID");

                    b.HasIndex("EventID_FK");

                    b.HasIndex("UserID_FK");

                    b.ToTable("EventUserLog", t =>
                        {
                            t.HasTrigger("tr_EventUserLog");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ExternalDoctor", b =>
                {
                    b.Property<int>("ExternalDoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExternalDoctorID"));

                    b.Property<int?>("AccessHospitalID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ClinicianTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ExternalDoctorID");

                    b.HasIndex("ClinicianTypeID_FK");

                    b.ToTable("ExternalDoctor", t =>
                        {
                            t.HasTrigger("tr_ExternalDoctor");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Facility", b =>
                {
                    b.Property<int>("FacilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FacilityID"));

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IntegrationSource")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OrganizationID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("_id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FacilityID");

                    b.HasIndex("OrganizationID_FK");

                    b.ToTable("Facility");
                });

            modelBuilder.Entity("C4WX1.Database.Models.GeoFencing", b =>
                {
                    b.Property<int>("GeoFencingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GeoFencingId"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IP")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWhitelisted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("GeoFencingId");

                    b.ToTable("GeoFencing", t =>
                        {
                            t.HasTrigger("tr_GeoFencing");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("GroupId")
                        .HasName("PK_GroupUser");

                    b.ToTable("Group", t =>
                        {
                            t.HasTrigger("tr_Group");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.GroupRole", b =>
                {
                    b.Property<int>("GroupId_FK")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("");

                    b.HasKey("GroupId_FK", "RoleId_FK");

                    b.HasIndex("RoleId_FK");

                    b.ToTable("GroupRole", t =>
                        {
                            t.HasTrigger("tr_GroupRole");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ICAWoundCare", b =>
                {
                    b.Property<int>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("InitialCareAssessmentID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("ICAWoundCare", t =>
                        {
                            t.HasTrigger("tr_ICAWoundCare");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.InitialCareAssessment", b =>
                {
                    b.Property<int>("InitialCareAssessmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InitialCareAssessmentID"));

                    b.Property<bool?>("AbdomenSymmetry")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AblePassUrine")
                        .HasColumnType("boolean");

                    b.Property<string>("AddressIssue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("AnxietyLevel")
                        .HasColumnType("integer");

                    b.Property<bool?>("AnySkinIssue")
                        .HasColumnType("boolean");

                    b.Property<int?>("ApicalPulse")
                        .HasColumnType("integer");

                    b.Property<string>("AssistiveAids")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BeliefInfluenced")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("BestWellbeing")
                        .HasColumnType("integer");

                    b.Property<string>("BowelHabitsDays")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("BowelHabitsTimes")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("BowelSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("BowelType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BreathSounds")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Breathing")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CAAlertness")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CACommunication")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("CADementia")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CAPerson")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CAPlace")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CASituation")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CAdateAndTime")
                        .HasColumnType("boolean");

                    b.Property<string>("Catheter")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime?>("CatheterDateInserted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CatheterNextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CatheterSize")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CatheterType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("ChestSymmetry")
                        .HasColumnType("boolean");

                    b.Property<string>("Concern")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ConsciousLevel")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Cough")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Depressed")
                        .HasColumnType("boolean");

                    b.Property<int?>("DepressionLevel")
                        .HasColumnType("integer");

                    b.Property<bool?>("DifficultyCoping")
                        .HasColumnType("boolean");

                    b.Property<string>("DifficultyCopingYes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("DrowsinessLevel")
                        .HasColumnType("integer");

                    b.Property<string>("EmotionalState")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EmotionalYes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("EmotionalYesNo")
                        .HasColumnType("boolean");

                    b.Property<string>("Faith")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GeneralCondition")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("GetSupport")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GiveMeaningToLife")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Hearing")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("HearingAid")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HearingImpairedLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("HearingImpairedRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("HearingImpairedRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HearingImpairedWithHearingAidLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("HearingImpairedWithHearingAidRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("HearingImpairedWithHearingAidRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityAffectCareManager")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityAffectCaregiver")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityCommunication")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityCooking")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityRefrigeration")
                        .HasColumnType("boolean");

                    b.Property<string>("HomeFacilityRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("HomeFacilityStairs")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityToileting")
                        .HasColumnType("boolean");

                    b.Property<bool?>("HomeFacilityVentilation")
                        .HasColumnType("boolean");

                    b.Property<string>("HowCanIHelp")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("HowDoYouScope")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("Incontinence")
                        .HasColumnType("boolean");

                    b.Property<string>("IncontinenceType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("InfluenceTakeCare")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsBeliefImportant")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPartOfCommunity")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReligious")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRequirePalliativeCare")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTracheostomyInnerCannula")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LMP")
                        .HasColumnType("datetime");

                    b.Property<int?>("LackOfAppetiteLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftLowerLimbStrength")
                        .HasColumnType("integer");

                    b.Property<int?>("LeftUpperLimbStrength")
                        .HasColumnType("integer");

                    b.Property<bool?>("LostInterest")
                        .HasColumnType("boolean");

                    b.Property<string>("LostInterestYes")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MakeSense")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MedicalHistory")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MilkFeedRx")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MobilityStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NauseaLevel")
                        .HasColumnType("integer");

                    b.Property<bool?>("NutritionalImbalance")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("O2Litres")
                        .HasColumnType("decimal(3, 1)");

                    b.Property<string>("O2LitresVia")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int?>("OralCavityAssessmentScore1")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore2")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore3")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore4")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore5")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore6")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore7")
                        .HasColumnType("integer");

                    b.Property<int?>("OralCavityAssessmentScore8")
                        .HasColumnType("integer");

                    b.Property<string>("Oralhealth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OtherBreathing")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherEmotionalState")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("OxygenLMin")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("OxygenRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("OxygenRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("OxygenType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PainLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Palpation")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PatientAdditionalInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientMBIID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientMFSID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientMedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientNutritionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientProfileID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientRAFID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientReferralID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Percussion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PersonalConcern")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Physique")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("PressureInjuries")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReferCounsellor")
                        .HasColumnType("boolean");

                    b.Property<string>("Remark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("RightLowerLimbStrength")
                        .HasColumnType("integer");

                    b.Property<int?>("RightUpperLimbStrength")
                        .HasColumnType("integer");

                    b.Property<string>("RoleOfBeliefForCommunity")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RoleOfBeliefForInfluence")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("SectionStatus")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("ShortnessOfBreath")
                        .HasColumnType("integer");

                    b.Property<string>("SkinIssue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SkinTurgor")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SkinType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("Sputum")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Stoma")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("StomaAmountOfOutput")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StomaAppearance")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StomaColour")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("StomaCreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StomaEffluent")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StomaOstomyProductUsed")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("StomaPeristomalSkin")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("StomaProtrusion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("StomaReviewDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("StomaSizeBreath")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<decimal?>("StomaSizeLength")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<string>("StoolsType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("SuctioningRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("SupportTo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TalkToSomeone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Teeth")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TenderNGuarding")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("TirednessLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TracheostomyDateInserted")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TracheostomyNextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TracheostomySize")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("TracheostomyType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UrinaryFrequencyDay")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("UrinaryFrequencyTimes")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("UrinaryTypes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UrineColour")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UrineConsistency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("UseOfDrug")
                        .HasColumnType("boolean");

                    b.Property<string>("UseOfDrugExplain")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("VSIntermittent")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VSLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("VSOnSetDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VSPainFrequency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VSPainFrequencyIntermittentNumber")
                        .HasColumnType("integer");

                    b.Property<string>("VSPrecipitatingFactors")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("VSQuality")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("VSRelievingFactors")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Vision")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("VisionImpairedCataract")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionImpairedCataractLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("VisionImpairedCataractRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("VisionImpairedCataractRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionImpairedGlaucoma")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionImpairedGlaucomaLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("VisionImpairedGlaucomaRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("VisionImpairedGlaucomaRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionImpairedLeft")
                        .HasColumnType("boolean");

                    b.Property<string>("VisionImpairedRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool?>("VisionImpairedRight")
                        .HasColumnType("boolean");

                    b.Property<bool?>("VisionSpectacles")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("VisitDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("VitalSignID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore1")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore2")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore3")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore4")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore5")
                        .HasColumnType("integer");

                    b.Property<int?>("WoundAssessmentScore6")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("painOnSetDate")
                        .HasColumnType("datetime");

                    b.HasKey("InitialCareAssessmentID");

                    b.HasIndex("PatientAdditionalInfoID_FK");

                    b.HasIndex("PatientMBIID_FK");

                    b.HasIndex("PatientMFSID_FK");

                    b.HasIndex("PatientMedicationID_FK");

                    b.HasIndex("PatientNutritionID_FK");

                    b.HasIndex("PatientProfileID_FK");

                    b.HasIndex("PatientRAFID_FK");

                    b.HasIndex("PatientReferralID_FK");

                    b.HasIndex("VitalSignID_FK");

                    b.ToTable("InitialCareAssessment", t =>
                        {
                            t.HasTrigger("tr_InitialCareAssessment");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.InitialCareAssessmentAttachment", b =>
                {
                    b.Property<int>("InitialCareAssessmentAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InitialCareAssessmentAttachmentID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDischargeAssessment")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReferralAssessment")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("InitialCareAssessmentAttachmentID");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.ToTable("InitialCareAssessmentAttachment", t =>
                        {
                            t.HasTrigger("tr_InitialCareAssessmentAttachment");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.InitialCareAssessmentSpecialInstruction", b =>
                {
                    b.Property<int>("InitialCareAssessmentSpecialInstructionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InitialCareAssessmentSpecialInstructionID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Instructions")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("InitialCareAssessmentSpecialInstructionID");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.ToTable("InitialCareAssessmentSpecialInstruction", t =>
                        {
                            t.HasTrigger("tr_InitialCareAssessmentSpecialInstruction");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.InitialCareAssessmentVitalSign", b =>
                {
                    b.Property<int>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("VitalSignID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TimeOfRecord")
                        .HasColumnType("datetime");

                    b.HasKey("InitialCareAssessmentID_FK", "VitalSignID_FK");

                    b.ToTable("InitialCareAssessmentVitalSign", t =>
                        {
                            t.HasTrigger("tr_InitialCareAssessmentVitalSign");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.IntegrationApiRequestLog", b =>
                {
                    b.Property<int>("IntegrationApiRequestLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IntegrationApiRequestLogID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CreatedByID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("FacilityId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IntegrationSource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ResidentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("IntegrationApiRequestLogID")
                        .HasName("PK__Integrat__5749CA7CC431EC3C");

                    b.ToTable("IntegrationApiRequestLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Intervention", b =>
                {
                    b.Property<int>("InterventionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InterventionID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("InterventionInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("InterventionID");

                    b.HasIndex("DiseaseID_FK");

                    b.ToTable("Intervention", t =>
                        {
                            t.HasTrigger("tr_Intervention");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemID"));

                    b.Property<bool?>("AvailableInBilling")
                        .HasColumnType("boolean");

                    b.Property<int>("CategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("ItemUnitID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ItemID");

                    b.HasIndex("CategoryID_FK");

                    b.HasIndex("ItemUnitID_FK");

                    b.ToTable("Item", t =>
                        {
                            t.HasTrigger("tr_Item");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ItemStock", b =>
                {
                    b.Property<int>("ItemStockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemStockID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("ItemStockID");

                    b.HasIndex("ItemID_FK");

                    b.ToTable("ItemStock", t =>
                        {
                            t.HasTrigger("tr_ItemStock");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("FullName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.HasKey("LanguageId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("C4WX1.Database.Models.LoginDevice", b =>
                {
                    b.Property<int>("LoginDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LoginDeviceId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceID")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<int>("UserId_FK")
                        .HasColumnType("integer");

                    b.HasKey("LoginDeviceId");

                    b.ToTable("LoginDevice", t =>
                        {
                            t.HasTrigger("tr_LoginDevice");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.MailSettings", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("displayMsgBCC")
                        .HasColumnType("boolean");

                    b.Property<bool?>("displayMsgCC")
                        .HasColumnType("boolean");

                    b.Property<bool?>("displayMsgTo")
                        .HasColumnType("boolean");

                    b.Property<string>("msgBCC")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("msgBody")
                        .HasColumnType("text");

                    b.Property<string>("msgCC")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("msgSubj")
                        .HasColumnType("text");

                    b.Property<string>("msgTo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("id");

                    b.ToTable("MailSettings", t =>
                        {
                            t.HasTrigger("tr_MailSettings");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.MailSettingsMsgToUserType", b =>
                {
                    b.Property<int>("MailSetting_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserTypeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("MailSetting_FK", "UserTypeID_FK");

                    b.HasIndex("UserTypeID_FK");

                    b.ToTable("MailSettingsMsgToUserType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.MedicationVitalSignType", b =>
                {
                    b.Property<int>("MedicationVitalSignTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MedicationVitalSignTypeID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VitalSignTypeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("MedicationVitalSignTypeID");

                    b.HasIndex("MedicationID_FK");

                    b.HasIndex("VitalSignTypeID_FK");

                    b.ToTable("MedicationVitalSignType", t =>
                        {
                            t.HasTrigger("tr_MedicationVitalSignType");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.MobileAppVersioning", b =>
                {
                    b.Property<int>("MobileVersionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MobileVersionId"));

                    b.Property<string>("AppName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("MobileVersionId");

                    b.HasIndex("CreatedBy_FK");

                    b.HasIndex("ModifiedBy_FK");

                    b.ToTable("MobileAppVersioning", t =>
                        {
                            t.HasTrigger("tr_MobileAppVersioning");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.MultiDisciplinaryMeeting", b =>
                {
                    b.Property<int>("MultiDisciplinaryMeetingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MultiDisciplinaryMeetingID"));

                    b.Property<int>("AssignedToFollowUp")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuesOverall")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MultiDisciplinaryMeetingID");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("MultiDisciplinaryMeeting", t =>
                        {
                            t.HasTrigger("tr_MultiDisciplinaryMeeting");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.MultiDisciplinaryMeetingDetail", b =>
                {
                    b.Property<int>("MultiDisciplinaryMeetingDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MultiDisciplinaryMeetingDetailID"));

                    b.Property<int>("ActionPlan")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("IssueCatID")
                        .HasColumnType("integer");

                    b.Property<string>("IssueContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IssueTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MultiDisciplinaryMeetingID_FK")
                        .HasColumnType("integer");

                    b.HasKey("MultiDisciplinaryMeetingDetailID");

                    b.HasIndex("MultiDisciplinaryMeetingID_FK");

                    b.ToTable("MultiDisciplinaryMeetingDetail", t =>
                        {
                            t.HasTrigger("tr_MultiDisciplinaryMeetingDetail");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationChat", b =>
                {
                    b.Property<int>("NotificationChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationChatID"));

                    b.Property<int>("ChatID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationId_FK")
                        .HasColumnType("integer");

                    b.HasKey("NotificationChatID");

                    b.HasIndex("ChatID_FK");

                    b.HasIndex("NotificationId_FK");

                    b.ToTable("NotificationChat", t =>
                        {
                            t.HasTrigger("tr_NotificationChat");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationEvent", b =>
                {
                    b.Property<int>("NotificationEventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationEventID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EventID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationId_FK")
                        .HasColumnType("integer");

                    b.HasKey("NotificationEventID");

                    b.HasIndex("EventID_FK");

                    b.HasIndex("NotificationId_FK");

                    b.ToTable("NotificationEvent", t =>
                        {
                            t.HasTrigger("tr_NotificationEvent");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationMessageTemplates", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<string>("notificationMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("notificationSubject")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("notificationgroupCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK__Notifica__3213E83FC46BAAC6");

                    b.HasIndex(new[] { "notificationgroupCode" }, "idx_NotificationMessageTemplates1");

                    b.ToTable("NotificationMessageTemplates", t =>
                        {
                            t.HasTrigger("tr_NotificationMessageTemplates");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationTask", b =>
                {
                    b.Property<int>("NotificationTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NotificationTaskID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NotificationId_FK")
                        .HasColumnType("integer");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.HasKey("NotificationTaskID");

                    b.HasIndex("NotificationId_FK");

                    b.HasIndex("TaskID_FK");

                    b.ToTable("NotificationTask", t =>
                        {
                            t.HasTrigger("tr_NotificationTask");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationVitalSignDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("VitalSignDetailId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<int>("notificationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK__Notifica__3213E83F3CF99FFF");

                    b.HasIndex("VitalSignDetailId");

                    b.HasIndex(new[] { "notificationId", "VitalSignDetailId" }, "idx_NotificationVitalSignDetails1");

                    b.ToTable("NotificationVitalSignDetails", t =>
                        {
                            t.HasTrigger("tr_NotificationVitalSignDetails");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Notifications", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("FacilityID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isRead")
                        .HasColumnType("boolean");

                    b.Property<string>("notificationTypeCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("PK__Notifica__3213E83F5EF36BEC");

                    b.HasIndex("FacilityID_FK");

                    b.HasIndex("notificationTypeCode");

                    b.HasIndex(new[] { "userId", "isRead" }, "idx_Notifications1");

                    b.HasIndex(new[] { "isRead" }, "idx_Notifications2");

                    b.HasIndex(new[] { "userId" }, "idx_Notifications3");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasTrigger("tr_Notifications");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.NutritionTask", b =>
                {
                    b.Property<int>("NutritionTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NutritionTaskID"));

                    b.Property<int>("ActionTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("AfterImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("AmountReferenceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("BeforeImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ColorReferenceID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Food")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("GivenAmount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Liquid")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TakenAmount")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeReferenceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("NutritionTaskID");

                    b.HasIndex("ActionTypeID_FK");

                    b.HasIndex("AmountReferenceID_FK");

                    b.HasIndex("ColorReferenceID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("TypeReferenceID_FK");

                    b.ToTable("NutritionTask", t =>
                        {
                            t.HasTrigger("tr_NutritionTask");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.NutritionTaskReference", b =>
                {
                    b.Property<int>("ReferenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReferenceID"));

                    b.Property<int>("CodeId_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReferenceImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("ReferenceID");

                    b.HasIndex("CodeId_FK");

                    b.ToTable("NutritionTaskReference", t =>
                        {
                            t.HasTrigger("tr_NutritionTaskReference");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Otp", b =>
                {
                    b.Property<int>("OtpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OtpId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("OtpId");

                    b.ToTable("Otp", t =>
                        {
                            t.HasTrigger("tr_Otp");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PackageID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PackageDetails")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PackageName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("PackageID");

                    b.ToTable("Package", t =>
                        {
                            t.HasTrigger("tr_Package");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientID"));

                    b.Property<bool?>("ACID")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ACP")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AMD")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<int?>("AccessHospitalID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ActionDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("AdmittedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Age")
                        .HasColumnType("integer");

                    b.Property<int?>("BloodTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CareManagerAssignedID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CareReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CaseID")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<int?>("DischargeNoticePeriodInMonths")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DrugAllergy")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("GenderID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("GenogramPicture")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IdentificationAttachmentFilename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IdentificationAttachmentPhysical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("IntegrationSourceID")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("InvoiceModeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForFamilyNotification1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForFamilyNotification2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForVitalAlert1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForVitalAlert2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailForVitalAlert3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MailingAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MailingAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MailingAddress3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("MaritalStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("MedicalHistoryRemarks")
                        .HasColumnType("text");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("NRIC")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("NumberOfChildren")
                        .HasColumnType("integer");

                    b.Property<string>("NursingStation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Occupation")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OrderID")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("OtherLanguage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherRace")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("PACEMAKER")
                        .HasColumnType("boolean");

                    b.Property<int?>("PatientAdditionalInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientMedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientProfileID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientReferralByID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientReferralID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Photo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("RaceID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonOfAdmission")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ReferringDiagnosis")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ReligionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ResidentTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<bool?>("UpfrontPayment")
                        .HasColumnType("boolean");

                    b.Property<string>("VisitingFrequency")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("PatientID");

                    b.HasIndex("BloodTypeID_FK");

                    b.HasIndex("GenderID_FK");

                    b.HasIndex("InvoiceModeID_FK");

                    b.HasIndex("MaritalStatusID_FK");

                    b.HasIndex("PatientAdditionalInfoID_FK");

                    b.HasIndex("PatientMedicationID_FK");

                    b.HasIndex("PatientProfileID_FK");

                    b.HasIndex("PatientReferralByID_FK");

                    b.HasIndex("PatientReferralID_FK");

                    b.HasIndex("PatientTypeID_FK");

                    b.HasIndex("RaceID_FK");

                    b.HasIndex("ReligionID_FK");

                    b.HasIndex("ResidentTypeID_FK");

                    b.ToTable("Patient", t =>
                        {
                            t.HasTrigger("tr_Patient");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAMT", b =>
                {
                    b.Property<int>("PatientAMTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientAMTID"));

                    b.Property<string>("Alertness")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("VitalSignDetailId_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientAMTID");

                    b.HasIndex("CareReportID_FK");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("VitalSignDetailId_FK");

                    b.ToTable("PatientAMT", t =>
                        {
                            t.HasTrigger("tr_PatientAMT");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAMTAnswer", b =>
                {
                    b.Property<int>("PatientAMTID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("AMTQuestionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("Answer")
                        .HasColumnType("integer");

                    b.HasKey("PatientAMTID_FK", "AMTQuestionID_FK");

                    b.HasIndex("AMTQuestionID_FK");

                    b.ToTable("PatientAMTAnswer", t =>
                        {
                            t.HasTrigger("tr_PatientAMTAnswer");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAccessLine", b =>
                {
                    b.Property<int>("PatientAccessLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientAccessLineID"));

                    b.Property<string>("AccessLine")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("AccessLineRemarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateDueForChange")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateOfInsertion")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Patent")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<string>("PatentReSited")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTime?>("PatentReSitedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PatentSite")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("PatientAccessLineID");

                    b.HasIndex("CareReportID_FK");

                    b.ToTable("PatientAccessLine", t =>
                        {
                            t.HasTrigger("tr_PatientAccessLine");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAdditionalInfo", b =>
                {
                    b.Property<int>("PatientAdditionalInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientAdditionalInfoID"));

                    b.Property<bool?>("ACP")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ACP_DoneDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ACP_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("AICD")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AICD_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("AICD_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("AICD_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("CVCLine")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CVCLine_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CVCLine_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CVCLine_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DNR")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DNR_DateInitiated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DNR_DateTerminated")
                        .HasColumnType("datetime");

                    b.Property<string>("DNR_InitiatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DNR_TerminatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IVLine")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("IVLine_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("IVLine_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("IVLine_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PICCLine")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("PICCLine_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PICCLine_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("PICCLine_ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Pacemaker")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Pacemaker_InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Pacemaker_InsertedBy")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("Pacemaker_ReviewDate")
                        .HasColumnType("datetime");

                    b.HasKey("PatientAdditionalInfoID");

                    b.ToTable("PatientAdditionalInfo", t =>
                        {
                            t.HasTrigger("tr_PatientAdditionalInfo");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAttachment", b =>
                {
                    b.Property<int>("PatientAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientAttachmentID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FileTypeID")
                        .HasColumnType("integer");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PatientAttachmentID");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("PatientAttachment", t =>
                        {
                            t.HasTrigger("tr_PatientAttachment");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientBradenScale", b =>
                {
                    b.Property<int>("PatientBradenScaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientBradenScaleID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientBradenScaleID");

                    b.HasIndex("VitalSignDetailID_FK");

                    b.ToTable("PatientBradenScale", t =>
                        {
                            t.HasTrigger("tr_PatientBradenScale");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientClinician", b =>
                {
                    b.Property<int>("PatientClinicianID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientClinicianID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ExternalDoctorID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("UserID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientClinicianID");

                    b.HasIndex("DiseaseID_FK");

                    b.HasIndex("DiseaseSubInfoID_FK");

                    b.HasIndex("ExternalDoctorID_FK");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("UserID_FK");

                    b.ToTable("PatientClinician", t =>
                        {
                            t.HasTrigger("tr_PatientClinician");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientDrugAllergy", b =>
                {
                    b.Property<int>("DrugAllergyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DrugAllergyID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ReactionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferID_FK")
                        .HasColumnType("integer");

                    b.HasKey("DrugAllergyID")
                        .HasName("PK_PatientDrugAllery");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("MedicationID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("ReactionID_FK");

                    b.HasIndex("ReferID_FK");

                    b.ToTable("PatientDrugAllergy", t =>
                        {
                            t.HasTrigger("tr_PatientDrugAllergy");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientEBASDEP", b =>
                {
                    b.Property<int>("PatientEBASDEPID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientEBASDEPID"));

                    b.Property<string>("Alertness")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("VitalSignDetailId_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientEBASDEPID");

                    b.HasIndex("CareReportID_FK");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("VitalSignDetailId_FK");

                    b.ToTable("PatientEBASDEP", t =>
                        {
                            t.HasTrigger("tr_PatientEBASDEP");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientEBASDEPAnswer", b =>
                {
                    b.Property<int>("PatientEBASDEPID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("EBASDEPQuestionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("Answer")
                        .HasColumnType("integer");

                    b.HasKey("PatientEBASDEPID_FK", "EBASDEPQuestionID_FK");

                    b.HasIndex("EBASDEPQuestionID_FK");

                    b.ToTable("PatientEBASDEPAnswer", t =>
                        {
                            t.HasTrigger("tr_PatientEBASDEPAnswer");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientFacility", b =>
                {
                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("FacilityID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientID_FK", "FacilityID_FK");

                    b.HasIndex("FacilityID_FK");

                    b.ToTable("PatientFacility");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientFamilyHistory", b =>
                {
                    b.Property<int>("PatientFamilyHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientFamilyHistoryID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int?>("YearDiagnose")
                        .HasColumnType("integer");

                    b.HasKey("PatientFamilyHistoryID");

                    b.HasIndex("DiseaseID_FK");

                    b.HasIndex("DiseaseSubInfoID_FK");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("PatientFamilyHistory", t =>
                        {
                            t.HasTrigger("tr_PatientFamilyHistory");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientGCS", b =>
                {
                    b.Property<int>("PatientGCSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientGCSID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientGCSID");

                    b.HasIndex("VitalSignDetailID_FK");

                    b.ToTable("PatientGCS", t =>
                        {
                            t.HasTrigger("tr_PatientGCS");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientImmunisation", b =>
                {
                    b.Property<int>("ImmunisationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImmunisationID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("NextDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Place")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.HasKey("ImmunisationID");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("PatientImmunisation", t =>
                        {
                            t.HasTrigger("tr_PatientImmunisation");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientLanguage", b =>
                {
                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("PatientLanguage", t =>
                        {
                            t.HasTrigger("tr_PatientLanguage");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMBI", b =>
                {
                    b.Property<int>("PatientMBIID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientMBIID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score10")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<int?>("Score7")
                        .HasColumnType("integer");

                    b.Property<int?>("Score8")
                        .HasColumnType("integer");

                    b.Property<int?>("Score9")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientMBIID");

                    b.HasIndex("VitalSignDetailID_FK");

                    b.ToTable("PatientMBI", t =>
                        {
                            t.HasTrigger("tr_PatientMBI");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMFS", b =>
                {
                    b.Property<int>("PatientMFSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientMFSID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientMFSID");

                    b.HasIndex("VitalSignDetailID_FK");

                    b.ToTable("PatientMFS", t =>
                        {
                            t.HasTrigger("tr_PatientMFS");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMMSE", b =>
                {
                    b.Property<int>("PatientMMSEID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientMMSEID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score10")
                        .HasColumnType("integer");

                    b.Property<int?>("Score11")
                        .HasColumnType("integer");

                    b.Property<int?>("Score12")
                        .HasColumnType("integer");

                    b.Property<int?>("Score13")
                        .HasColumnType("integer");

                    b.Property<int?>("Score14")
                        .HasColumnType("integer");

                    b.Property<int?>("Score15")
                        .HasColumnType("integer");

                    b.Property<int?>("Score16")
                        .HasColumnType("integer");

                    b.Property<int?>("Score17")
                        .HasColumnType("integer");

                    b.Property<int?>("Score18")
                        .HasColumnType("integer");

                    b.Property<int?>("Score19")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score20")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<int?>("Score7")
                        .HasColumnType("integer");

                    b.Property<int?>("Score8")
                        .HasColumnType("integer");

                    b.Property<int?>("Score9")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientMMSEID");

                    b.HasIndex("VitalSignDetailID_FK");

                    b.ToTable("PatientMMSE", t =>
                        {
                            t.HasTrigger("tr_PatientMMSE");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedicalHistory", b =>
                {
                    b.Property<int>("PatientMedicalHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientMedicalHistoryID"));

                    b.Property<int?>("ClinicianID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MedicalStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientMedicalHistoryID");

                    b.HasIndex("ClinicianID_FK");

                    b.HasIndex("MedicalStatusID_FK");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("PatientMedicalHistory", t =>
                        {
                            t.HasTrigger("tr_PatientMedicalHistory");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedication", b =>
                {
                    b.Property<int>("PatientMedicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientMedicationID"));

                    b.Property<string>("Allergies")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("Compliant")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("SelfAdminister")
                        .HasColumnType("boolean");

                    b.HasKey("PatientMedicationID")
                        .HasName("PK_PatientMedication_1");

                    b.ToTable("PatientMedication", t =>
                        {
                            t.HasTrigger("tr_PatientMedication");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedicationConsume", b =>
                {
                    b.Property<int>("PatientMedicationConsumeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientMedicationConsumeID"));

                    b.Property<int?>("AcutePRNIndicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ChronicDiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ChronicDiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ClinicHosp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ClinicHospED")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DosageID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("DrContact")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrContactED")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrNameED")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FrequencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Indication")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("InstructedBy2ID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InstructedByID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MCRNo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("MCRNoED")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("MedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientMedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonOfDiscontinue")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ReferID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("RouteID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("PatientMedicationConsumeID");

                    b.HasIndex("AcutePRNIndicationID_FK");

                    b.HasIndex("ChronicDiseaseID_FK");

                    b.HasIndex("ChronicDiseaseSubInfoID_FK");

                    b.HasIndex("DosageID_FK");

                    b.HasIndex("FrequencyID_FK");

                    b.HasIndex("InstructedBy2ID_FK");

                    b.HasIndex("InstructedByID_FK");

                    b.HasIndex("MedicationID_FK");

                    b.HasIndex("PatientMedicationID_FK");

                    b.HasIndex("ReferID_FK");

                    b.HasIndex("RouteID_FK");

                    b.ToTable("PatientMedicationConsume", t =>
                        {
                            t.HasTrigger("tr_PatientMedicationConsume");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedicationConsumeAttachment", b =>
                {
                    b.Property<int>("PatientMedicationConsumeAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientMedicationConsumeAttachmentID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Filename")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsEndDate")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientMedicationConsumeID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Physical")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PatientMedicationConsumeAttachmentID");

                    b.HasIndex("PatientMedicationConsumeID_FK");

                    b.ToTable("PatientMedicationConsumeAttachment", t =>
                        {
                            t.HasTrigger("tr_PatientMedicationConsumeAttachment");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedicationSupply", b =>
                {
                    b.Property<int>("PatientMedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("SupplyID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientMedicationID_FK", "SupplyID_FK");

                    b.HasIndex("SupplyID_FK");

                    b.ToTable("PatientMedicationSupply", t =>
                        {
                            t.HasTrigger("tr_PatientMedicationSupply");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientNutrition", b =>
                {
                    b.Property<int>("PatientNutritionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientNutritionID"));

                    b.Property<string>("Appetite")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("DiagnosedDysphasia")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DiagnosedDysphasiaLastReviewDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Diet")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EatingAndSwallowing")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("EatingAndSwallowingDateDue")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EatingAndSwallowingDateInserted")
                        .HasColumnType("datetime");

                    b.Property<string>("EatingAndSwallowingSize")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EatingAndSwallowingTypeOfTube")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("EatingAndSwallowingTypeOfTubeFeeding")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Enteralfeeding")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FluidConsistency")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal?>("FluidRestrictionMLSPerDay")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<bool?>("IVtherapy")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("IVtherapyMLSPerDay")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<string>("IVtherapyStateType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFIsluidRestriction")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MilkFeedAmt")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ReferralToSpeechTherapist")
                        .HasColumnType("boolean");

                    b.Property<bool?>("ReviewedBySpeechTherapist")
                        .HasColumnType("boolean");

                    b.Property<string>("SizeofPEGJtube")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool?>("SwallowingIssues")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("WaterPerDay")
                        .HasColumnType("decimal(4, 0)");

                    b.HasKey("PatientNutritionID");

                    b.ToTable("PatientNutrition", t =>
                        {
                            t.HasTrigger("tr_PatientNutrition");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientOtherAllergy", b =>
                {
                    b.Property<int>("OtherAllergyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OtherAllergyID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DescriptionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherDescription")
                        .HasColumnType("text");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ReactionID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferID_FK")
                        .HasColumnType("integer");

                    b.HasKey("OtherAllergyID");

                    b.HasIndex("DescriptionID_FK");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("ReactionID_FK");

                    b.HasIndex("ReferID_FK");

                    b.ToTable("PatientOtherAllergy", t =>
                        {
                            t.HasTrigger("tr_PatientOtherAllergy");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientPackage", b =>
                {
                    b.Property<int>("PackageID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PackageID_FK", "PatientID_FK");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("PatientPackage", t =>
                        {
                            t.HasTrigger("tr_PatientPackage");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientProfile", b =>
                {
                    b.Property<int>("PatientProfileID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientProfileID"));

                    b.Property<string>("Bed")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("BloodTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("HomePhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Organization")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OtherReligion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PatientOrganizationID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ReligionID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Ward")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("PatientProfileID");

                    b.HasIndex("BloodTypeID_FK");

                    b.HasIndex("PatientOrganizationID_FK");

                    b.HasIndex("ReligionID_FK");

                    b.ToTable("PatientProfile", t =>
                        {
                            t.HasTrigger("tr_PatientProfile");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientRAF", b =>
                {
                    b.Property<int>("PatientRAFID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientRAFID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Score1")
                        .HasColumnType("integer");

                    b.Property<int?>("Score2")
                        .HasColumnType("integer");

                    b.Property<int?>("Score3")
                        .HasColumnType("integer");

                    b.Property<int?>("Score4")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5a")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5b")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5c")
                        .HasColumnType("integer");

                    b.Property<int?>("Score5d")
                        .HasColumnType("integer");

                    b.Property<int?>("Score6")
                        .HasColumnType("integer");

                    b.Property<int?>("Score7")
                        .HasColumnType("integer");

                    b.Property<int?>("Score8")
                        .HasColumnType("integer");

                    b.Property<int?>("Score9")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("VitalSignDetailID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientRAFID");

                    b.HasIndex("VitalSignDetailID_FK");

                    b.ToTable("PatientRAF", t =>
                        {
                            t.HasTrigger("tr_PatientRAF");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientReferral", b =>
                {
                    b.Property<int>("PatientReferralID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientReferralID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("FamilyAwareDiagnose")
                        .HasColumnType("boolean");

                    b.Property<string>("FamilyAwareDiagnoseReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("FamilyAwarePrognosis")
                        .HasColumnType("boolean");

                    b.Property<string>("FamilyAwarePrognosisReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PatientAwareDiagnose")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientAwareDiagnoseReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("PatientAwarePrognosis")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientAwarePrognosisReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("PrimaryClinicianID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PrimaryNurseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondaryClinicianID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("SecondaryNurseID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientReferralID");

                    b.HasIndex("PrimaryClinicianID_FK");

                    b.HasIndex("PrimaryNurseID_FK");

                    b.HasIndex("SecondaryClinicianID_FK");

                    b.HasIndex("SecondaryNurseID_FK");

                    b.ToTable("PatientReferral", t =>
                        {
                            t.HasTrigger("tr_PatientReferral");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientReferralService", b =>
                {
                    b.Property<int>("PatientReferralID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientReferralID_FK", "ServiceID_FK");

                    b.HasIndex("ServiceID_FK");

                    b.ToTable("PatientReferralService", t =>
                        {
                            t.HasTrigger("tr_PatientReferralService");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientSocialSupport", b =>
                {
                    b.Property<int>("PatientSocialSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientSocialSupportID"));

                    b.Property<bool?>("BillTo")
                        .HasColumnType("boolean");

                    b.Property<bool?>("CanLogin")
                        .HasColumnType("boolean");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Firstname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("GenderID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("MaritalStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NationalityID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("NotifyEmail")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NotifyPhoneCall")
                        .HasColumnType("boolean");

                    b.Property<bool?>("NotifySMS")
                        .HasColumnType("boolean");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("RelationshipID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("Spokeperson")
                        .HasColumnType("boolean");

                    b.Property<string>("UserType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("PatientSocialSupportID");

                    b.HasIndex("GenderID_FK");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("MaritalStatusID_FK");

                    b.HasIndex("NationalityID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("RelationshipID_FK");

                    b.ToTable("PatientSocialSupport", t =>
                        {
                            t.HasTrigger("tr_PatientSocialSupport");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientSpecialIndicator", b =>
                {
                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("PatientSpecialIndicator", t =>
                        {
                            t.HasTrigger("tr_PatientSpecialIndicator");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWound", b =>
                {
                    b.Property<int>("PatientWoundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientWoundID"));

                    b.Property<string>("ActionDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationOfWound")
                        .HasColumnType("text");

                    b.Property<string>("LocationRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OccurDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("StatusRemark")
                        .HasColumnType("text");

                    b.Property<int?>("WoundStatusID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundID");

                    b.HasIndex("CareReportID_FK");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("WoundStatusID_FK");

                    b.ToTable("PatientWound", t =>
                        {
                            t.HasTrigger("tr_PatientWound");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundDraft", b =>
                {
                    b.Property<int>("PatientWoundDraftID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientWoundDraftID"));

                    b.Property<string>("AnnotatedImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AnnotatedImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("AssignDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("AverageDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Comments")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("DepthEighty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthForty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("DepthImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DepthImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("DepthMax")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthNans")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthNegative")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthSixty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthTwenty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Edges")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Epithelizing")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Exudate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExudateNature")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExudatedConsistency")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Granulation")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ImageUpload")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("IsAccept")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRedness")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSmell")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSwelling")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWarmToTouch")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationOfWound")
                        .HasColumnType("text");

                    b.Property<string>("LocationRemark")
                        .HasColumnType("text");

                    b.Property<decimal?>("MaximumDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("MeasurementUpdateRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("MinimumDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Necrosis")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextTreatmentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OccurDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OriginalImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OriginalImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Others")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientWoundID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("PeriWound")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Perimeter")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<decimal?>("Rotation")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<DateTime?>("SeenDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Site")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Size")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeDepth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeDepth_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeLength")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeLength_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeWidth")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeWidth_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("Slough")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Stage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("Suffering")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SurfaceArea")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("TCUpdateRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TO_Comments")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("TreatmentRemarks")
                        .HasColumnType("text");

                    b.Property<string>("UnderMining")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("WoundBedImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WoundBedImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("WoundStatusID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("isTCModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isUploadImageModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isWMModified")
                        .HasColumnType("boolean");

                    b.Property<string>("woundOverlaysImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("woundOverlaysImageDistance")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("PatientWoundDraftID");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("PatientWoundID_FK");

                    b.HasIndex("PatientWoundVisitID_FK");

                    b.HasIndex("WoundStatusID_FK");

                    b.ToTable("PatientWoundDraft", t =>
                        {
                            t.HasTrigger("tr_PatientWoundDraft");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundDraftTreatmentList", b =>
                {
                    b.Property<int>("PatientWoundDraftTListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientWoundDraftTListID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientWoundDraftID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TListItemID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundDraftTListID");

                    b.HasIndex("PatientWoundDraftID_FK");

                    b.HasIndex("TListItemID_FK");

                    b.ToTable("PatientWoundDraftTreatmentList");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundDraftTreatmentObjectives", b =>
                {
                    b.Property<int>("PatientWoundDraftID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectiveID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundDraftID_FK", "ObjectiveID_FK");

                    b.HasIndex("ObjectiveID_FK");

                    b.ToTable("PatientWoundDraftTreatmentObjectives");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundReviewBy", b =>
                {
                    b.Property<int>("PatientWoundReviewById")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientWoundReviewById"));

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("ReviewComments")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReviewDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundReviewById")
                        .HasName("PK_THK_ICP_InputFrom");

                    b.HasIndex("PatientWoundVisitID_FK");

                    b.HasIndex("UserId_FK");

                    b.ToTable("PatientWoundReviewBy", t =>
                        {
                            t.HasTrigger("tr_PatientWoundReviewBy");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisit", b =>
                {
                    b.Property<int>("PatientWoundVisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientWoundVisitID"));

                    b.Property<string>("AnnotatedImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Appearance")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("AssignedToID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AverageDepth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("CareReportID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("CleansingSolutionUsed")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DESIGN_R_Depth")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DESIGN_R_Exudate")
                        .HasColumnType("integer");

                    b.Property<int>("DESIGN_R_Granulation")
                        .HasColumnType("integer");

                    b.Property<int>("DESIGN_R_Inflammation")
                        .HasColumnType("integer");

                    b.Property<int>("DESIGN_R_Necrotic")
                        .HasColumnType("integer");

                    b.Property<int>("DESIGN_R_Pocket")
                        .HasColumnType("integer");

                    b.Property<int>("DESIGN_R_Score")
                        .HasColumnType("integer");

                    b.Property<int>("DESIGN_R_Size")
                        .HasColumnType("integer");

                    b.Property<string>("Debridement")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("DepthEighty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthForty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("DepthImage")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DepthImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("DepthMax")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthNans")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthNegative")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthSixty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("DepthTwenty")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Edges")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Exudate")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExudateSubInfo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ExudateSubInfo2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("FrequencyOfVisit")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUpload")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("InfectionRemarks")
                        .HasColumnType("text");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDESIGN_R")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDraft")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsRedness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsSmell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsSwelling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool?>("IsWarmToTouch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("MaximumDepth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("MeasurementUpdateRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("MinimumDepth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Model_jpg")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Model_mtl")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Model_obj")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextTreatmentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrigWoundId")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PatientWoundID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("PeriWound")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Perimeter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ProgressiveWoundStage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ReasonForChangeClassification")
                        .HasColumnType("text");

                    b.Property<string>("ReasonForChangeMeasurement")
                        .HasColumnType("text");

                    b.Property<int?>("ReferID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rotation")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("SizeDepth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("SizeDepth_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("SizeLength_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("SizeWidth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("SizeWidth_Auto")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool?>("SmallWound")
                        .HasColumnType("boolean");

                    b.Property<string>("Smell")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("StatusRemark")
                        .HasColumnType("text");

                    b.Property<int?>("Suffering")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("SurfaceArea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("TCUpdateRemark")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("TC_AnnotatedImage")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<decimal?>("TC_Auto_Epithelizing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TC_Auto_Granulation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TC_Auto_Necrosis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TC_Auto_Others")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TC_Auto_Slough")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TC_Epithelizing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal?>("TC_Granulation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<bool?>("TC_IsAccept")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("TC_Necrosis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("TC_OriginalImage")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<decimal?>("TC_Others")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("TC_Reason")
                        .HasColumnType("text");

                    b.Property<decimal?>("TC_Slough")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("TC_WoundBedImage")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("TO_Comments")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("TreatmentRemarks")
                        .HasColumnType("text");

                    b.Property<string>("UnderMining")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("UnderMiningDepth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(4, 1)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("VitalSignID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Volume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("WoundBedImageMeasurement")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WoundCaptureMode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("WoundInfection")
                        .HasColumnType("boolean");

                    b.Property<string>("WoundSubType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WoundType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WoundTypeOther")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("abscessPuss")
                        .HasColumnType("boolean");

                    b.Property<bool?>("delayedHealing")
                        .HasColumnType("boolean");

                    b.Property<bool?>("erythema")
                        .HasColumnType("boolean");

                    b.Property<bool?>("fever")
                        .HasColumnType("boolean");

                    b.Property<bool?>("increasedExcudate")
                        .HasColumnType("boolean");

                    b.Property<bool?>("increasedPain")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isTCAndImageModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isTCModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isUploadImageModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("isWMModified")
                        .HasColumnType("boolean");

                    b.Property<bool?>("localWarmth")
                        .HasColumnType("boolean");

                    b.Property<bool?>("maladour")
                        .HasColumnType("boolean");

                    b.Property<bool?>("oedema")
                        .HasColumnType("boolean");

                    b.Property<string>("otherTissueName")
                        .IsUnicode(false)
                        .HasColumnType("text");

                    b.Property<bool?>("pocketing")
                        .HasColumnType("boolean");

                    b.Property<bool?>("suspectedInfection")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("temperature")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("woundOverlaysImage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("woundOverlaysImageDistance")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("PatientWoundVisitID");

                    b.HasIndex("AssignedToID_FK");

                    b.HasIndex("CareReportID_FK");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("PatientWoundID_FK");

                    b.HasIndex("ReferID_FK");

                    b.HasIndex("VitalSignID_FK");

                    b.ToTable("PatientWoundVisit", t =>
                        {
                            t.HasTrigger("tr_PatientWoundVisit");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitAppearance", b =>
                {
                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundVisitID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("PatientWoundVisitAppearance", t =>
                        {
                            t.HasTrigger("tr_PatientWoundVisitAppearance");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitCleansingItem", b =>
                {
                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundVisitID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("PatientWoundVisitCleansingItem", t =>
                        {
                            t.HasTrigger("tr_PatientWoundVisitCleansingItem");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitClinician", b =>
                {
                    b.Property<int>("PatientWoundVisitClinicianID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientWoundVisitClinicianID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExternalDoctorID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("UserID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundVisitClinicianID");

                    b.HasIndex("ExternalDoctorID_FK");

                    b.HasIndex("PatientWoundVisitID_FK");

                    b.HasIndex("UserID_FK");

                    b.ToTable("PatientWoundVisitClinician", t =>
                        {
                            t.HasTrigger("tr_PatientWoundVisitClinician");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitTreatment", b =>
                {
                    b.Property<int>("PatientWoundVisitTreatmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientWoundVisitTreatmentID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsChargeable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundVisitTreatmentID");

                    b.HasIndex("ItemID_FK");

                    b.HasIndex("PatientWoundVisitID_FK");

                    b.ToTable("PatientWoundVisitTreatment", t =>
                        {
                            t.HasTrigger("tr_PatientWoundVisitTreatment");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitTreatmentList", b =>
                {
                    b.Property<int>("PatientWoundVisitTListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PatientWoundVisitTListID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TListItemID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundVisitTListID");

                    b.HasIndex("PatientWoundVisitID_FK");

                    b.HasIndex("TListItemID_FK");

                    b.ToTable("PatientWoundVisitTreatmentList", t =>
                        {
                            t.HasTrigger("tr_PatientWoundVisitTreatmentList");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitTreatmentObjectives", b =>
                {
                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ObjectiveID_FK")
                        .HasColumnType("integer");

                    b.HasKey("PatientWoundVisitID_FK", "ObjectiveID_FK");

                    b.HasIndex("ObjectiveID_FK");

                    b.ToTable("PatientWoundVisitTreatmentObjectives", t =>
                        {
                            t.HasTrigger("tr_PatientWoundVisitTreatmentObjectives");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ProblemList", b =>
                {
                    b.Property<int>("ProblemListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProblemListID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("DiseaseSubInfoID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProblemInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("TypeOfGoal")
                        .HasColumnType("integer");

                    b.HasKey("ProblemListID");

                    b.HasIndex("DiseaseID_FK");

                    b.ToTable("ProblemList", t =>
                        {
                            t.HasTrigger("tr_ProblemList");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ProblemListGoal", b =>
                {
                    b.Property<int>("ProblemListGoalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProblemListGoalID"));

                    b.Property<int?>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("Goal")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("OperatorID")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemListID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ScoreTypeID")
                        .HasColumnType("integer");

                    b.HasKey("ProblemListGoalID");

                    b.HasIndex("OperatorID");

                    b.HasIndex("ProblemListID_FK");

                    b.HasIndex("ScoreTypeID");

                    b.ToTable("ProblemListGoal", t =>
                        {
                            t.HasTrigger("tr_ProblemListGoal");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Receipt", b =>
                {
                    b.Property<int>("ReceiptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReceiptID"));

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("EmailBCC")
                        .HasColumnType("text");

                    b.Property<string>("EmailCC")
                        .HasColumnType("text");

                    b.Property<bool?>("EmailPatient")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailTo")
                        .HasColumnType("text");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentModeID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ReceiptNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ReceivedFrom")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<bool?>("SendEmail")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TotalAmt")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ReceiptID")
                        .HasName("PK__Receipt__CC08C400E8522DFD");

                    b.HasIndex("CreatedBy_FK");

                    b.HasIndex("CurrencyID_FK");

                    b.HasIndex("ModifiedBy_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("PaymentModeID_FK");

                    b.ToTable("Receipt", t =>
                        {
                            t.HasTrigger("tr_Receipt");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ReceiptForInvoice", b =>
                {
                    b.Property<int>("ReceiptForInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReceiptForInvoiceID"));

                    b.Property<decimal>("Amt")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("BillingInvoiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ReceiptID_FK")
                        .HasColumnType("integer");

                    b.HasKey("ReceiptForInvoiceID")
                        .HasName("PK__ReceiptF__AAA44B1B702F8EEB");

                    b.HasIndex("BillingInvoiceID_FK");

                    b.HasIndex("ReceiptID_FK");

                    b.ToTable("ReceiptForInvoice", t =>
                        {
                            t.HasTrigger("tr_ReceiptForInvoice");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.RecentView", b =>
                {
                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateView")
                        .HasColumnType("datetime");

                    b.HasKey("UserID_FK", "PatientID_FK");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("RecentView");
                });

            modelBuilder.Entity("C4WX1.Database.Models.RegisteredDevice", b =>
                {
                    b.Property<int>("DeviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DeviceID"));

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int?>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.Property<int?>("UserID")
                        .HasColumnType("integer");

                    b.ToTable("RegisteredDevice", t =>
                        {
                            t.HasTrigger("tr_RegisteredDevice");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.RegisteredDeviceV2", b =>
                {
                    b.Property<int>("RegisteredDeviceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegisteredDeviceID"));

                    b.Property<string>("AppName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DeviceToken")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DeviceType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstRegisterIpAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserId_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("RegisteredDeviceID");

                    b.ToTable("RegisteredDeviceV2", t =>
                        {
                            t.HasTrigger("tr_RegisteredDeviceV2");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ResidentAssessmentCategory", b =>
                {
                    b.Property<int>("ResidentAssessmentCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResidentAssessmentCategoryID"));

                    b.Property<string>("Category1Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category1Recommendation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category2Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category2Recommendation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category3Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category3Recommendation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category4Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Category4Recommendation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ResidentAssessmentCategoryID");

                    b.ToTable("ResidentAssessmentCategory", t =>
                        {
                            t.HasTrigger("tr_ResidentAssessmentCategory");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResourceId"));

                    b.Property<int>("CodeId")
                        .HasColumnType("integer");

                    b.Property<string>("CodeValue")
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.HasKey("ResourceId");

                    b.HasIndex("CodeId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasDefaultValue("");

                    b.Property<string>("OptionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("");

                    b.Property<string>("OptionValue")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasDefaultValue("");

                    b.Property<int>("Ordering")
                        .HasColumnType("integer");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasDefaultValue("");

                    b.HasKey("RoleId");

                    b.ToTable("Role", t =>
                        {
                            t.HasTrigger("tr_Role");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ScheduledTasks", b =>
                {
                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer");

                    b.Property<bool>("Everyday")
                        .HasColumnType("boolean");

                    b.Property<int>("Interval")
                        .HasColumnType("integer");

                    b.Property<string>("IntervalType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<DateTime?>("LastRun")
                        .HasColumnType("datetime");

                    b.Property<int>("NDays")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NextRun")
                        .HasColumnType("datetime");

                    b.Property<string>("PerformTask")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("D");

                    b.Property<string>("ScheduleDescription")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasDefaultValue("");

                    b.Property<DateTime?>("TimeEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TimeStart")
                        .HasColumnType("datetime");

                    b.Property<string>("WeekDays")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValue("");

                    b.Property<bool>("Weekday")
                        .HasColumnType("boolean");

                    b.HasKey("ScheduleId");

                    b.ToTable("ScheduledTasks", t =>
                        {
                            t.HasTrigger("tr_ScheduledTasks");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ServiceForBilling", b =>
                {
                    b.Property<int>("ServiceForBillingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceForBillingID"));

                    b.Property<int>("CategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duration1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Duration2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ServiceForBillingID");

                    b.HasIndex("CategoryID_FK");

                    b.ToTable("ServiceForBilling", t =>
                        {
                            t.HasTrigger("tr_ServiceForBilling");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ServiceForBillingCost", b =>
                {
                    b.Property<int>("ServiceForBillingCostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServiceForBillingCostID"));

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ServiceForBillingID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("ServiceForBillingCostID");

                    b.HasIndex("CurrencyID_FK");

                    b.HasIndex("ServiceForBillingID_FK");

                    b.ToTable("ServiceForBillingCost", t =>
                        {
                            t.HasTrigger("tr_ServiceForBillingCost");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.ServiceSkillset", b =>
                {
                    b.Property<int>("ServiceID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("SkillsetID_FK")
                        .HasColumnType("integer");

                    b.HasKey("ServiceID_FK", "SkillsetID_FK");

                    b.HasIndex("SkillsetID_FK");

                    b.ToTable("ServiceSkillset", t =>
                        {
                            t.HasTrigger("tr_ServiceSkillset");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.SyncPatientLog", b =>
                {
                    b.Property<int>("SyncLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SyncLogId"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OffPatientID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<int?>("ServerPatientID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncBatchTs")
                        .HasColumnType("integer");

                    b.Property<bool>("SyncResult")
                        .HasColumnType("boolean");

                    b.HasKey("SyncLogId");

                    b.ToTable("SyncPatientLog", t =>
                        {
                            t.HasTrigger("tr_SyncPatientLog");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.SyncWoundLog", b =>
                {
                    b.Property<int>("SyncLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SyncLogId"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OffWoundID")
                        .HasColumnType("integer");

                    b.Property<int>("ServerPatientID")
                        .HasColumnType("integer");

                    b.Property<int>("ServerWoundID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncBatchTs")
                        .HasColumnType("integer");

                    b.Property<bool>("SyncResult")
                        .HasColumnType("boolean");

                    b.Property<int>("WoundID")
                        .HasColumnType("integer");

                    b.HasKey("SyncLogId");

                    b.ToTable("SyncWoundLog", t =>
                        {
                            t.HasTrigger("tr_SyncWoundLog");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.SyncWoundVisitLog", b =>
                {
                    b.Property<int>("SyncLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SyncLogId"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OffWoundVisitID")
                        .HasColumnType("integer");

                    b.Property<int>("ServerWoundID")
                        .HasColumnType("integer");

                    b.Property<int>("ServerWoundVisitID")
                        .HasColumnType("integer");

                    b.Property<int>("SyncBatchTs")
                        .HasColumnType("integer");

                    b.Property<bool>("SyncResult")
                        .HasColumnType("boolean");

                    b.HasKey("SyncLogId");

                    b.ToTable("SyncWoundVisitLog", t =>
                        {
                            t.HasTrigger("tr_SyncWoundVisitLog");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.SysConfig", b =>
                {
                    b.Property<string>("ConfigName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsConfigurable")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ConfigName");

                    b.ToTable("SysConfig", t =>
                        {
                            t.HasTrigger("tr_SysConfig");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.SystemForDisease", b =>
                {
                    b.Property<int>("SystemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SystemID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("GroupCode")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("System")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("SystemID");

                    b.ToTable("SystemForDisease", t =>
                        {
                            t.HasTrigger("tr_SystemForDisease");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TD_WoundAssessmentFactor", b =>
                {
                    b.Property<int>("TD_WoundAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("TD_WoundAssessmentID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("TD_WoundAssessmentFactor", t =>
                        {
                            t.HasTrigger("tr_TD_WoundAssessmentFactor");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Task", b =>
                {
                    b.Property<int>("TaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskID"));

                    b.Property<int>("ActionTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("DosageID_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("FrequencyID_FK")
                        .HasColumnType("integer");

                    b.Property<decimal?>("H2OFlushingMLS")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<int?>("InitialCareAssessmentID_FK")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<int?>("MedicationID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("MedicationInstructions")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("MilkFeedVolumeMLS")
                        .HasColumnType("decimal(4, 0)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OtherLocation")
                        .HasMaxLength(800)
                        .HasColumnType("character varying(800)");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("Pending")
                        .HasColumnType("boolean");

                    b.Property<int?>("Recurrence_Days")
                        .HasColumnType("integer");

                    b.Property<int?>("Recurrence_Frequency")
                        .HasColumnType("integer");

                    b.Property<int?>("Recurrence_Interval")
                        .HasColumnType("integer");

                    b.Property<int?>("Recurrence_IntervalFlag")
                        .HasColumnType("integer");

                    b.Property<int?>("ReferenceID")
                        .HasColumnType("integer");

                    b.Property<string>("ReferenceType")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Supplement")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("UserCategory_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("recurrenceDailyHourly")
                        .HasColumnType("integer");

                    b.HasKey("TaskID");

                    b.HasIndex("ActionTypeID_FK");

                    b.HasIndex("CreatedBy_FK");

                    b.HasIndex("DosageID_FK");

                    b.HasIndex("FrequencyID_FK");

                    b.HasIndex("InitialCareAssessmentID_FK");

                    b.HasIndex("MedicationID_FK");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("UserCategory_FK");

                    b.HasIndex(new[] { "ReferenceType", "ReferenceID" }, "IX_Task_Reference");

                    b.ToTable("Task", t =>
                        {
                            t.HasTrigger("tr_Task");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskFileAttachment", b =>
                {
                    b.Property<int>("FileAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileAttachmentID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.HasKey("FileAttachmentID");

                    b.HasIndex("TaskID_FK");

                    b.ToTable("TaskFileAttachment", t =>
                        {
                            t.HasTrigger("tr_TaskFileAttachment");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskServicesRequired", b =>
                {
                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("TaskID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("TaskServicesRequired", t =>
                        {
                            t.HasTrigger("tr_TaskServicesRequired");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskSpecificDate", b =>
                {
                    b.Property<int>("TaskSpecificDateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskSpecificDateID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TaskDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.HasKey("TaskSpecificDateID");

                    b.HasIndex("TaskID_FK");

                    b.ToTable("TaskSpecificDate", t =>
                        {
                            t.HasTrigger("tr_TaskSpecificDate");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskUser", b =>
                {
                    b.Property<int>("TaskUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskUserID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.HasKey("TaskUserID");

                    b.HasIndex("TaskID_FK");

                    b.HasIndex("UserID_FK");

                    b.ToTable("TaskUser", t =>
                        {
                            t.HasTrigger("tr_TaskUser");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskUserLog", b =>
                {
                    b.Property<int>("TaskUserLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TaskUserLogID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FailReason")
                        .HasColumnType("text");

                    b.Property<bool?>("HideDashboard")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.HasKey("TaskUserLogID");

                    b.HasIndex("UserID_FK");

                    b.HasIndex(new[] { "StartDate", "EndDate", "TaskID_FK" }, "IX_TaskUserLog");

                    b.HasIndex(new[] { "StartDate" }, "IX_TaskUserLog_1");

                    b.HasIndex(new[] { "EndDate" }, "IX_TaskUserLog_2");

                    b.HasIndex(new[] { "TaskID_FK" }, "IX_TaskUserLog_3");

                    b.ToTable("TaskUserLog", t =>
                        {
                            t.HasTrigger("tr_TaskUserLog");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskUserLogAttachment", b =>
                {
                    b.Property<int>("FileAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FileAttachmentID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskUserLogID_FK")
                        .HasColumnType("integer");

                    b.HasKey("FileAttachmentID");

                    b.HasIndex("TaskUserLogID_FK");

                    b.ToTable("TaskUserLogAttachment", t =>
                        {
                            t.HasTrigger("tr_TaskUserLogAttachment");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TeleconsultationRecording", b =>
                {
                    b.Property<int>("RecordingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecordingID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("RecordingType_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Sid")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("character(36)")
                        .IsFixedLength();

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("RecordingID");

                    b.HasIndex("PatientID_FK");

                    b.HasIndex("RecordingType_FK");

                    b.ToTable("TeleconsultationRecording", t =>
                        {
                            t.HasTrigger("tr_TeleconsultationRecording");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TeleconsultationReport", b =>
                {
                    b.Property<int>("TeleReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TeleReportID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<int>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("TaskID_FK")
                        .HasColumnType("integer");

                    b.HasKey("TeleReportID");

                    b.ToTable("TeleconsultationReport", t =>
                        {
                            t.HasTrigger("tr_TeleconsultationReport");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Thresholds", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("createdBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ews_max_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_7")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_7")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("maxValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("minValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("updatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK__Threshol__3213E83F6D225C2D");

                    b.ToTable("Thresholds", t =>
                        {
                            t.HasTrigger("tr_Thresholds");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TreatmentListItem", b =>
                {
                    b.Property<int>("TListItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TListItemID"));

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSystemUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemBrand")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TListTypeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("TListItemID");

                    b.HasIndex("TListTypeID_FK");

                    b.ToTable("TreatmentListItem", t =>
                        {
                            t.HasTrigger("tr_TreatmentListItem");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.TreatmentTOL", b =>
                {
                    b.Property<int>("TreatmentTOLID")
                        .HasColumnType("integer");

                    b.Property<int>("TListItemID_FK")
                        .HasColumnType("integer");

                    b.HasKey("TreatmentTOLID", "TListItemID_FK");

                    b.HasIndex("TListItemID_FK");

                    b.ToTable("TreatmentTOL", t =>
                        {
                            t.HasTrigger("tr_TreatmentTOL");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Types", b =>
                {
                    b.Property<string>("code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("codeValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime");

                    b.Property<int>("ordering")
                        .HasColumnType("integer");

                    b.Property<string>("parentCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("datetime");

                    b.HasKey("code")
                        .HasName("PK__Types__357D4CF8F524A549");

                    b.HasIndex("parentCode");

                    b.HasIndex(new[] { "code", "parentCode" }, "idx_Types1");

                    b.ToTable("Types", t =>
                        {
                            t.HasTrigger("tr_Types");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UUIDLog", b =>
                {
                    b.Property<int>("UUIDLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UUIDLogID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsUpdated")
                        .HasColumnType("boolean");

                    b.Property<int?>("PatientWoundVisitID")
                        .HasColumnType("integer");

                    b.Property<string>("UUID")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.HasKey("UUIDLogID");

                    b.ToTable("UUIDLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UploadFile", b =>
                {
                    b.Property<int>("UploadFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UploadFileId"));

                    b.Property<byte[]>("ByteData")
                        .HasColumnType("bytea");

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("FileName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.HasKey("UploadFileId");

                    b.ToTable("UploadFile", t =>
                        {
                            t.HasTrigger("tr_UploadFile");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserAddress", b =>
                {
                    b.Property<int>("UserLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserLocationID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Address3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.HasKey("UserLocationID");

                    b.HasIndex("UserID_FK");

                    b.ToTable("UserAddress", t =>
                        {
                            t.HasTrigger("tr_UserAddress");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserBranch", b =>
                {
                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("BranchID_FK")
                        .HasColumnType("integer");

                    b.HasKey("UserID_FK", "BranchID_FK");

                    b.HasIndex("BranchID_FK");

                    b.ToTable("UserBranch", t =>
                        {
                            t.HasTrigger("tr_UserBranch");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserCategory", b =>
                {
                    b.Property<int>("UserCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserCategoryID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("EnableGeoFencing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserCategory1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UserCategory");

                    b.Property<int?>("UserCategoryOrganizationID_FK")
                        .HasColumnType("integer");

                    b.HasKey("UserCategoryID");

                    b.HasIndex("UserCategoryOrganizationID_FK");

                    b.ToTable("UserCategory", t =>
                        {
                            t.HasTrigger("tr_UserCategory");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserCategoryFacility", b =>
                {
                    b.Property<int>("UserCategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("FacilityID_FK")
                        .HasColumnType("integer");

                    b.HasKey("UserCategoryID_FK", "FacilityID_FK");

                    b.HasIndex("FacilityID_FK");

                    b.ToTable("UserCategoryFacility");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserCategoryParentChild", b =>
                {
                    b.Property<int>("ParentUserCategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ChildUserCategoryID_FK")
                        .HasColumnType("integer");

                    b.HasKey("ParentUserCategoryID_FK", "ChildUserCategoryID_FK");

                    b.HasIndex("ChildUserCategoryID_FK");

                    b.ToTable("UserCategoryParentChild");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserCategoryRole", b =>
                {
                    b.Property<int>("UserCategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("RoleID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserCategoryID_FK", "RoleID_FK");

                    b.HasIndex("RoleID_FK");

                    b.ToTable("UserCategoryRole", t =>
                        {
                            t.HasTrigger("tr_UserCategoryRole");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserLanguage", b =>
                {
                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageID_FK")
                        .HasColumnType("integer");

                    b.HasKey("UserID_FK", "LanguageID_FK");

                    b.HasIndex("LanguageID_FK");

                    b.ToTable("UserLanguage", t =>
                        {
                            t.HasTrigger("tr_UserLanguage");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserOrganization", b =>
                {
                    b.Property<int>("UserId_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("UserId_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("UserOrganization", t =>
                        {
                            t.HasTrigger("tr_UserOrganization");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserRole", b =>
                {
                    b.Property<int>("UserId_FK")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("");

                    b.HasKey("UserId_FK", "RoleId_FK");

                    b.HasIndex("RoleId_FK");

                    b.ToTable("UserRole", t =>
                        {
                            t.HasTrigger("tr_UserRole");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserSkillset", b =>
                {
                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("CodeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("UserID_FK", "CodeID_FK");

                    b.HasIndex("CodeID_FK");

                    b.ToTable("UserSkillset", t =>
                        {
                            t.HasTrigger("tr_UserSkillset");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserTypeID"));

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("ManpowerRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserCategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("UserType1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("UserType");

                    b.HasKey("UserTypeID");

                    b.HasIndex("UserCategoryID_FK");

                    b.ToTable("UserType", t =>
                        {
                            t.HasTrigger("tr_UserType");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserUserType", b =>
                {
                    b.Property<int>("UserID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserTypeID_FK")
                        .HasColumnType("integer");

                    b.HasKey("UserID_FK", "UserTypeID_FK");

                    b.HasIndex("UserTypeID_FK");

                    b.ToTable("UserUserType", t =>
                        {
                            t.HasTrigger("tr_UserUserType");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<int?>("AccessLevelID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Contact")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Designation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("HasValidEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTCAccepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLockoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLogoutDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastPasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LocationNow1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LocationNow2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LocationNow3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LocationNowModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PatientID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Photo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PostalCodeNow")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int?>("PreferredLanguage")
                        .HasColumnType("integer");

                    b.Property<string>("PreviousPasswords")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PreviousPasswords2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("ResetPassword")
                        .HasColumnType("boolean");

                    b.Property<string>("SessionKey")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool?>("SharePdf")
                        .HasColumnType("boolean");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("TokenID")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int?>("UserOrganizationID_FK")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("PatientID_FK");

                    b.ToTable("Users", t =>
                        {
                            t.HasTrigger("tr_Users");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSignDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("detailValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("vitalSignId")
                        .HasColumnType("integer");

                    b.Property<int>("vitalSignTypeId")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("PK__VitalSig__3213E83FE42362D2");

                    b.HasIndex("vitalSignId");

                    b.HasIndex("vitalSignTypeId");

                    b.ToTable("VitalSignDetails", t =>
                        {
                            t.HasTrigger("tr_VitalSignDetails");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSignRelationships", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("patientId")
                        .HasColumnType("integer");

                    b.Property<int>("thresholdId")
                        .HasColumnType("integer");

                    b.Property<int>("vitalSignTypeId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("patientId");

                    b.HasIndex("thresholdId");

                    b.HasIndex("vitalSignTypeId");

                    b.ToTable("VitalSignRelationships", t =>
                        {
                            t.HasTrigger("tr_VitalSignRelationships");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSignTypeThreshold", b =>
                {
                    b.Property<int>("VitalSignTypeID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ews_max_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_7")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_7")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("VitalSignTypeID_FK");

                    b.HasIndex(new[] { "VitalSignTypeID_FK" }, "IX_VitalSignTypeThreshold")
                        .IsUnique();

                    b.ToTable("VitalSignTypeThreshold", t =>
                        {
                            t.HasTrigger("tr_VitalSignTypeThreshold");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSignTypes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("createdBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("updatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK__VitalSig__3213E83F6F00CA79");

                    b.HasIndex(new[] { "name" }, "idx_VitalSignTypes1");

                    b.ToTable("VitalSignTypes", t =>
                        {
                            t.HasTrigger("tr_VitalSignTypes");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSigns", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("createdBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<int>("icaId")
                        .HasColumnType("integer");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("patientId")
                        .HasColumnType("integer");

                    b.Property<string>("source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("updatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK__VitalSig__3213E83F2E0950CF");

                    b.HasIndex("patientId");

                    b.ToTable("VitalSigns", t =>
                        {
                            t.HasTrigger("tr_VitalSigns");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.WoundConsolidatedEmail", b =>
                {
                    b.Property<int>("WoundConsolidatedEmailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WoundConsolidatedEmailID"));

                    b.Property<int>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MailSettingsID_FK")
                        .HasColumnType("integer");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PDFContent")
                        .HasColumnType("text");

                    b.Property<int>("PatientWoundVisitID_FK")
                        .HasColumnType("integer");

                    b.HasKey("WoundConsolidatedEmailID");

                    b.HasIndex("MailSettingsID_FK");

                    b.HasIndex("PatientWoundVisitID_FK");

                    b.ToTable("WoundConsolidatedEmail", t =>
                        {
                            t.HasTrigger("tr_WoundConsolidatedEmail");
                        });
                });

            modelBuilder.Entity("C4WX1.Database.Models.WoundUserCategoryParentChild", b =>
                {
                    b.Property<int>("ParentUserCategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("ChildUserCategoryID_FK")
                        .HasColumnType("integer");

                    b.HasKey("ParentUserCategoryID_FK", "ChildUserCategoryID_FK");

                    b.ToTable("WoundUserCategoryParentChild");
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_AssessmentDue", b =>
                {
                    b.Property<string>("AssessmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("createdBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("createdDate")
                        .HasColumnType("datetime");

                    b.Property<int>("icaId")
                        .HasColumnType("integer");

                    b.Property<int>("patientId")
                        .HasColumnType("integer");

                    b.Property<string>("source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("updatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updatedDate")
                        .HasColumnType("datetime");

                    b.ToTable((string)null);

                    b.ToView("vw_AssessmentDue", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_CarePlanSetup", b =>
                {
                    b.Property<int>("DiseaseID")
                        .HasColumnType("integer");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DiseaseSubInfo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("DiseaseSubInfoID")
                        .HasColumnType("integer");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("InitialCareAssessmentID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("System")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SystemID_FK")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_CarePlanSetup", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_CarePlanSystemDisease", b =>
                {
                    b.Property<int>("CarePlanID")
                        .HasColumnType("integer");

                    b.Property<int>("DiseaseID_FK")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SystemID_FK")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_CarePlanSystemDisease", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_DBSize", b =>
                {
                    b.Property<int>("size")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_DBSize", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_Doctors", b =>
                {
                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<int?>("publicId")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_Doctors", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_FalangaScores", b =>
                {
                    b.Property<string>("BlackEschar")
                        .IsRequired()
                        .HasMaxLength(43)
                        .IsUnicode(false)
                        .HasColumnType("character varying(43)");

                    b.Property<int>("BlackEschar_Score")
                        .HasColumnType("integer");

                    b.Property<bool?>("Edema")
                        .HasColumnType("boolean");

                    b.Property<int>("Edema_Score")
                        .HasColumnType("integer");

                    b.Property<string>("ExudateAmount")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ExudateAmount_Score")
                        .HasColumnType("integer");

                    b.Property<string>("GreatestWoundDepth")
                        .IsRequired()
                        .HasMaxLength(71)
                        .IsUnicode(false)
                        .HasColumnType("character varying(71)");

                    b.Property<int>("GreatestWoundDepth_Score")
                        .HasColumnType("integer");

                    b.Property<string>("HealingEdges")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("HealingEdges_Score")
                        .HasColumnType("integer");

                    b.Property<string>("PeriwoundCallousFibrosis")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PeriwoundCallousFibrosis_Score")
                        .HasColumnType("integer");

                    b.Property<string>("PeriwoundDermatitis")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PeriwoundDermatitis_Score")
                        .HasColumnType("integer");

                    b.Property<string>("PinkWoundBed")
                        .IsRequired()
                        .HasMaxLength(43)
                        .IsUnicode(false)
                        .HasColumnType("character varying(43)");

                    b.Property<int>("PinkWoundBed_Score")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer");

                    b.Property<int>("patientwoundvisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_FalangaScores", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_FalangaScores_WoundDraft", b =>
                {
                    b.Property<string>("BlackEschar")
                        .IsRequired()
                        .HasMaxLength(43)
                        .IsUnicode(false)
                        .HasColumnType("character varying(43)");

                    b.Property<int>("BlackEschar_Score")
                        .HasColumnType("integer");

                    b.Property<bool?>("Edema")
                        .HasColumnType("boolean");

                    b.Property<int>("Edema_Score")
                        .HasColumnType("integer");

                    b.Property<string>("ExudateAmount")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ExudateAmount_Score")
                        .HasColumnType("integer");

                    b.Property<string>("GreatestWoundDepth")
                        .IsRequired()
                        .HasMaxLength(71)
                        .IsUnicode(false)
                        .HasColumnType("character varying(71)");

                    b.Property<int>("GreatestWoundDepth_Score")
                        .HasColumnType("integer");

                    b.Property<string>("HealingEdges")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("HealingEdges_Score")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundDraftID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("PeriwoundCallousFibrosis")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PeriwoundCallousFibrosis_Score")
                        .HasColumnType("integer");

                    b.Property<string>("PeriwoundDermatitis")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PeriwoundDermatitis_Score")
                        .HasColumnType("integer");

                    b.Property<string>("PinkWoundBed")
                        .IsRequired()
                        .HasMaxLength(43)
                        .IsUnicode(false)
                        .HasColumnType("character varying(43)");

                    b.Property<int>("PinkWoundBed_Score")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_FalangaScores_WoundDraft", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_PatientAllLatestVitalSigns", b =>
                {
                    b.Property<long?>("Index")
                        .HasColumnType("bigint");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ThresholdMaxValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ThresholdMinValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("VitalSignDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VitalSignDetailId")
                        .HasColumnType("integer");

                    b.Property<int>("VitalSignTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("VitalSignTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("ews_max_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_7")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_7")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientAllLatestVitalSigns", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_PatientBilling", b =>
                {
                    b.Property<string>("BillingAddress1")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingAddress3")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("BillingPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)");

                    b.Property<int?>("PatientProfileID_FK")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientBilling", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_PatientDisease", b =>
                {
                    b.Property<int>("DiseaseID")
                        .HasColumnType("integer");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("DiseaseSubInfo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("DiseaseSubInfoID")
                        .HasColumnType("integer");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("InitialCareAssessmentID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("System")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SystemID_FK")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientDisease", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_PatientLatestVitalSigns", b =>
                {
                    b.Property<long?>("Index")
                        .HasColumnType("bigint");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ThresholdMaxValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ThresholdMinValue")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("VitalSignDate")
                        .HasColumnType("datetime");

                    b.Property<int>("VitalSignDetailId")
                        .HasColumnType("integer");

                    b.Property<int>("VitalSignTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("VitalSignTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("ews_max_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_max_7")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_1")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_2")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_3")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_4")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_5")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_6")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("ews_min_7")
                        .HasColumnType("decimal(18, 2)");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientLatestVitalSigns", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_PatientWound", b =>
                {
                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("CreatedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("LastVisitDate")
                        .HasColumnType("date");

                    b.Property<string>("LocationOfWound")
                        .HasColumnType("text");

                    b.Property<int?>("ModifiedBy_FK")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("NextReviewDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextTreatmentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundVisitID")
                        .HasColumnType("integer");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Stage")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Status")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)");

                    b.Property<string>("modifiedBy")
                        .HasMaxLength(101)
                        .HasColumnType("character varying(101)");

                    b.Property<string>("patientName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientWound", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_PatientWoundImageDownload", b =>
                {
                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ImageDate")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("ImageUpload")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LocationOfWound")
                        .HasColumnType("text");

                    b.Property<string>("NewImageName")
                        .HasColumnType("text");

                    b.Property<int>("PatientID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundID")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundVisitID")
                        .HasColumnType("integer");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("VisitDate")
                        .HasColumnType("datetime");

                    b.ToTable((string)null);

                    b.ToView("vw_PatientWoundImageDownload", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_PushScores", b =>
                {
                    b.Property<int>("ExudateAmountScore")
                        .HasColumnType("integer");

                    b.Property<int>("LengthXWidthScore")
                        .HasColumnType("integer");

                    b.Property<int>("PatientWoundVisitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<int>("TissueTypeScore")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalScore")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_PushScores", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_Teleconsultation", b =>
                {
                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PatientID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_Teleconsultation", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.vw_UserRoles", b =>
                {
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("EnableGeoFencing")
                        .HasColumnType("boolean");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("RoleID_FK")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("UserCategory")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserCategoryID_FK")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserRole")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserTypeID")
                        .HasColumnType("integer");

                    b.ToTable((string)null);

                    b.ToView("vw_UserRoles", (string)null);
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIAccessKey", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Types", "TokenCodeNavigation")
                        .WithMany("APIAccessKey")
                        .HasForeignKey("TokenCode")
                        .IsRequired()
                        .HasConstraintName("FK_APIAccessKey_TokenCode");

                    b.Navigation("TokenCodeNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrderAllergy", b =>
                {
                    b.HasOne("C4WX1.Database.Models.APIOrder", "APIOrderID_FKNavigation")
                        .WithMany("APIOrderAllergy")
                        .HasForeignKey("APIOrderID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_APIOrderAllergy_APIOrder");

                    b.Navigation("APIOrderID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrderDiagnosis", b =>
                {
                    b.HasOne("C4WX1.Database.Models.APIOrder", "APIOrderID_FKNavigation")
                        .WithMany("APIOrderDiagnosis")
                        .HasForeignKey("APIOrderID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_APIOrderDiagnosis_APIOrder");

                    b.Navigation("APIOrderID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrderMedication", b =>
                {
                    b.HasOne("C4WX1.Database.Models.APIOrder", "APIOrderID_FKNavigation")
                        .WithMany("APIOrderMedication")
                        .HasForeignKey("APIOrderID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_APIOrderMedication_APIOrder");

                    b.Navigation("APIOrderID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrderTask", b =>
                {
                    b.HasOne("C4WX1.Database.Models.APIOrder", "APIOrderID_FKNavigation")
                        .WithMany("APIOrderTask")
                        .HasForeignKey("APIOrderID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_APIOrderTask_APIOrder");

                    b.Navigation("APIOrderID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Activity", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("Activity")
                        .HasForeignKey("DiseaseID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Activity_Disease");

                    b.HasOne("C4WX1.Database.Models.ProblemList", "ProblemListID_FKNavigation")
                        .WithMany("Activity")
                        .HasForeignKey("ProblemListID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Activity_ProblemList");

                    b.Navigation("DiseaseID_FKNavigation");

                    b.Navigation("ProblemListID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.AuditTrail", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "CreatedBy_FKNavigation")
                        .WithMany("AuditTrail")
                        .HasForeignKey("CreatedBy_FK")
                        .HasConstraintName("FK_AuditTrail_Users");

                    b.Navigation("CreatedBy_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingInvoice", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CareReport", "CareReportID_FKNavigation")
                        .WithMany("BillingInvoice")
                        .HasForeignKey("CareReportID_FK")
                        .HasConstraintName("FK_BillingInvoice_CareReport");

                    b.HasOne("C4WX1.Database.Models.Users", "CreatedBy_FKNavigation")
                        .WithMany("BillingInvoiceCreatedBy_FKNavigation")
                        .HasForeignKey("CreatedBy_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingInvoice_Users");

                    b.HasOne("C4WX1.Database.Models.Code", "CurrencyID_FKNavigation")
                        .WithMany("BillingInvoice")
                        .HasForeignKey("CurrencyID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingInvoice_Code");

                    b.HasOne("C4WX1.Database.Models.Users", "ModifiedBy_FKNavigation")
                        .WithMany("BillingInvoiceModifiedBy_FKNavigation")
                        .HasForeignKey("ModifiedBy_FK")
                        .HasConstraintName("FK_BillingInvoice_Users1");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("BillingInvoice")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingInvoice_Patient");

                    b.Navigation("CareReportID_FKNavigation");

                    b.Navigation("CreatedBy_FKNavigation");

                    b.Navigation("CurrencyID_FKNavigation");

                    b.Navigation("ModifiedBy_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingInvoiceConsumable", b =>
                {
                    b.HasOne("C4WX1.Database.Models.BillingInvoice", "BillingInvoiceID_FKNavigation")
                        .WithMany("BillingInvoiceConsumable")
                        .HasForeignKey("BillingInvoiceID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingInvoiceConsumable_BillingInvoice");

                    b.HasOne("C4WX1.Database.Models.Item", "ItemID_FKNavigation")
                        .WithMany("BillingInvoiceConsumable")
                        .HasForeignKey("ItemID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingInvoiceConsumable_Item");

                    b.Navigation("BillingInvoiceID_FKNavigation");

                    b.Navigation("ItemID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingInvoiceService", b =>
                {
                    b.HasOne("C4WX1.Database.Models.BillingInvoice", "BillingInvoiceID_FKNavigation")
                        .WithMany("BillingInvoiceService")
                        .HasForeignKey("BillingInvoiceID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingInvoiceService_BillingInvoice");

                    b.HasOne("C4WX1.Database.Models.BillingProposal", "ProposalID_FKNavigation")
                        .WithMany("BillingInvoiceService")
                        .HasForeignKey("ProposalID_FK")
                        .HasConstraintName("FK_BillingInvoiceService_BillingProposal");

                    b.HasOne("C4WX1.Database.Models.ServiceForBilling", "ServiceID_FKNavigation")
                        .WithMany("BillingInvoiceService")
                        .HasForeignKey("ServiceID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingInvoiceService_ServiceForBilling");

                    b.Navigation("BillingInvoiceID_FKNavigation");

                    b.Navigation("ProposalID_FKNavigation");

                    b.Navigation("ServiceID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingPackage", b =>
                {
                    b.HasOne("C4WX1.Database.Models.BillingService", "BillingService")
                        .WithMany("BillingPackage")
                        .HasForeignKey("BillingServiceID")
                        .IsRequired()
                        .HasConstraintName("FK_BillingPackage_BillingService");

                    b.Navigation("BillingService");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingProposal", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "CreatedBy_FKNavigation")
                        .WithMany("BillingProposalCreatedBy_FKNavigation")
                        .HasForeignKey("CreatedBy_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingProposal_Users");

                    b.HasOne("C4WX1.Database.Models.Code", "CurrencyID_FKNavigation")
                        .WithMany("BillingProposal")
                        .HasForeignKey("CurrencyID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingProposal_Code");

                    b.HasOne("C4WX1.Database.Models.Users", "ModifiedBy_FKNavigation")
                        .WithMany("BillingProposalModifiedBy_FKNavigation")
                        .HasForeignKey("ModifiedBy_FK")
                        .HasConstraintName("FK_BillingProposal_Users1");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("BillingProposal")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingProposal_Patient");

                    b.Navigation("CreatedBy_FKNavigation");

                    b.Navigation("CurrencyID_FKNavigation");

                    b.Navigation("ModifiedBy_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingProposalService", b =>
                {
                    b.HasOne("C4WX1.Database.Models.BillingProposal", "BillingProposalID_FKNavigation")
                        .WithMany("BillingProposalService")
                        .HasForeignKey("BillingProposalID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingProposalService_BillingProposal");

                    b.HasOne("C4WX1.Database.Models.ServiceForBilling", "ServiceID_FKNavigation")
                        .WithMany("BillingProposalService")
                        .HasForeignKey("ServiceID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingProposalService_ServiceForBilling");

                    b.Navigation("BillingProposalID_FKNavigation");

                    b.Navigation("ServiceID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingService", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CategoryID_FKNavigation")
                        .WithMany("BillingService")
                        .HasForeignKey("CategoryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_BillingService_Code");

                    b.Navigation("CategoryID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Branch", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CurrencyID_FKNavigation")
                        .WithMany("Branch")
                        .HasForeignKey("CurrencyID_FK")
                        .HasConstraintName("FK_Branch_Code");

                    b.Navigation("CurrencyID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CPGoals", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("CPGoals")
                        .HasForeignKey("DiseaseID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CPGoals_Disease");

                    b.Navigation("DiseaseID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlan", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CarePlanStatus", "CarePlanStatusID_FKNavigation")
                        .WithMany("CarePlan")
                        .HasForeignKey("CarePlanStatusID_FK")
                        .HasConstraintName("FK_CarePlan_CarePlanStatus");

                    b.HasOne("C4WX1.Database.Models.Diagnosis", "DiagnosisID_FKNavigation")
                        .WithMany("CarePlan")
                        .HasForeignKey("DiagnosisID_FK")
                        .HasConstraintName("FK_CarePlan_Diagnosis");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("CarePlan")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_CarePlan_Patient");

                    b.Navigation("CarePlanStatusID_FKNavigation");

                    b.Navigation("DiagnosisID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanDetail", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CarePlanSub", "CarePlanSubID_FKNavigation")
                        .WithMany("CarePlanDetail")
                        .HasForeignKey("CarePlanSubID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanDetail_CarePlanSub");

                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("CarePlanDetail")
                        .HasForeignKey("DiseaseID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanDetail_DiseaseForDisease");

                    b.HasOne("C4WX1.Database.Models.SystemForDisease", "SystemID_FKNavigation")
                        .WithMany("CarePlanDetail")
                        .HasForeignKey("SystemID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanDetail_SystemForDisease");

                    b.Navigation("CarePlanSubID_FKNavigation");

                    b.Navigation("DiseaseID_FKNavigation");

                    b.Navigation("SystemID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSub", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CarePlan", "CarePlanID_FKNavigation")
                        .WithMany("CarePlanSub")
                        .HasForeignKey("CarePlanID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSub_CarePlan");

                    b.Navigation("CarePlanID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubActivity", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Activity", "ActivityID_FKNavigation")
                        .WithMany("CarePlanSubActivity")
                        .HasForeignKey("ActivityID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubActivity_Activity");

                    b.HasOne("C4WX1.Database.Models.CarePlanSub", "CarePlanSubID_FKNavigation")
                        .WithMany("CarePlanSubActivity")
                        .HasForeignKey("CarePlanSubID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubActivity_CarePlanSub");

                    b.Navigation("ActivityID_FKNavigation");

                    b.Navigation("CarePlanSubID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubCPGoals", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CPGoals", "CPGoalsID_FKNavigation")
                        .WithMany("CarePlanSubCPGoals")
                        .HasForeignKey("CPGoalsID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubCPGoals_CPGoals");

                    b.HasOne("C4WX1.Database.Models.CarePlanSub", "CarePlanSubID_FKNavigation")
                        .WithMany("CarePlanSubCPGoals")
                        .HasForeignKey("CarePlanSubID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubCPGoals_CarePlanSub");

                    b.Navigation("CPGoalsID_FKNavigation");

                    b.Navigation("CarePlanSubID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubGoal", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CarePlanSub", "CarePlanSubID_FKNavigation")
                        .WithMany("CarePlanSubGoal")
                        .HasForeignKey("CarePlanSubID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubGoal_CarePlanSub");

                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("CarePlanSubGoal")
                        .HasForeignKey("DiseaseID_FK")
                        .HasConstraintName("FK_CarePlanSubGoal_Disease");

                    b.Navigation("CarePlanSubID_FKNavigation");

                    b.Navigation("DiseaseID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubIntervention", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CarePlanSub", "CarePlanSubID_FKNavigation")
                        .WithMany("CarePlanSubIntervention")
                        .HasForeignKey("CarePlanSubID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubIntervention_CarePlanSub");

                    b.HasOne("C4WX1.Database.Models.Intervention", "InterventionID_FKNavigation")
                        .WithMany("CarePlanSubIntervention")
                        .HasForeignKey("InterventionID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubIntervention_Intervention");

                    b.Navigation("CarePlanSubID_FKNavigation");

                    b.Navigation("InterventionID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubProblemList", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CarePlanSub", "CarePlanSubID_FKNavigation")
                        .WithMany("CarePlanSubProblemList")
                        .HasForeignKey("CarePlanSubID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubProblemList_CarePlanSub");

                    b.HasOne("C4WX1.Database.Models.ProblemList", "ProblemListID_FKNavigation")
                        .WithMany("CarePlanSubProblemList")
                        .HasForeignKey("ProblemListID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubProblemList_ProblemList");

                    b.Navigation("CarePlanSubID_FKNavigation");

                    b.Navigation("ProblemListID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubProblemListGoal", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CarePlanSubProblemList", "CarePlanSubProblemListID_FKNavigation")
                        .WithMany("CarePlanSubProblemListGoal")
                        .HasForeignKey("CarePlanSubProblemListID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CarePlanSubProblemListGoal_CarePlanSubProblemList");

                    b.HasOne("C4WX1.Database.Models.Code", "Operator")
                        .WithMany("CarePlanSubProblemListGoalOperator")
                        .HasForeignKey("OperatorID")
                        .HasConstraintName("FK_CarePlanSubProblemListGoal_Operator");

                    b.HasOne("C4WX1.Database.Models.ProblemListGoal", "ProblemListGoalID_FKNavigation")
                        .WithMany("CarePlanSubProblemListGoal")
                        .HasForeignKey("ProblemListGoalID_FK")
                        .HasConstraintName("FK_CarePlanSubProblemListGoal_ProblemListGoal");

                    b.HasOne("C4WX1.Database.Models.Code", "ScoreType")
                        .WithMany("CarePlanSubProblemListGoalScoreType")
                        .HasForeignKey("ScoreTypeID")
                        .HasConstraintName("FK_CarePlanSubProblemListGoal_ScoreType");

                    b.Navigation("CarePlanSubProblemListID_FKNavigation");

                    b.Navigation("Operator");

                    b.Navigation("ProblemListGoalID_FKNavigation");

                    b.Navigation("ScoreType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReport", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "AirwayBreathingID_FKNavigation")
                        .WithMany("CareReportAirwayBreathingID_FKNavigation")
                        .HasForeignKey("AirwayBreathingID_FK")
                        .HasConstraintName("FK_CareReport_Code1");

                    b.HasOne("C4WX1.Database.Models.Code", "BladderCareID_FKNavigation")
                        .WithMany("CareReportBladderCareID_FKNavigation")
                        .HasForeignKey("BladderCareID_FK")
                        .HasConstraintName("FK_CareReport_Code15");

                    b.HasOne("C4WX1.Database.Models.Code", "BowelCareID_FKNavigation")
                        .WithMany("CareReportBowelCareID_FKNavigation")
                        .HasForeignKey("BowelCareID_FK")
                        .HasConstraintName("FK_CareReport_Code14");

                    b.HasOne("C4WX1.Database.Models.Code", "CapillaryRefillID_FKNavigation")
                        .WithMany("CareReportCapillaryRefillID_FKNavigation")
                        .HasForeignKey("CapillaryRefillID_FK")
                        .HasConstraintName("FK_CareReport_Code7");

                    b.HasOne("C4WX1.Database.Models.CarePlan", "CarePlanID_FKNavigation")
                        .WithMany("CareReport")
                        .HasForeignKey("CarePlanID_FK")
                        .HasConstraintName("FK_CareReport_CarePlan");

                    b.HasOne("C4WX1.Database.Models.CareReport", "CareReportID_FKNavigation")
                        .WithMany("InverseCareReportID_FKNavigation")
                        .HasForeignKey("CareReportID_FK")
                        .HasConstraintName("FK_CareReport_CareReport");

                    b.HasOne("C4WX1.Database.Models.CareReportRehabilitation", "CareReportRehabilitationID_FKNavigation")
                        .WithMany("CareReport")
                        .HasForeignKey("CareReportRehabilitationID_FK")
                        .HasConstraintName("FK_CareReport_CareReportRehabilitation");

                    b.HasOne("C4WX1.Database.Models.CareReportSystemInfo", "CareReportSystemInfoID_FKNavigation")
                        .WithMany("CareReport")
                        .HasForeignKey("CareReportSystemInfoID_FK")
                        .HasConstraintName("FK_CareReport_CareReportSystemInfo");

                    b.HasOne("C4WX1.Database.Models.Code", "CirculationID_FKNavigation")
                        .WithMany("CareReportCirculationID_FKNavigation")
                        .HasForeignKey("CirculationID_FK")
                        .HasConstraintName("FK_CareReport_Code4");

                    b.HasOne("C4WX1.Database.Models.Code", "CoughID_FKNavigation")
                        .WithMany("CareReportCoughID_FKNavigation")
                        .HasForeignKey("CoughID_FK")
                        .HasConstraintName("FK_CareReport_Code2");

                    b.HasOne("C4WX1.Database.Models.Code", "DiapersID_FKNavigation")
                        .WithMany("CareReportDiapersID_FKNavigation")
                        .HasForeignKey("DiapersID_FK")
                        .HasConstraintName("FK_CareReport_Code16");

                    b.HasOne("C4WX1.Database.Models.Code", "LipsID_FKNavigation")
                        .WithMany("CareReportLipsID_FKNavigation")
                        .HasForeignKey("LipsID_FK")
                        .HasConstraintName("FK_CareReport_Code6");

                    b.HasOne("C4WX1.Database.Models.Code", "LowerEyelidsID_FKNavigation")
                        .WithMany("CareReportLowerEyelidsID_FKNavigation")
                        .HasForeignKey("LowerEyelidsID_FK")
                        .HasConstraintName("FK_CareReport_Code5");

                    b.HasOne("C4WX1.Database.Models.Code", "O2AidID_FKNavigation")
                        .WithMany("CareReportO2AidID_FKNavigation")
                        .HasForeignKey("O2AidID_FK")
                        .HasConstraintName("FK_CareReport_Code3");

                    b.HasOne("C4WX1.Database.Models.Code", "PainDescriptionID_FKNavigation")
                        .WithMany("CareReportPainDescriptionID_FKNavigation")
                        .HasForeignKey("PainDescriptionID_FK")
                        .HasConstraintName("FK_CareReport_Code");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("CareReport")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CareReport_Patient");

                    b.HasOne("C4WX1.Database.Models.PatientNutrition", "PatientNutritionID_FKNavigation")
                        .WithMany("CareReport")
                        .HasForeignKey("PatientNutritionID_FK")
                        .HasConstraintName("FK_CareReport_PatientNutrition");

                    b.HasOne("C4WX1.Database.Models.Code", "PeripheralPulsesPedalID_FKNavigation")
                        .WithMany("CareReportPeripheralPulsesPedalID_FKNavigation")
                        .HasForeignKey("PeripheralPulsesPedalID_FK")
                        .HasConstraintName("FK_CareReport_Code9");

                    b.HasOne("C4WX1.Database.Models.Code", "PeripheralPulsesRadialID_FKNavigation")
                        .WithMany("CareReportPeripheralPulsesRadialID_FKNavigation")
                        .HasForeignKey("PeripheralPulsesRadialID_FK")
                        .HasConstraintName("FK_CareReport_Code8");

                    b.HasOne("C4WX1.Database.Models.Code", "SleepRestID_FKNavigation")
                        .WithMany("CareReportSleepRestID_FKNavigation")
                        .HasForeignKey("SleepRestID_FK")
                        .HasConstraintName("FK_CareReport_Code10");

                    b.HasOne("C4WX1.Database.Models.Code", "TemperatureID_FKNavigation")
                        .WithMany("CareReportTemperatureID_FKNavigation")
                        .HasForeignKey("TemperatureID_FK")
                        .HasConstraintName("FK_CareReport_Code11");

                    b.HasOne("C4WX1.Database.Models.Users", "VisitedBy_FKNavigation")
                        .WithMany("CareReport")
                        .HasForeignKey("VisitedBy_FK")
                        .HasConstraintName("FK_CareReport_Users");

                    b.HasOne("C4WX1.Database.Models.VitalSigns", "VitalSignID_FKNavigation")
                        .WithMany("CareReport")
                        .HasForeignKey("VitalSignID_FK")
                        .HasConstraintName("FK_CareReport_VitalSigns");

                    b.Navigation("AirwayBreathingID_FKNavigation");

                    b.Navigation("BladderCareID_FKNavigation");

                    b.Navigation("BowelCareID_FKNavigation");

                    b.Navigation("CapillaryRefillID_FKNavigation");

                    b.Navigation("CarePlanID_FKNavigation");

                    b.Navigation("CareReportID_FKNavigation");

                    b.Navigation("CareReportRehabilitationID_FKNavigation");

                    b.Navigation("CareReportSystemInfoID_FKNavigation");

                    b.Navigation("CirculationID_FKNavigation");

                    b.Navigation("CoughID_FKNavigation");

                    b.Navigation("DiapersID_FKNavigation");

                    b.Navigation("LipsID_FKNavigation");

                    b.Navigation("LowerEyelidsID_FKNavigation");

                    b.Navigation("O2AidID_FKNavigation");

                    b.Navigation("PainDescriptionID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("PatientNutritionID_FKNavigation");

                    b.Navigation("PeripheralPulsesPedalID_FKNavigation");

                    b.Navigation("PeripheralPulsesRadialID_FKNavigation");

                    b.Navigation("SleepRestID_FKNavigation");

                    b.Navigation("TemperatureID_FKNavigation");

                    b.Navigation("VisitedBy_FKNavigation");

                    b.Navigation("VitalSignID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReportConfig", b =>
                {
                    b.HasOne("C4WX1.Database.Models.UserType", "UserTypeID_FKNavigation")
                        .WithMany("CareReportConfig")
                        .HasForeignKey("UserTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CareReportConfig_UserType");

                    b.Navigation("UserTypeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReportSocialSupport", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CareReport", "CareReportID_FKNavigation")
                        .WithMany("CareReportSocialSupport")
                        .HasForeignKey("CareReportID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CareReportSocialSupport_CareReport");

                    b.HasOne("C4WX1.Database.Models.PatientSocialSupport", "PatientSocialSupportID_FKNavigation")
                        .WithMany("CareReportSocialSupport")
                        .HasForeignKey("PatientSocialSupportID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_CareReportSocialSupport_PatientSocialSupport");

                    b.Navigation("CareReportID_FKNavigation");

                    b.Navigation("PatientSocialSupportID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReportSystemInfo", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "KeyPerson1UserID_FKNavigation")
                        .WithMany("CareReportSystemInfoKeyPerson1UserID_FKNavigation")
                        .HasForeignKey("KeyPerson1UserID_FK")
                        .HasConstraintName("FK_CareReportSystemInfo_Users1");

                    b.HasOne("C4WX1.Database.Models.Users", "KeyPerson2UserID_FKNavigation")
                        .WithMany("CareReportSystemInfoKeyPerson2UserID_FKNavigation")
                        .HasForeignKey("KeyPerson2UserID_FK")
                        .HasConstraintName("FK_CareReportSystemInfo_Users2");

                    b.HasOne("C4WX1.Database.Models.PatientClinician", "PrimaryDoctorUserID_FKNavigation")
                        .WithMany("CareReportSystemInfoPrimaryDoctorUserID_FKNavigation")
                        .HasForeignKey("PrimaryDoctorUserID_FK")
                        .HasConstraintName("FK_CareReportSystemInfo_PatientClinician1");

                    b.HasOne("C4WX1.Database.Models.PatientClinician", "SecondaryDoctorUserID_FKNavigation")
                        .WithMany("CareReportSystemInfoSecondaryDoctorUserID_FKNavigation")
                        .HasForeignKey("SecondaryDoctorUserID_FK")
                        .HasConstraintName("FK_CareReportSystemInfo_PatientClinician2");

                    b.Navigation("KeyPerson1UserID_FKNavigation");

                    b.Navigation("KeyPerson2UserID_FKNavigation");

                    b.Navigation("PrimaryDoctorUserID_FKNavigation");

                    b.Navigation("SecondaryDoctorUserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Chat", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "CreatedBy_FKNavigation")
                        .WithMany("Chat")
                        .HasForeignKey("CreatedBy_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Chat_Users");

                    b.HasOne("C4WX1.Database.Models.Chat", "ParentID_FKNavigation")
                        .WithMany("InverseParentID_FKNavigation")
                        .HasForeignKey("ParentID_FK")
                        .HasConstraintName("FK_Chat_Chat1");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("Chat")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_Chat_Patient1");

                    b.Navigation("CreatedBy_FKNavigation");

                    b.Navigation("ParentID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Code", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CodeType", "CodeTypeId_FKNavigation")
                        .WithMany("Code")
                        .HasForeignKey("CodeTypeId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Code_CodeType");

                    b.HasOne("C4WX1.Database.Models.Code", "MedicationGroupID_FKNavigation")
                        .WithMany("InverseMedicationGroupID_FKNavigation")
                        .HasForeignKey("MedicationGroupID_FK")
                        .HasConstraintName("FK_Code_Code");

                    b.Navigation("CodeTypeId_FKNavigation");

                    b.Navigation("MedicationGroupID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.DischargeSummaryReportAttachment", b =>
                {
                    b.HasOne("C4WX1.Database.Models.DischargeSummaryReport", "DischargeSummaryReportID_FKNavigation")
                        .WithMany("DischargeSummaryReportAttachment")
                        .HasForeignKey("DischargeSummaryReportID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_DischargeSummaryReportAttachment_DischargeSummaryReport");

                    b.Navigation("DischargeSummaryReportID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Disease", b =>
                {
                    b.HasOne("C4WX1.Database.Models.SystemForDisease", "SystemID_FKNavigation")
                        .WithMany("Disease")
                        .HasForeignKey("SystemID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Disease_SystemForDisease");

                    b.Navigation("SystemID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.DiseaseInfo", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("DiseaseInfo")
                        .HasForeignKey("DiseaseID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_DiseaseInfo_Disease");

                    b.Navigation("DiseaseID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.DiseaseSubInfo", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("DiseaseSubInfo")
                        .HasForeignKey("DiseaseID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_DiseaseSubInfo_Disease");

                    b.Navigation("DiseaseID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.DiseaseVitalSignType", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("DiseaseVitalSignType")
                        .HasForeignKey("DiseaseID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_DiseaseVitalSignType_Disease");

                    b.HasOne("C4WX1.Database.Models.VitalSignTypes", "VitalSignTypeID_FKNavigation")
                        .WithMany("DiseaseVitalSignType")
                        .HasForeignKey("VitalSignTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_DiseaseVitalSignType_VitalSignTypes");

                    b.Navigation("DiseaseID_FKNavigation");

                    b.Navigation("VitalSignTypeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Enquiry", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "CareManagerAssignedID_FKNavigation")
                        .WithMany("Enquiry")
                        .HasForeignKey("CareManagerAssignedID_FK")
                        .HasConstraintName("FK_Enquiry_Users");

                    b.HasOne("C4WX1.Database.Models.Code", "CaregiverAtHomeID_FKNavigation")
                        .WithMany("EnquiryCaregiverAtHomeID_FKNavigation")
                        .HasForeignKey("CaregiverAtHomeID_FK")
                        .HasConstraintName("FK_Enquiry_CaregiverAtHome");

                    b.HasOne("C4WX1.Database.Models.Code", "EnquirySourceID_FKNavigation")
                        .WithMany("EnquiryEnquirySourceID_FKNavigation")
                        .HasForeignKey("EnquirySourceID_FK")
                        .HasConstraintName("FK_Enquiry_Source");

                    b.HasOne("C4WX1.Database.Models.Code", "GenderID_FKNavigation")
                        .WithMany("EnquiryGenderID_FKNavigation")
                        .HasForeignKey("GenderID_FK")
                        .HasConstraintName("FK_Enquiry_Gender");

                    b.HasOne("C4WX1.Database.Models.Code", "PreferredLanguageID_FKNavigation")
                        .WithMany("EnquiryPreferredLanguageID_FKNavigation")
                        .HasForeignKey("PreferredLanguageID_FK")
                        .HasConstraintName("FK_Enquiry_PreferredLanguage");

                    b.HasOne("C4WX1.Database.Models.Code", "RaceID_FKNavigation")
                        .WithMany("EnquiryRaceID_FKNavigation")
                        .HasForeignKey("RaceID_FK")
                        .HasConstraintName("FK_Enquiry_Race");

                    b.HasOne("C4WX1.Database.Models.Code", "ServicesRequiredID_FKNavigation")
                        .WithMany("EnquiryServicesRequiredID_FKNavigation")
                        .HasForeignKey("ServicesRequiredID_FK")
                        .HasConstraintName("FK_Enquiry_ServicesRequired");

                    b.HasOne("C4WX1.Database.Models.Code", "UserOrganizationID_FKNavigation")
                        .WithMany("EnquiryUserOrganizationID_FKNavigation")
                        .HasForeignKey("UserOrganizationID_FK")
                        .HasConstraintName("FK_Enquiry_Organization");

                    b.Navigation("CareManagerAssignedID_FKNavigation");

                    b.Navigation("CaregiverAtHomeID_FKNavigation");

                    b.Navigation("EnquirySourceID_FKNavigation");

                    b.Navigation("GenderID_FKNavigation");

                    b.Navigation("PreferredLanguageID_FKNavigation");

                    b.Navigation("RaceID_FKNavigation");

                    b.Navigation("ServicesRequiredID_FKNavigation");

                    b.Navigation("UserOrganizationID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryAttachment", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Enquiry", "EnquiryID_FKNavigation")
                        .WithMany("EnquiryAttachment")
                        .HasForeignKey("EnquiryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EnquiryAttachment_Enquiry");

                    b.Navigation("EnquiryID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryConfig", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "EscalatingPersonID_FKNavigation")
                        .WithMany("EnquiryConfigEscalatingPersonID_FKNavigation")
                        .HasForeignKey("EscalatingPersonID_FK")
                        .HasConstraintName("FK_EnquiryConfig_Users_EscPersonID");

                    b.HasOne("C4WX1.Database.Models.Users", "SCMID_FKNavigation")
                        .WithMany("EnquiryConfigSCMID_FKNavigation")
                        .HasForeignKey("SCMID_FK")
                        .HasConstraintName("FK_EnquiryConfig_Users_SCMID");

                    b.Navigation("EscalatingPersonID_FKNavigation");

                    b.Navigation("SCMID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryEscPerson", b =>
                {
                    b.HasOne("C4WX1.Database.Models.EnquiryConfig", "EnquiryConfig")
                        .WithMany("EnquiryEscPerson")
                        .HasForeignKey("EnquiryConfigID")
                        .IsRequired()
                        .HasConstraintName("FK_EnquiryEscPerson_EnquiryConfig");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("EnquiryEscPerson")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EnquiryEscPerson_Users");

                    b.Navigation("EnquiryConfig");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryLanguage", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("EnquiryLanguage")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EnquiryLanguage_Code");

                    b.HasOne("C4WX1.Database.Models.Enquiry", "EnquiryID_FKNavigation")
                        .WithMany("EnquiryLanguage")
                        .HasForeignKey("EnquiryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EnquiryLanguage_Enquiry");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("EnquiryID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquirySCM", b =>
                {
                    b.HasOne("C4WX1.Database.Models.EnquiryConfig", "EnquiryConfigID_FKNavigation")
                        .WithMany("EnquirySCM")
                        .HasForeignKey("EnquiryConfigID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EnquirySCM_EnquiryConfig");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("EnquirySCM")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EnquirySCM_Users");

                    b.Navigation("EnquiryConfigID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryServicesRequired", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("EnquiryServicesRequired")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EnquiryServicesRequired_Code");

                    b.HasOne("C4WX1.Database.Models.Enquiry", "EnquiryID_FKNavigation")
                        .WithMany("EnquiryServicesRequired")
                        .HasForeignKey("EnquiryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EnquiryServicesRequired_Enquiry");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("EnquiryID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Event", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "CreatedBy_FKNavigation")
                        .WithMany("Event")
                        .HasForeignKey("CreatedBy_FK")
                        .HasConstraintName("FK_Event_Users");

                    b.HasOne("C4WX1.Database.Models.Code", "EventTypeID_FKNavigation")
                        .WithMany("EventEventTypeID_FKNavigation")
                        .HasForeignKey("EventTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Code1");

                    b.HasOne("C4WX1.Database.Models.Code", "PeriodTypeID_FKNavigation")
                        .WithMany("EventPeriodTypeID_FKNavigation")
                        .HasForeignKey("PeriodTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Event_Code2");

                    b.HasOne("C4WX1.Database.Models.UserCategory", "UserCategory_FKNavigation")
                        .WithMany("Event")
                        .HasForeignKey("UserCategory_FK")
                        .HasConstraintName("FK_Event_UserCategory");

                    b.Navigation("CreatedBy_FKNavigation");

                    b.Navigation("EventTypeID_FKNavigation");

                    b.Navigation("PeriodTypeID_FKNavigation");

                    b.Navigation("UserCategory_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EventUser", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Event", "EventID_FKNavigation")
                        .WithMany("EventUser")
                        .HasForeignKey("EventID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EventUser_Event");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("EventUser")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EventUser_Users");

                    b.Navigation("EventID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EventUserLog", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Event", "EventID_FKNavigation")
                        .WithMany("EventUserLog")
                        .HasForeignKey("EventID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EventUserLog_Event");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("EventUserLog")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_EventUserLog_Users");

                    b.Navigation("EventID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ExternalDoctor", b =>
                {
                    b.HasOne("C4WX1.Database.Models.UserType", "ClinicianTypeID_FKNavigation")
                        .WithMany("ExternalDoctor")
                        .HasForeignKey("ClinicianTypeID_FK")
                        .HasConstraintName("FK_ExternalDoctor_UserType");

                    b.Navigation("ClinicianTypeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Facility", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "OrganizationID_FKNavigation")
                        .WithMany("Facility")
                        .HasForeignKey("OrganizationID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Facility_Code");

                    b.Navigation("OrganizationID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.GroupRole", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Group", "GroupId_FKNavigation")
                        .WithMany("GroupRole")
                        .HasForeignKey("GroupId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_GroupRole_Group");

                    b.HasOne("C4WX1.Database.Models.Role", "RoleId_FKNavigation")
                        .WithMany("GroupRole")
                        .HasForeignKey("RoleId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_GroupRole_Role");

                    b.Navigation("GroupId_FKNavigation");

                    b.Navigation("RoleId_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ICAWoundCare", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("ICAWoundCare")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ICAWoundCare_Code");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("ICAWoundCare")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ICAWoundCare_InitialCareAssessment");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.InitialCareAssessment", b =>
                {
                    b.HasOne("C4WX1.Database.Models.PatientAdditionalInfo", "PatientAdditionalInfoID_FKNavigation")
                        .WithMany("InitialCareAssessment")
                        .HasForeignKey("PatientAdditionalInfoID_FK")
                        .HasConstraintName("FK_InitialCareAssessment_PatientAdditionalInfo");

                    b.HasOne("C4WX1.Database.Models.PatientMBI", "PatientMBIID_FKNavigation")
                        .WithMany("InitialCareAssessment")
                        .HasForeignKey("PatientMBIID_FK")
                        .HasConstraintName("FK_InitialCareAssessment_PatientMBI");

                    b.HasOne("C4WX1.Database.Models.PatientMFS", "PatientMFSID_FKNavigation")
                        .WithMany("InitialCareAssessment")
                        .HasForeignKey("PatientMFSID_FK")
                        .HasConstraintName("FK_InitialCareAssessment_PatientMFS");

                    b.HasOne("C4WX1.Database.Models.PatientMedication", "PatientMedicationID_FKNavigation")
                        .WithMany("InitialCareAssessment")
                        .HasForeignKey("PatientMedicationID_FK")
                        .HasConstraintName("FK_InitialCareAssessment_PatientMedication");

                    b.HasOne("C4WX1.Database.Models.PatientNutrition", "PatientNutritionID_FKNavigation")
                        .WithMany("InitialCareAssessment")
                        .HasForeignKey("PatientNutritionID_FK")
                        .HasConstraintName("FK_InitialCareAssessment_PatientNutrition");

                    b.HasOne("C4WX1.Database.Models.PatientProfile", "PatientProfileID_FKNavigation")
                        .WithMany("InitialCareAssessment")
                        .HasForeignKey("PatientProfileID_FK")
                        .HasConstraintName("FK_InitialCareAssessment_PatientProfile");

                    b.HasOne("C4WX1.Database.Models.PatientRAF", "PatientRAFID_FKNavigation")
                        .WithMany("InitialCareAssessment")
                        .HasForeignKey("PatientRAFID_FK")
                        .HasConstraintName("FK_InitialCareAssessment_PatientRAF");

                    b.HasOne("C4WX1.Database.Models.PatientReferral", "PatientReferralID_FKNavigation")
                        .WithMany("InitialCareAssessment")
                        .HasForeignKey("PatientReferralID_FK")
                        .HasConstraintName("FK_InitialCareAssessment_PatientReferral");

                    b.HasOne("C4WX1.Database.Models.VitalSigns", "VitalSignID_FKNavigation")
                        .WithMany("InitialCareAssessment")
                        .HasForeignKey("VitalSignID_FK")
                        .HasConstraintName("FK_InitialCareAssessment_VitalSigns");

                    b.Navigation("PatientAdditionalInfoID_FKNavigation");

                    b.Navigation("PatientMBIID_FKNavigation");

                    b.Navigation("PatientMFSID_FKNavigation");

                    b.Navigation("PatientMedicationID_FKNavigation");

                    b.Navigation("PatientNutritionID_FKNavigation");

                    b.Navigation("PatientProfileID_FKNavigation");

                    b.Navigation("PatientRAFID_FKNavigation");

                    b.Navigation("PatientReferralID_FKNavigation");

                    b.Navigation("VitalSignID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.InitialCareAssessmentAttachment", b =>
                {
                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("InitialCareAssessmentAttachment")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_InitialCareAssessmentAttachment_InitialCareAssessment");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.InitialCareAssessmentSpecialInstruction", b =>
                {
                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("InitialCareAssessmentSpecialInstruction")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_InitialCareAssessmentSpecialInstruction_InitialCareAssessment");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Intervention", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("Intervention")
                        .HasForeignKey("DiseaseID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Intervention_Disease");

                    b.Navigation("DiseaseID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Item", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CategoryID_FKNavigation")
                        .WithMany("ItemCategoryID_FKNavigation")
                        .HasForeignKey("CategoryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Item_Code");

                    b.HasOne("C4WX1.Database.Models.Code", "ItemUnitID_FKNavigation")
                        .WithMany("ItemItemUnitID_FKNavigation")
                        .HasForeignKey("ItemUnitID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Item_Code1");

                    b.Navigation("CategoryID_FKNavigation");

                    b.Navigation("ItemUnitID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ItemStock", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Item", "ItemID_FKNavigation")
                        .WithMany("ItemStock")
                        .HasForeignKey("ItemID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ItemStock_Item");

                    b.Navigation("ItemID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.MailSettingsMsgToUserType", b =>
                {
                    b.HasOne("C4WX1.Database.Models.MailSettings", "MailSetting_FKNavigation")
                        .WithMany("MailSettingsMsgToUserType")
                        .HasForeignKey("MailSetting_FK")
                        .IsRequired()
                        .HasConstraintName("FK_MailSettingsMsgToUserType_id");

                    b.HasOne("C4WX1.Database.Models.UserType", "UserTypeID_FKNavigation")
                        .WithMany("MailSettingsMsgToUserType")
                        .HasForeignKey("UserTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_MailSettingsMsgToUserType_UserType");

                    b.Navigation("MailSetting_FKNavigation");

                    b.Navigation("UserTypeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.MedicationVitalSignType", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "MedicationID_FKNavigation")
                        .WithMany("MedicationVitalSignType")
                        .HasForeignKey("MedicationID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_MedicationVitalSignType_Code");

                    b.HasOne("C4WX1.Database.Models.VitalSignTypes", "VitalSignTypeID_FKNavigation")
                        .WithMany("MedicationVitalSignType")
                        .HasForeignKey("VitalSignTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_MedicationVitalSignType_VitalSignTypes");

                    b.Navigation("MedicationID_FKNavigation");

                    b.Navigation("VitalSignTypeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.MobileAppVersioning", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "CreatedBy_FKNavigation")
                        .WithMany("MobileAppVersioningCreatedBy_FKNavigation")
                        .HasForeignKey("CreatedBy_FK")
                        .HasConstraintName("FK_MobileAppVersioning_User_CreatedBy");

                    b.HasOne("C4WX1.Database.Models.Users", "ModifiedBy_FKNavigation")
                        .WithMany("MobileAppVersioningModifiedBy_FKNavigation")
                        .HasForeignKey("ModifiedBy_FK")
                        .HasConstraintName("FK_MobileAppVersioning_User_ModifiedBy");

                    b.Navigation("CreatedBy_FKNavigation");

                    b.Navigation("ModifiedBy_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.MultiDisciplinaryMeeting", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("MultiDisciplinaryMeeting")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_MultiDisciplinaryMeeting_Patient");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.MultiDisciplinaryMeetingDetail", b =>
                {
                    b.HasOne("C4WX1.Database.Models.MultiDisciplinaryMeeting", "MultiDisciplinaryMeetingID_FKNavigation")
                        .WithMany("MultiDisciplinaryMeetingDetail")
                        .HasForeignKey("MultiDisciplinaryMeetingID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_MultiDisciplinaryMeetingDetail_MultiDisciplinaryMeeting");

                    b.Navigation("MultiDisciplinaryMeetingID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationChat", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Chat", "ChatID_FKNavigation")
                        .WithMany("NotificationChat")
                        .HasForeignKey("ChatID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationChat_Chat");

                    b.HasOne("C4WX1.Database.Models.Notifications", "NotificationId_FKNavigation")
                        .WithMany("NotificationChat")
                        .HasForeignKey("NotificationId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationChat_Notifications");

                    b.Navigation("ChatID_FKNavigation");

                    b.Navigation("NotificationId_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationEvent", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Event", "EventID_FKNavigation")
                        .WithMany("NotificationEvent")
                        .HasForeignKey("EventID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationEvent_Event");

                    b.HasOne("C4WX1.Database.Models.Notifications", "NotificationId_FKNavigation")
                        .WithMany("NotificationEvent")
                        .HasForeignKey("NotificationId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationEvent_Notifications");

                    b.Navigation("EventID_FKNavigation");

                    b.Navigation("NotificationId_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationMessageTemplates", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Types", "notificationgroupCodeNavigation")
                        .WithMany("NotificationMessageTemplates")
                        .HasForeignKey("notificationgroupCode")
                        .IsRequired()
                        .HasConstraintName("fk_NotificationMessageTemplates_notificationgroupCode");

                    b.Navigation("notificationgroupCodeNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationTask", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Notifications", "NotificationId_FKNavigation")
                        .WithMany("NotificationTask")
                        .HasForeignKey("NotificationId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationTask_Notifications");

                    b.HasOne("C4WX1.Database.Models.Task", "TaskID_FKNavigation")
                        .WithMany("NotificationTask")
                        .HasForeignKey("TaskID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationTask_Task");

                    b.Navigation("NotificationId_FKNavigation");

                    b.Navigation("TaskID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.NotificationVitalSignDetails", b =>
                {
                    b.HasOne("C4WX1.Database.Models.VitalSignDetails", "VitalSignDetail")
                        .WithMany("NotificationVitalSignDetails")
                        .HasForeignKey("VitalSignDetailId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationVitalSignDetails_VitalSignDetails");

                    b.HasOne("C4WX1.Database.Models.Notifications", "notification")
                        .WithMany("NotificationVitalSignDetails")
                        .HasForeignKey("notificationId")
                        .IsRequired()
                        .HasConstraintName("fk_NotificationVitalSignDetails_notificationId");

                    b.Navigation("VitalSignDetail");

                    b.Navigation("notification");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Notifications", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Facility", "FacilityID_FKNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("FacilityID_FK")
                        .HasConstraintName("FK_Notifications_Facility");

                    b.HasOne("C4WX1.Database.Models.Types", "notificationTypeCodeNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("notificationTypeCode")
                        .IsRequired()
                        .HasConstraintName("fk_Notifications_notificationTypeCode");

                    b.HasOne("C4WX1.Database.Models.Users", "user")
                        .WithMany("Notifications")
                        .HasForeignKey("userId")
                        .IsRequired()
                        .HasConstraintName("fk_Notifications_userId");

                    b.Navigation("FacilityID_FKNavigation");

                    b.Navigation("notificationTypeCodeNavigation");

                    b.Navigation("user");
                });

            modelBuilder.Entity("C4WX1.Database.Models.NutritionTask", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "ActionTypeID_FKNavigation")
                        .WithMany("NutritionTask")
                        .HasForeignKey("ActionTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_NutritionTask_Code");

                    b.HasOne("C4WX1.Database.Models.NutritionTaskReference", "AmountReferenceID_FKNavigation")
                        .WithMany("NutritionTaskAmountReferenceID_FKNavigation")
                        .HasForeignKey("AmountReferenceID_FK")
                        .HasConstraintName("FK_NutritionTask_NutritionTaskReference2");

                    b.HasOne("C4WX1.Database.Models.NutritionTaskReference", "ColorReferenceID_FKNavigation")
                        .WithMany("NutritionTaskColorReferenceID_FKNavigation")
                        .HasForeignKey("ColorReferenceID_FK")
                        .HasConstraintName("FK_NutritionTask_NutritionTaskReference3");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("NutritionTask")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_NutritionTask_Patient");

                    b.HasOne("C4WX1.Database.Models.NutritionTaskReference", "TypeReferenceID_FKNavigation")
                        .WithMany("NutritionTaskTypeReferenceID_FKNavigation")
                        .HasForeignKey("TypeReferenceID_FK")
                        .HasConstraintName("FK_NutritionTask_NutritionTaskReference1");

                    b.Navigation("ActionTypeID_FKNavigation");

                    b.Navigation("AmountReferenceID_FKNavigation");

                    b.Navigation("ColorReferenceID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("TypeReferenceID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.NutritionTaskReference", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeId_FKNavigation")
                        .WithMany("NutritionTaskReference")
                        .HasForeignKey("CodeId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_NutritionTaskReference_Code");

                    b.Navigation("CodeId_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Patient", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "BloodTypeID_FKNavigation")
                        .WithMany("PatientBloodTypeID_FKNavigation")
                        .HasForeignKey("BloodTypeID_FK")
                        .HasConstraintName("FK_Patient_Code2");

                    b.HasOne("C4WX1.Database.Models.Code", "GenderID_FKNavigation")
                        .WithMany("PatientGenderID_FKNavigation")
                        .HasForeignKey("GenderID_FK")
                        .HasConstraintName("FK_Patient_Code1");

                    b.HasOne("C4WX1.Database.Models.Code", "InvoiceModeID_FKNavigation")
                        .WithMany("PatientInvoiceModeID_FKNavigation")
                        .HasForeignKey("InvoiceModeID_FK");

                    b.HasOne("C4WX1.Database.Models.Code", "MaritalStatusID_FKNavigation")
                        .WithMany("PatientMaritalStatusID_FKNavigation")
                        .HasForeignKey("MaritalStatusID_FK")
                        .HasConstraintName("FK_Patient_Code4");

                    b.HasOne("C4WX1.Database.Models.PatientAdditionalInfo", "PatientAdditionalInfoID_FKNavigation")
                        .WithMany("Patient")
                        .HasForeignKey("PatientAdditionalInfoID_FK")
                        .HasConstraintName("FK_Patient_PatientAdditionalInfo");

                    b.HasOne("C4WX1.Database.Models.PatientMedication", "PatientMedicationID_FKNavigation")
                        .WithMany("Patient")
                        .HasForeignKey("PatientMedicationID_FK")
                        .HasConstraintName("FK_Patient_PatientMedication");

                    b.HasOne("C4WX1.Database.Models.PatientProfile", "PatientProfileID_FKNavigation")
                        .WithMany("Patient")
                        .HasForeignKey("PatientProfileID_FK")
                        .HasConstraintName("FK_Patient_PatientProfile");

                    b.HasOne("C4WX1.Database.Models.Code", "PatientReferralByID_FKNavigation")
                        .WithMany("PatientPatientReferralByID_FKNavigation")
                        .HasForeignKey("PatientReferralByID_FK")
                        .HasConstraintName("FK_Patient_Code7");

                    b.HasOne("C4WX1.Database.Models.PatientReferral", "PatientReferralID_FKNavigation")
                        .WithMany("Patient")
                        .HasForeignKey("PatientReferralID_FK")
                        .HasConstraintName("FK_Patient_PatientReferral");

                    b.HasOne("C4WX1.Database.Models.Code", "PatientTypeID_FKNavigation")
                        .WithMany("PatientPatientTypeID_FKNavigation")
                        .HasForeignKey("PatientTypeID_FK")
                        .HasConstraintName("FK_Patient_Code");

                    b.HasOne("C4WX1.Database.Models.Code", "RaceID_FKNavigation")
                        .WithMany("PatientRaceID_FKNavigation")
                        .HasForeignKey("RaceID_FK")
                        .HasConstraintName("FK_Patient_Code6");

                    b.HasOne("C4WX1.Database.Models.Code", "ReligionID_FKNavigation")
                        .WithMany("PatientReligionID_FKNavigation")
                        .HasForeignKey("ReligionID_FK")
                        .HasConstraintName("FK_Patient_Code5");

                    b.HasOne("C4WX1.Database.Models.Code", "ResidentTypeID_FKNavigation")
                        .WithMany("PatientResidentTypeID_FKNavigation")
                        .HasForeignKey("ResidentTypeID_FK")
                        .HasConstraintName("FK_Patient_Code3");

                    b.Navigation("BloodTypeID_FKNavigation");

                    b.Navigation("GenderID_FKNavigation");

                    b.Navigation("InvoiceModeID_FKNavigation");

                    b.Navigation("MaritalStatusID_FKNavigation");

                    b.Navigation("PatientAdditionalInfoID_FKNavigation");

                    b.Navigation("PatientMedicationID_FKNavigation");

                    b.Navigation("PatientProfileID_FKNavigation");

                    b.Navigation("PatientReferralByID_FKNavigation");

                    b.Navigation("PatientReferralID_FKNavigation");

                    b.Navigation("PatientTypeID_FKNavigation");

                    b.Navigation("RaceID_FKNavigation");

                    b.Navigation("ReligionID_FKNavigation");

                    b.Navigation("ResidentTypeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAMT", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CareReport", "CareReportID_FKNavigation")
                        .WithMany("PatientAMT")
                        .HasForeignKey("CareReportID_FK")
                        .HasConstraintName("FK_PatientAMT_CareReport");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("PatientAMT")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_PatientAMT_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientAMT")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientAMT_Patient");

                    b.HasOne("C4WX1.Database.Models.VitalSignDetails", "VitalSignDetailId_FKNavigation")
                        .WithMany("PatientAMT")
                        .HasForeignKey("VitalSignDetailId_FK")
                        .HasConstraintName("FK_PatientAMT_VitalSignDetails");

                    b.Navigation("CareReportID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("VitalSignDetailId_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAMTAnswer", b =>
                {
                    b.HasOne("C4WX1.Database.Models.AMTQuestion", "AMTQuestionID_FKNavigation")
                        .WithMany("PatientAMTAnswer")
                        .HasForeignKey("AMTQuestionID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientAMTAnswer_AMTQuestion");

                    b.HasOne("C4WX1.Database.Models.PatientAMT", "PatientAMTID_FKNavigation")
                        .WithMany("PatientAMTAnswer")
                        .HasForeignKey("PatientAMTID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientAMTAnswer_PatientAMT");

                    b.Navigation("AMTQuestionID_FKNavigation");

                    b.Navigation("PatientAMTID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAccessLine", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CareReport", "CareReportID_FKNavigation")
                        .WithMany("PatientAccessLine")
                        .HasForeignKey("CareReportID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientAccessLine_CareReport");

                    b.Navigation("CareReportID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAttachment", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientAttachment")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientAttachment_Patient");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientBradenScale", b =>
                {
                    b.HasOne("C4WX1.Database.Models.VitalSignDetails", "VitalSignDetailID_FKNavigation")
                        .WithMany("PatientBradenScale")
                        .HasForeignKey("VitalSignDetailID_FK")
                        .HasConstraintName("FK_PatientBradenScale_VitalSignDetails");

                    b.Navigation("VitalSignDetailID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientClinician", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("PatientClinician")
                        .HasForeignKey("DiseaseID_FK")
                        .HasConstraintName("FK_PatientClinician_Disease");

                    b.HasOne("C4WX1.Database.Models.DiseaseSubInfo", "DiseaseSubInfoID_FKNavigation")
                        .WithMany("PatientClinician")
                        .HasForeignKey("DiseaseSubInfoID_FK")
                        .HasConstraintName("FK_PatientClinician_DiseaseSubInfo");

                    b.HasOne("C4WX1.Database.Models.ExternalDoctor", "ExternalDoctorID_FKNavigation")
                        .WithMany("PatientClinician")
                        .HasForeignKey("ExternalDoctorID_FK")
                        .HasConstraintName("FK_PatientClinician_ExternalDoctor");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("PatientClinician")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_PatientClinician_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientClinician")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientClinician_Patient");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("PatientClinician")
                        .HasForeignKey("UserID_FK")
                        .HasConstraintName("FK_PatientClinician_Users");

                    b.Navigation("DiseaseID_FKNavigation");

                    b.Navigation("DiseaseSubInfoID_FKNavigation");

                    b.Navigation("ExternalDoctorID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientDrugAllergy", b =>
                {
                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("PatientDrugAllergy")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_PatientDrugAllery_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.Code", "MedicationID_FKNavigation")
                        .WithMany("PatientDrugAllergyMedicationID_FKNavigation")
                        .HasForeignKey("MedicationID_FK")
                        .HasConstraintName("FK_PatientDrugAllergy_Code1");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientDrugAllergy")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientDrugAllery_Patient");

                    b.HasOne("C4WX1.Database.Models.Code", "ReactionID_FKNavigation")
                        .WithMany("PatientDrugAllergyReactionID_FKNavigation")
                        .HasForeignKey("ReactionID_FK")
                        .HasConstraintName("FK_PatientDrugAllergy_Code");

                    b.HasOne("C4WX1.Database.Models.PatientDrugAllergy", "ReferID_FKNavigation")
                        .WithMany("InverseReferID_FKNavigation")
                        .HasForeignKey("ReferID_FK")
                        .HasConstraintName("FK_PatientDrugAllergy_PatientDrugAllergy");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("MedicationID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("ReactionID_FKNavigation");

                    b.Navigation("ReferID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientEBASDEP", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CareReport", "CareReportID_FKNavigation")
                        .WithMany("PatientEBASDEP")
                        .HasForeignKey("CareReportID_FK")
                        .HasConstraintName("FK_PatientEBASDEP_CareReport");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("PatientEBASDEP")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_PatientEBASDEP_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientEBASDEP")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientEBASDEP_Patient");

                    b.HasOne("C4WX1.Database.Models.VitalSignDetails", "VitalSignDetailId_FKNavigation")
                        .WithMany("PatientEBASDEP")
                        .HasForeignKey("VitalSignDetailId_FK")
                        .HasConstraintName("FK_PatientEBASDEP_VitalSignDetails");

                    b.Navigation("CareReportID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("VitalSignDetailId_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientEBASDEPAnswer", b =>
                {
                    b.HasOne("C4WX1.Database.Models.EBASDEPQuestion", "EBASDEPQuestionID_FKNavigation")
                        .WithMany("PatientEBASDEPAnswer")
                        .HasForeignKey("EBASDEPQuestionID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientEBASDEPAnswer_EBASDEPQuestion");

                    b.HasOne("C4WX1.Database.Models.PatientEBASDEP", "PatientEBASDEPID_FKNavigation")
                        .WithMany("PatientEBASDEPAnswer")
                        .HasForeignKey("PatientEBASDEPID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientEBASDEPAnswer_PatientEBASDEP");

                    b.Navigation("EBASDEPQuestionID_FKNavigation");

                    b.Navigation("PatientEBASDEPID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientFacility", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Facility", "FacilityID_FKNavigation")
                        .WithMany("PatientFacility")
                        .HasForeignKey("FacilityID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientFacility_Facility");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientFacility")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientFacility_Patient");

                    b.Navigation("FacilityID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientFamilyHistory", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("PatientFamilyHistory")
                        .HasForeignKey("DiseaseID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientFamilyHistory_Disease");

                    b.HasOne("C4WX1.Database.Models.DiseaseSubInfo", "DiseaseSubInfoID_FKNavigation")
                        .WithMany("PatientFamilyHistory")
                        .HasForeignKey("DiseaseSubInfoID_FK")
                        .HasConstraintName("FK_PatientFamilyHistory_DiseaseSubInfo");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("PatientFamilyHistory")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_PatientFamilyHistory_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientFamilyHistory")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientFamilyHistory_Patient");

                    b.Navigation("DiseaseID_FKNavigation");

                    b.Navigation("DiseaseSubInfoID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientGCS", b =>
                {
                    b.HasOne("C4WX1.Database.Models.VitalSignDetails", "VitalSignDetailID_FKNavigation")
                        .WithMany("PatientGCS")
                        .HasForeignKey("VitalSignDetailID_FK")
                        .HasConstraintName("FK_PatientGCS_VitalSignDetails");

                    b.Navigation("VitalSignDetailID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientImmunisation", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientImmunisation")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientImmunisation_Patient");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientLanguage", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("PatientLanguage")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientLanguage_Code");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientLanguage")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientLanguage_Patient");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMBI", b =>
                {
                    b.HasOne("C4WX1.Database.Models.VitalSignDetails", "VitalSignDetailID_FKNavigation")
                        .WithMany("PatientMBI")
                        .HasForeignKey("VitalSignDetailID_FK")
                        .HasConstraintName("FK_PatientMBI_VitalSignDetails");

                    b.Navigation("VitalSignDetailID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMFS", b =>
                {
                    b.HasOne("C4WX1.Database.Models.VitalSignDetails", "VitalSignDetailID_FKNavigation")
                        .WithMany("PatientMFS")
                        .HasForeignKey("VitalSignDetailID_FK")
                        .HasConstraintName("FK_PatientMFS_VitalSignDetails");

                    b.Navigation("VitalSignDetailID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMMSE", b =>
                {
                    b.HasOne("C4WX1.Database.Models.VitalSignDetails", "VitalSignDetailID_FKNavigation")
                        .WithMany("PatientMMSE")
                        .HasForeignKey("VitalSignDetailID_FK")
                        .HasConstraintName("FK_PatientMMSE_VitalSignDetails");

                    b.Navigation("VitalSignDetailID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedicalHistory", b =>
                {
                    b.HasOne("C4WX1.Database.Models.PatientClinician", "ClinicianID_FKNavigation")
                        .WithMany("PatientMedicalHistory")
                        .HasForeignKey("ClinicianID_FK")
                        .HasConstraintName("FK_PatientMedicalHistory_PatientClinician");

                    b.HasOne("C4WX1.Database.Models.Code", "MedicalStatusID_FKNavigation")
                        .WithMany("PatientMedicalHistory")
                        .HasForeignKey("MedicalStatusID_FK")
                        .HasConstraintName("FK_PatientMedicalHistory_Status");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientMedicalHistory")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientMedicalHistory_Patient");

                    b.Navigation("ClinicianID_FKNavigation");

                    b.Navigation("MedicalStatusID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedicationConsume", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "AcutePRNIndicationID_FKNavigation")
                        .WithMany("PatientMedicationConsumeAcutePRNIndicationID_FKNavigation")
                        .HasForeignKey("AcutePRNIndicationID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_Code3");

                    b.HasOne("C4WX1.Database.Models.Disease", "ChronicDiseaseID_FKNavigation")
                        .WithMany("PatientMedicationConsume")
                        .HasForeignKey("ChronicDiseaseID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_Disease");

                    b.HasOne("C4WX1.Database.Models.DiseaseSubInfo", "ChronicDiseaseSubInfoID_FKNavigation")
                        .WithMany("PatientMedicationConsume")
                        .HasForeignKey("ChronicDiseaseSubInfoID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_DiseaseSubInfo");

                    b.HasOne("C4WX1.Database.Models.Code", "DosageID_FKNavigation")
                        .WithMany("PatientMedicationConsumeDosageID_FKNavigation")
                        .HasForeignKey("DosageID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_Code1");

                    b.HasOne("C4WX1.Database.Models.Code", "FrequencyID_FKNavigation")
                        .WithMany("PatientMedicationConsumeFrequencyID_FKNavigation")
                        .HasForeignKey("FrequencyID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_Code2");

                    b.HasOne("C4WX1.Database.Models.Code", "InstructedBy2ID_FKNavigation")
                        .WithMany("PatientMedicationConsumeInstructedBy2ID_FKNavigation")
                        .HasForeignKey("InstructedBy2ID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_InstructedBy2ID_FK");

                    b.HasOne("C4WX1.Database.Models.Code", "InstructedByID_FKNavigation")
                        .WithMany("PatientMedicationConsumeInstructedByID_FKNavigation")
                        .HasForeignKey("InstructedByID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_InstructedByID_FK");

                    b.HasOne("C4WX1.Database.Models.Code", "MedicationID_FKNavigation")
                        .WithMany("PatientMedicationConsumeMedicationID_FKNavigation")
                        .HasForeignKey("MedicationID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_Code4");

                    b.HasOne("C4WX1.Database.Models.PatientMedication", "PatientMedicationID_FKNavigation")
                        .WithMany("PatientMedicationConsume")
                        .HasForeignKey("PatientMedicationID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientMedicationConsume_PatientMedication");

                    b.HasOne("C4WX1.Database.Models.PatientMedicationConsume", "ReferID_FKNavigation")
                        .WithMany("InverseReferID_FKNavigation")
                        .HasForeignKey("ReferID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_PatientMedicationConsume");

                    b.HasOne("C4WX1.Database.Models.Code", "RouteID_FKNavigation")
                        .WithMany("PatientMedicationConsumeRouteID_FKNavigation")
                        .HasForeignKey("RouteID_FK")
                        .HasConstraintName("FK_PatientMedicationConsume_Code");

                    b.Navigation("AcutePRNIndicationID_FKNavigation");

                    b.Navigation("ChronicDiseaseID_FKNavigation");

                    b.Navigation("ChronicDiseaseSubInfoID_FKNavigation");

                    b.Navigation("DosageID_FKNavigation");

                    b.Navigation("FrequencyID_FKNavigation");

                    b.Navigation("InstructedBy2ID_FKNavigation");

                    b.Navigation("InstructedByID_FKNavigation");

                    b.Navigation("MedicationID_FKNavigation");

                    b.Navigation("PatientMedicationID_FKNavigation");

                    b.Navigation("ReferID_FKNavigation");

                    b.Navigation("RouteID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedicationConsumeAttachment", b =>
                {
                    b.HasOne("C4WX1.Database.Models.PatientMedicationConsume", "PatientMedicationConsumeID_FKNavigation")
                        .WithMany("PatientMedicationConsumeAttachment")
                        .HasForeignKey("PatientMedicationConsumeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientMedicationConsumeAttachment_PatientMedicationConsume");

                    b.Navigation("PatientMedicationConsumeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedicationSupply", b =>
                {
                    b.HasOne("C4WX1.Database.Models.PatientMedication", "PatientMedicationID_FKNavigation")
                        .WithMany("PatientMedicationSupply")
                        .HasForeignKey("PatientMedicationID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientMedicationSupply_PatientMedication");

                    b.HasOne("C4WX1.Database.Models.Code", "SupplyID_FKNavigation")
                        .WithMany("PatientMedicationSupply")
                        .HasForeignKey("SupplyID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientMedicationSupply_Code");

                    b.Navigation("PatientMedicationID_FKNavigation");

                    b.Navigation("SupplyID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientOtherAllergy", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "DescriptionID_FKNavigation")
                        .WithMany("PatientOtherAllergyDescriptionID_FKNavigation")
                        .HasForeignKey("DescriptionID_FK")
                        .HasConstraintName("FK_PatientOtherAllergy_Code1");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("PatientOtherAllergy")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_PatientOtherAllergy_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientOtherAllergy")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientOtherAllergy_Patient");

                    b.HasOne("C4WX1.Database.Models.Code", "ReactionID_FKNavigation")
                        .WithMany("PatientOtherAllergyReactionID_FKNavigation")
                        .HasForeignKey("ReactionID_FK")
                        .HasConstraintName("FK_PatientOtherAllergy_Code");

                    b.HasOne("C4WX1.Database.Models.PatientOtherAllergy", "ReferID_FKNavigation")
                        .WithMany("InverseReferID_FKNavigation")
                        .HasForeignKey("ReferID_FK")
                        .HasConstraintName("FK_PatientOtherAllergy_PatientDrugAllergy");

                    b.Navigation("DescriptionID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("ReactionID_FKNavigation");

                    b.Navigation("ReferID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientPackage", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Package", "PackageID_FKNavigation")
                        .WithMany("PatientPackage")
                        .HasForeignKey("PackageID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPackage_Package");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientPackage")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientPackage_Patient");

                    b.Navigation("PackageID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientProfile", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "BloodTypeID_FKNavigation")
                        .WithMany("PatientProfileBloodTypeID_FKNavigation")
                        .HasForeignKey("BloodTypeID_FK")
                        .HasConstraintName("FK_PatientProfile_Code");

                    b.HasOne("C4WX1.Database.Models.Code", "PatientOrganizationID_FKNavigation")
                        .WithMany("PatientProfilePatientOrganizationID_FKNavigation")
                        .HasForeignKey("PatientOrganizationID_FK")
                        .HasConstraintName("FK_PatientProfile_PatientOrganizationID_FK");

                    b.HasOne("C4WX1.Database.Models.Code", "ReligionID_FKNavigation")
                        .WithMany("PatientProfileReligionID_FKNavigation")
                        .HasForeignKey("ReligionID_FK")
                        .HasConstraintName("FK_PatientProfile_Code1");

                    b.Navigation("BloodTypeID_FKNavigation");

                    b.Navigation("PatientOrganizationID_FKNavigation");

                    b.Navigation("ReligionID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientRAF", b =>
                {
                    b.HasOne("C4WX1.Database.Models.VitalSignDetails", "VitalSignDetailID_FKNavigation")
                        .WithMany("PatientRAF")
                        .HasForeignKey("VitalSignDetailID_FK")
                        .HasConstraintName("FK_PatientRAF_VitalSignDetails");

                    b.Navigation("VitalSignDetailID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientReferral", b =>
                {
                    b.HasOne("C4WX1.Database.Models.PatientClinician", "PrimaryClinicianID_FKNavigation")
                        .WithMany("PatientReferralPrimaryClinicianID_FKNavigation")
                        .HasForeignKey("PrimaryClinicianID_FK")
                        .HasConstraintName("FK_PatientReferral_PatientClinician2");

                    b.HasOne("C4WX1.Database.Models.PatientClinician", "PrimaryNurseID_FKNavigation")
                        .WithMany("PatientReferralPrimaryNurseID_FKNavigation")
                        .HasForeignKey("PrimaryNurseID_FK")
                        .HasConstraintName("FK_PatientReferral_PatientClinician4");

                    b.HasOne("C4WX1.Database.Models.PatientClinician", "SecondaryClinicianID_FKNavigation")
                        .WithMany("PatientReferralSecondaryClinicianID_FKNavigation")
                        .HasForeignKey("SecondaryClinicianID_FK")
                        .HasConstraintName("FK_PatientReferral_PatientClinician3");

                    b.HasOne("C4WX1.Database.Models.PatientClinician", "SecondaryNurseID_FKNavigation")
                        .WithMany("PatientReferralSecondaryNurseID_FKNavigation")
                        .HasForeignKey("SecondaryNurseID_FK")
                        .HasConstraintName("FK_PatientReferral_PatientClinician5");

                    b.Navigation("PrimaryClinicianID_FKNavigation");

                    b.Navigation("PrimaryNurseID_FKNavigation");

                    b.Navigation("SecondaryClinicianID_FKNavigation");

                    b.Navigation("SecondaryNurseID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientReferralService", b =>
                {
                    b.HasOne("C4WX1.Database.Models.PatientReferral", "PatientReferralID_FKNavigation")
                        .WithMany("PatientReferralService")
                        .HasForeignKey("PatientReferralID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientReferralService_PatientReferral");

                    b.HasOne("C4WX1.Database.Models.Code", "ServiceID_FKNavigation")
                        .WithMany("PatientReferralService")
                        .HasForeignKey("ServiceID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientReferralService_Code");

                    b.Navigation("PatientReferralID_FKNavigation");

                    b.Navigation("ServiceID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientSocialSupport", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "GenderID_FKNavigation")
                        .WithMany("PatientSocialSupportGenderID_FKNavigation")
                        .HasForeignKey("GenderID_FK")
                        .HasConstraintName("FK_PatientSocialSupport_Code3");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("PatientSocialSupport")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_PatientSocialSupport_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.Code", "MaritalStatusID_FKNavigation")
                        .WithMany("PatientSocialSupportMaritalStatusID_FKNavigation")
                        .HasForeignKey("MaritalStatusID_FK")
                        .HasConstraintName("FK_PatientSocialSupport_Code");

                    b.HasOne("C4WX1.Database.Models.Code", "NationalityID_FKNavigation")
                        .WithMany("PatientSocialSupportNationalityID_FKNavigation")
                        .HasForeignKey("NationalityID_FK")
                        .HasConstraintName("FK_PatientSocialSupport_Code2");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientSocialSupport")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientSocialSupport_Patient");

                    b.HasOne("C4WX1.Database.Models.Code", "RelationshipID_FKNavigation")
                        .WithMany("PatientSocialSupportRelationshipID_FKNavigation")
                        .HasForeignKey("RelationshipID_FK")
                        .HasConstraintName("FK_PatientSocialSupport_Code1");

                    b.Navigation("GenderID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("MaritalStatusID_FKNavigation");

                    b.Navigation("NationalityID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("RelationshipID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientSpecialIndicator", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("PatientSpecialIndicator")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientSpecialIndicator_Code");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientSpecialIndicator")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientSpecialIndicator_Patient");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWound", b =>
                {
                    b.HasOne("C4WX1.Database.Models.CareReport", "CareReportID_FKNavigation")
                        .WithMany("PatientWound")
                        .HasForeignKey("CareReportID_FK")
                        .HasConstraintName("FK_PatientWound_CareReport");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("PatientWound")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_PatientWound_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientWound")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientWound_Patient");

                    b.HasOne("C4WX1.Database.Models.Code", "WoundStatusID_FKNavigation")
                        .WithMany("PatientWound")
                        .HasForeignKey("WoundStatusID_FK")
                        .HasConstraintName("FK_PatientWound_Code");

                    b.Navigation("CareReportID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("WoundStatusID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundDraft", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("PatientWoundDraft")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_PatientWoundDraft_Patient");

                    b.HasOne("C4WX1.Database.Models.PatientWound", "PatientWoundID_FKNavigation")
                        .WithMany("PatientWoundDraft")
                        .HasForeignKey("PatientWoundID_FK")
                        .HasConstraintName("FK_PatientWoundDraft_PatientWound");

                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "PatientWoundVisitID_FKNavigation")
                        .WithMany("PatientWoundDraft")
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .HasConstraintName("FK_PatientWoundDraft_PatientWoundVisit");

                    b.HasOne("C4WX1.Database.Models.Code", "WoundStatusID_FKNavigation")
                        .WithMany("PatientWoundDraft")
                        .HasForeignKey("WoundStatusID_FK")
                        .HasConstraintName("FK_PatientWoundDraft_Code");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("PatientWoundID_FKNavigation");

                    b.Navigation("PatientWoundVisitID_FKNavigation");

                    b.Navigation("WoundStatusID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundDraftTreatmentList", b =>
                {
                    b.HasOne("C4WX1.Database.Models.PatientWoundDraft", "PatientWoundDraftID_FKNavigation")
                        .WithMany("PatientWoundDraftTreatmentList")
                        .HasForeignKey("PatientWoundDraftID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundDraftTreatmentList_PatientWoundDraft");

                    b.HasOne("C4WX1.Database.Models.TreatmentListItem", "TListItemID_FKNavigation")
                        .WithMany("PatientWoundDraftTreatmentList")
                        .HasForeignKey("TListItemID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundDraftTreatmentList_TreatmentListItem");

                    b.Navigation("PatientWoundDraftID_FKNavigation");

                    b.Navigation("TListItemID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundDraftTreatmentObjectives", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "ObjectiveID_FKNavigation")
                        .WithMany("PatientWoundDraftTreatmentObjectives")
                        .HasForeignKey("ObjectiveID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundDraftTreatmentObjectives_Code");

                    b.HasOne("C4WX1.Database.Models.PatientWoundDraft", "PatientWoundDraftID_FKNavigation")
                        .WithMany("PatientWoundDraftTreatmentObjectives")
                        .HasForeignKey("PatientWoundDraftID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundDraftTreatmentObjectives_PatientWoundDraft");

                    b.Navigation("ObjectiveID_FKNavigation");

                    b.Navigation("PatientWoundDraftID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundReviewBy", b =>
                {
                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "PatientWoundVisitID_FKNavigation")
                        .WithMany("PatientWoundReviewBy")
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .HasConstraintName("FK_PatientWoundReviewBy_PatientWoundVisit");

                    b.HasOne("C4WX1.Database.Models.Users", "UserId_FKNavigation")
                        .WithMany("PatientWoundReviewBy")
                        .HasForeignKey("UserId_FK")
                        .HasConstraintName("FK_PatientWoundReviewBy_Users");

                    b.Navigation("PatientWoundVisitID_FKNavigation");

                    b.Navigation("UserId_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisit", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "AssignedToID_FKNavigation")
                        .WithMany("PatientWoundVisit")
                        .HasForeignKey("AssignedToID_FK")
                        .HasConstraintName("FK_PatientWoundVisit_Users");

                    b.HasOne("C4WX1.Database.Models.CareReport", "CareReportID_FKNavigation")
                        .WithMany("PatientWoundVisit")
                        .HasForeignKey("CareReportID_FK")
                        .HasConstraintName("FK_PatientWoundVisit_CareReport");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("PatientWoundVisit")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_PatientWoundVisit_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.PatientWound", "PatientWoundID_FKNavigation")
                        .WithMany("PatientWoundVisit")
                        .HasForeignKey("PatientWoundID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisit_PatientWound");

                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "ReferID_FKNavigation")
                        .WithMany("InverseReferID_FKNavigation")
                        .HasForeignKey("ReferID_FK")
                        .HasConstraintName("FK_PatientWoundVisit_PatientWoundVisit");

                    b.HasOne("C4WX1.Database.Models.VitalSigns", "VitalSignID_FKNavigation")
                        .WithMany("PatientWoundVisit")
                        .HasForeignKey("VitalSignID_FK")
                        .HasConstraintName("FK_PatientWoundVisit_VitalSigns");

                    b.Navigation("AssignedToID_FKNavigation");

                    b.Navigation("CareReportID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("PatientWoundID_FKNavigation");

                    b.Navigation("ReferID_FKNavigation");

                    b.Navigation("VitalSignID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitAppearance", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("PatientWoundVisitAppearance")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitAppearance_Code");

                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "PatientWoundVisitID_FKNavigation")
                        .WithMany("PatientWoundVisitAppearance")
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitAppearance_PatientWoundVisit");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("PatientWoundVisitID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitCleansingItem", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("PatientWoundVisitCleansingItem")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitCleansingItem_Code");

                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "PatientWoundVisitID_FKNavigation")
                        .WithMany("PatientWoundVisitCleansingItem")
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitCleansingItem_PatientWoundVisit");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("PatientWoundVisitID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitClinician", b =>
                {
                    b.HasOne("C4WX1.Database.Models.ExternalDoctor", "ExternalDoctorID_FKNavigation")
                        .WithMany("PatientWoundVisitClinician")
                        .HasForeignKey("ExternalDoctorID_FK")
                        .HasConstraintName("FK_PatientWoundVisitClinician_ExternalDoctor");

                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "PatientWoundVisitID_FKNavigation")
                        .WithMany("PatientWoundVisitClinician")
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .HasConstraintName("FK_PatientWoundVisitClinician_PatientWoundVisit");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("PatientWoundVisitClinician")
                        .HasForeignKey("UserID_FK")
                        .HasConstraintName("FK_PatientWoundVisitClinician_Users");

                    b.Navigation("ExternalDoctorID_FKNavigation");

                    b.Navigation("PatientWoundVisitID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitTreatment", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Item", "ItemID_FKNavigation")
                        .WithMany("PatientWoundVisitTreatment")
                        .HasForeignKey("ItemID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitTreatment_Item");

                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "PatientWoundVisitID_FKNavigation")
                        .WithMany("PatientWoundVisitTreatment")
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitTreatment_PatientWoundVisit");

                    b.Navigation("ItemID_FKNavigation");

                    b.Navigation("PatientWoundVisitID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitTreatmentList", b =>
                {
                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "PatientWoundVisitID_FKNavigation")
                        .WithMany("PatientWoundVisitTreatmentList")
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitTreatmentList_PatientWoundVisit");

                    b.HasOne("C4WX1.Database.Models.TreatmentListItem", "TListItemID_FKNavigation")
                        .WithMany("PatientWoundVisitTreatmentList")
                        .HasForeignKey("TListItemID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitTreatmentList_TreatmentListItem");

                    b.Navigation("PatientWoundVisitID_FKNavigation");

                    b.Navigation("TListItemID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisitTreatmentObjectives", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "ObjectiveID_FKNavigation")
                        .WithMany("PatientWoundVisitTreatmentObjectives")
                        .HasForeignKey("ObjectiveID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitTreatmentObjectives_Code");

                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "PatientWoundVisitID_FKNavigation")
                        .WithMany("PatientWoundVisitTreatmentObjectives")
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_PatientWoundVisitTreatmentObjectives_PatientWoundVisit");

                    b.Navigation("ObjectiveID_FKNavigation");

                    b.Navigation("PatientWoundVisitID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ProblemList", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Disease", "DiseaseID_FKNavigation")
                        .WithMany("ProblemList")
                        .HasForeignKey("DiseaseID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ProblemList_Disease");

                    b.Navigation("DiseaseID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ProblemListGoal", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "Operator")
                        .WithMany("ProblemListGoalOperator")
                        .HasForeignKey("OperatorID")
                        .HasConstraintName("FK_ProblemListGoal_Operator");

                    b.HasOne("C4WX1.Database.Models.ProblemList", "ProblemListID_FKNavigation")
                        .WithMany("ProblemListGoal")
                        .HasForeignKey("ProblemListID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ProblemListGoal_ProblemList");

                    b.HasOne("C4WX1.Database.Models.Code", "ScoreType")
                        .WithMany("ProblemListGoalScoreType")
                        .HasForeignKey("ScoreTypeID")
                        .HasConstraintName("FK_ProblemListGoal_ScoreType");

                    b.Navigation("Operator");

                    b.Navigation("ProblemListID_FKNavigation");

                    b.Navigation("ScoreType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Receipt", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "CreatedBy_FKNavigation")
                        .WithMany("ReceiptCreatedBy_FKNavigation")
                        .HasForeignKey("CreatedBy_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Receipt_Users");

                    b.HasOne("C4WX1.Database.Models.Code", "CurrencyID_FKNavigation")
                        .WithMany("ReceiptCurrencyID_FKNavigation")
                        .HasForeignKey("CurrencyID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Receipt_Code1");

                    b.HasOne("C4WX1.Database.Models.Users", "ModifiedBy_FKNavigation")
                        .WithMany("ReceiptModifiedBy_FKNavigation")
                        .HasForeignKey("ModifiedBy_FK")
                        .HasConstraintName("FK_Receipt_Users1");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("Receipt")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Receipt_Patient");

                    b.HasOne("C4WX1.Database.Models.Code", "PaymentModeID_FKNavigation")
                        .WithMany("ReceiptPaymentModeID_FKNavigation")
                        .HasForeignKey("PaymentModeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Receipt_Code");

                    b.Navigation("CreatedBy_FKNavigation");

                    b.Navigation("CurrencyID_FKNavigation");

                    b.Navigation("ModifiedBy_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("PaymentModeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ReceiptForInvoice", b =>
                {
                    b.HasOne("C4WX1.Database.Models.BillingInvoice", "BillingInvoiceID_FKNavigation")
                        .WithMany("ReceiptForInvoice")
                        .HasForeignKey("BillingInvoiceID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ReceiptForInv_Inv");

                    b.HasOne("C4WX1.Database.Models.Receipt", "ReceiptID_FKNavigation")
                        .WithMany("ReceiptForInvoice")
                        .HasForeignKey("ReceiptID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ReceiptForInv_Receipt");

                    b.Navigation("BillingInvoiceID_FKNavigation");

                    b.Navigation("ReceiptID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.RecentView", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("RecentView")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_RecentView_Patient");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("RecentView")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_RecentView_Users");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Resource", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "Code")
                        .WithMany("Resource")
                        .HasForeignKey("CodeId")
                        .IsRequired()
                        .HasConstraintName("FK_Resource_Code");

                    b.HasOne("C4WX1.Database.Models.Language", "Language")
                        .WithMany("Resource")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_Resource_Language");

                    b.Navigation("Code");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ServiceForBilling", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CategoryID_FKNavigation")
                        .WithMany("ServiceForBilling")
                        .HasForeignKey("CategoryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceForBilling_Code");

                    b.Navigation("CategoryID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ServiceForBillingCost", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CurrencyID_FKNavigation")
                        .WithMany("ServiceForBillingCost")
                        .HasForeignKey("CurrencyID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceForBillingCost_Code");

                    b.HasOne("C4WX1.Database.Models.ServiceForBilling", "ServiceForBillingID_FKNavigation")
                        .WithMany("ServiceForBillingCost")
                        .HasForeignKey("ServiceForBillingID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceForBillingCost_ServiceForBilling");

                    b.Navigation("CurrencyID_FKNavigation");

                    b.Navigation("ServiceForBillingID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ServiceSkillset", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "ServiceID_FKNavigation")
                        .WithMany("ServiceSkillsetServiceID_FKNavigation")
                        .HasForeignKey("ServiceID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceSkillset_Code1");

                    b.HasOne("C4WX1.Database.Models.Code", "SkillsetID_FKNavigation")
                        .WithMany("ServiceSkillsetSkillsetID_FKNavigation")
                        .HasForeignKey("SkillsetID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_ServiceSkillset_Code");

                    b.Navigation("ServiceID_FKNavigation");

                    b.Navigation("SkillsetID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TD_WoundAssessmentFactor", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("TD_WoundAssessmentFactor")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TD_WoundAssessmentFactor_Code");

                    b.Navigation("CodeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Task", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "ActionTypeID_FKNavigation")
                        .WithMany("TaskActionTypeID_FKNavigation")
                        .HasForeignKey("ActionTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_Task_Code");

                    b.HasOne("C4WX1.Database.Models.Users", "CreatedBy_FKNavigation")
                        .WithMany("Task")
                        .HasForeignKey("CreatedBy_FK")
                        .HasConstraintName("FK_Task_Users");

                    b.HasOne("C4WX1.Database.Models.Code", "DosageID_FKNavigation")
                        .WithMany("TaskDosageID_FKNavigation")
                        .HasForeignKey("DosageID_FK")
                        .HasConstraintName("FK_Task_Code2");

                    b.HasOne("C4WX1.Database.Models.Code", "FrequencyID_FKNavigation")
                        .WithMany("TaskFrequencyID_FKNavigation")
                        .HasForeignKey("FrequencyID_FK")
                        .HasConstraintName("FK_Task_Code1");

                    b.HasOne("C4WX1.Database.Models.InitialCareAssessment", "InitialCareAssessmentID_FKNavigation")
                        .WithMany("Task")
                        .HasForeignKey("InitialCareAssessmentID_FK")
                        .HasConstraintName("FK_Task_InitialCareAssessment");

                    b.HasOne("C4WX1.Database.Models.Code", "MedicationID_FKNavigation")
                        .WithMany("TaskMedicationID_FKNavigation")
                        .HasForeignKey("MedicationID_FK")
                        .HasConstraintName("FK_Task_Code3");

                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("Task")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_Task_Patient");

                    b.HasOne("C4WX1.Database.Models.UserCategory", "UserCategory_FKNavigation")
                        .WithMany("Task")
                        .HasForeignKey("UserCategory_FK")
                        .HasConstraintName("FK_Task_UserCategory");

                    b.Navigation("ActionTypeID_FKNavigation");

                    b.Navigation("CreatedBy_FKNavigation");

                    b.Navigation("DosageID_FKNavigation");

                    b.Navigation("FrequencyID_FKNavigation");

                    b.Navigation("InitialCareAssessmentID_FKNavigation");

                    b.Navigation("MedicationID_FKNavigation");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("UserCategory_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskFileAttachment", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Task", "TaskID_FKNavigation")
                        .WithMany("TaskFileAttachment")
                        .HasForeignKey("TaskID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TaskFileAttachment_Task");

                    b.Navigation("TaskID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskServicesRequired", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("TaskServicesRequired")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TaskServicesRequired_Code");

                    b.HasOne("C4WX1.Database.Models.Task", "TaskID_FKNavigation")
                        .WithMany("TaskServicesRequired")
                        .HasForeignKey("TaskID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TaskServicesRequired_Task");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("TaskID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskSpecificDate", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Task", "TaskID_FKNavigation")
                        .WithMany("TaskSpecificDate")
                        .HasForeignKey("TaskID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TaskSpecificDate_Task");

                    b.Navigation("TaskID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskUser", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Task", "TaskID_FKNavigation")
                        .WithMany("TaskUser")
                        .HasForeignKey("TaskID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TaskUser_Task");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("TaskUser")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TaskUser_Users");

                    b.Navigation("TaskID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskUserLog", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Task", "TaskID_FKNavigation")
                        .WithMany("TaskUserLog")
                        .HasForeignKey("TaskID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TaskUserLog_Task");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("TaskUserLog")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TaskUserLog_Users");

                    b.Navigation("TaskID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskUserLogAttachment", b =>
                {
                    b.HasOne("C4WX1.Database.Models.TaskUserLog", "TaskUserLogID_FKNavigation")
                        .WithMany("TaskUserLogAttachment")
                        .HasForeignKey("TaskUserLogID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TaskUserLogAttachment_TaskUserLog");

                    b.Navigation("TaskUserLogID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TeleconsultationRecording", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("TeleconsultationRecording")
                        .HasForeignKey("PatientID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TeleconsultationRecording_Patient");

                    b.HasOne("C4WX1.Database.Models.Code", "RecordingType_FKNavigation")
                        .WithMany("TeleconsultationRecording")
                        .HasForeignKey("RecordingType_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TeleconsultationRecording_Code");

                    b.Navigation("PatientID_FKNavigation");

                    b.Navigation("RecordingType_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TreatmentListItem", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "TListTypeID_FKNavigation")
                        .WithMany("TreatmentListItem")
                        .HasForeignKey("TListTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentListItem_Code");

                    b.Navigation("TListTypeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TreatmentTOL", b =>
                {
                    b.HasOne("C4WX1.Database.Models.TreatmentListItem", "TListItemID_FKNavigation")
                        .WithMany("TreatmentTOL")
                        .HasForeignKey("TListItemID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_TreatmentTOL_TreatmentListItem");

                    b.Navigation("TListItemID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Types", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Types", "parentCodeNavigation")
                        .WithMany("InverseparentCodeNavigation")
                        .HasForeignKey("parentCode")
                        .HasConstraintName("fk_Types_parentCode");

                    b.Navigation("parentCodeNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserAddress", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("UserAddress")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserAddress_Users");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserBranch", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Branch", "BranchID_FKNavigation")
                        .WithMany("UserBranch")
                        .HasForeignKey("BranchID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserBranch_Branch");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("UserBranch")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserBranch_Users");

                    b.Navigation("BranchID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserCategory", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "UserCategoryOrganizationID_FKNavigation")
                        .WithMany("UserCategory")
                        .HasForeignKey("UserCategoryOrganizationID_FK")
                        .HasConstraintName("FK_UserCategory_UserCategoryOrganizationID_FK");

                    b.Navigation("UserCategoryOrganizationID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserCategoryFacility", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Facility", "FacilityID_FKNavigation")
                        .WithMany("UserCategoryFacility")
                        .HasForeignKey("FacilityID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserCategoryFacility_Facility");

                    b.HasOne("C4WX1.Database.Models.UserCategory", "UserCategoryID_FKNavigation")
                        .WithMany("UserCategoryFacility")
                        .HasForeignKey("UserCategoryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserCategoryFacility_UserCategory");

                    b.Navigation("FacilityID_FKNavigation");

                    b.Navigation("UserCategoryID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserCategoryParentChild", b =>
                {
                    b.HasOne("C4WX1.Database.Models.UserCategory", "ChildUserCategoryID_FKNavigation")
                        .WithMany("UserCategoryParentChildChildUserCategoryID_FKNavigation")
                        .HasForeignKey("ChildUserCategoryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserCategoryParentChild_Child");

                    b.HasOne("C4WX1.Database.Models.UserCategory", "ParentUserCategoryID_FKNavigation")
                        .WithMany("UserCategoryParentChildParentUserCategoryID_FKNavigation")
                        .HasForeignKey("ParentUserCategoryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserCategoryParentChild_Parent");

                    b.Navigation("ChildUserCategoryID_FKNavigation");

                    b.Navigation("ParentUserCategoryID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserCategoryRole", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Role", "RoleID_FKNavigation")
                        .WithMany("UserCategoryRole")
                        .HasForeignKey("RoleID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserCategoryRole_Role");

                    b.HasOne("C4WX1.Database.Models.UserCategory", "UserCategoryID_FKNavigation")
                        .WithMany("UserCategoryRole")
                        .HasForeignKey("UserCategoryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserCategoryRole_UserCategory");

                    b.Navigation("RoleID_FKNavigation");

                    b.Navigation("UserCategoryID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserLanguage", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "LanguageID_FKNavigation")
                        .WithMany("UserLanguage")
                        .HasForeignKey("LanguageID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserLanguage_Code");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("UserLanguage")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserLanguage_Users");

                    b.Navigation("LanguageID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserOrganization", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("UserOrganization")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserOrganization_Code");

                    b.HasOne("C4WX1.Database.Models.Users", "UserId_FKNavigation")
                        .WithMany("UserOrganization")
                        .HasForeignKey("UserId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserOrganization_Users");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("UserId_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserRole", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Role", "RoleId_FKNavigation")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("C4WX1.Database.Models.Users", "UserId_FKNavigation")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Users");

                    b.Navigation("RoleId_FKNavigation");

                    b.Navigation("UserId_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserSkillset", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Code", "CodeID_FKNavigation")
                        .WithMany("UserSkillset")
                        .HasForeignKey("CodeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserSkillset_Code");

                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("UserSkillset")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserSkillset_Users");

                    b.Navigation("CodeID_FKNavigation");

                    b.Navigation("UserID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserType", b =>
                {
                    b.HasOne("C4WX1.Database.Models.UserCategory", "UserCategoryID_FKNavigation")
                        .WithMany("UserType")
                        .HasForeignKey("UserCategoryID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserType_UserCategory");

                    b.Navigation("UserCategoryID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserUserType", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Users", "UserID_FKNavigation")
                        .WithMany("UserUserType")
                        .HasForeignKey("UserID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserUserType_Users");

                    b.HasOne("C4WX1.Database.Models.UserType", "UserTypeID_FKNavigation")
                        .WithMany("UserUserType")
                        .HasForeignKey("UserTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_UserUserType_UserType");

                    b.Navigation("UserID_FKNavigation");

                    b.Navigation("UserTypeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Users", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Patient", "PatientID_FKNavigation")
                        .WithMany("Users")
                        .HasForeignKey("PatientID_FK")
                        .HasConstraintName("FK_Users_Patient");

                    b.Navigation("PatientID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSignDetails", b =>
                {
                    b.HasOne("C4WX1.Database.Models.VitalSigns", "vitalSign")
                        .WithMany("VitalSignDetails")
                        .HasForeignKey("vitalSignId")
                        .IsRequired()
                        .HasConstraintName("fk_VitalSignDetails_vitalSignId");

                    b.HasOne("C4WX1.Database.Models.VitalSignTypes", "vitalSignType")
                        .WithMany("VitalSignDetails")
                        .HasForeignKey("vitalSignTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_VitalSignDetails_vitalSignTypeId");

                    b.Navigation("vitalSign");

                    b.Navigation("vitalSignType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSignRelationships", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Patient", "patient")
                        .WithMany("VitalSignRelationships")
                        .HasForeignKey("patientId")
                        .IsRequired()
                        .HasConstraintName("fk_VitalSignRelationship_patientId");

                    b.HasOne("C4WX1.Database.Models.Thresholds", "threshold")
                        .WithMany("VitalSignRelationships")
                        .HasForeignKey("thresholdId")
                        .IsRequired()
                        .HasConstraintName("fk_VitalSignRelationship_thresholdId");

                    b.HasOne("C4WX1.Database.Models.VitalSignTypes", "vitalSignType")
                        .WithMany("VitalSignRelationships")
                        .HasForeignKey("vitalSignTypeId")
                        .IsRequired()
                        .HasConstraintName("fk_VitalSignRelationship_vitalSignTypeId");

                    b.Navigation("patient");

                    b.Navigation("threshold");

                    b.Navigation("vitalSignType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSignTypeThreshold", b =>
                {
                    b.HasOne("C4WX1.Database.Models.VitalSignTypes", "VitalSignTypeID_FKNavigation")
                        .WithOne("VitalSignTypeThreshold")
                        .HasForeignKey("C4WX1.Database.Models.VitalSignTypeThreshold", "VitalSignTypeID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_VitalSignTypeThreshold_VitalSignTypes");

                    b.Navigation("VitalSignTypeID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSigns", b =>
                {
                    b.HasOne("C4WX1.Database.Models.Patient", "patient")
                        .WithMany("VitalSigns")
                        .HasForeignKey("patientId")
                        .IsRequired()
                        .HasConstraintName("fk_VitalSigns_patientId");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("C4WX1.Database.Models.WoundConsolidatedEmail", b =>
                {
                    b.HasOne("C4WX1.Database.Models.MailSettings", "MailSettingsID_FKNavigation")
                        .WithMany("WoundConsolidatedEmail")
                        .HasForeignKey("MailSettingsID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_WoundConsolidatedEmail_MailSettings");

                    b.HasOne("C4WX1.Database.Models.PatientWoundVisit", "PatientWoundVisitID_FKNavigation")
                        .WithMany("WoundConsolidatedEmail")
                        .HasForeignKey("PatientWoundVisitID_FK")
                        .IsRequired()
                        .HasConstraintName("FK_WoundConsolidatedEmail_PatientWoundVisit");

                    b.Navigation("MailSettingsID_FKNavigation");

                    b.Navigation("PatientWoundVisitID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.AMTQuestion", b =>
                {
                    b.Navigation("PatientAMTAnswer");
                });

            modelBuilder.Entity("C4WX1.Database.Models.APIOrder", b =>
                {
                    b.Navigation("APIOrderAllergy");

                    b.Navigation("APIOrderDiagnosis");

                    b.Navigation("APIOrderMedication");

                    b.Navigation("APIOrderTask");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Activity", b =>
                {
                    b.Navigation("CarePlanSubActivity");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingInvoice", b =>
                {
                    b.Navigation("BillingInvoiceConsumable");

                    b.Navigation("BillingInvoiceService");

                    b.Navigation("ReceiptForInvoice");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingProposal", b =>
                {
                    b.Navigation("BillingInvoiceService");

                    b.Navigation("BillingProposalService");
                });

            modelBuilder.Entity("C4WX1.Database.Models.BillingService", b =>
                {
                    b.Navigation("BillingPackage");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Branch", b =>
                {
                    b.Navigation("UserBranch");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CPGoals", b =>
                {
                    b.Navigation("CarePlanSubCPGoals");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlan", b =>
                {
                    b.Navigation("CarePlanSub");

                    b.Navigation("CareReport");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanStatus", b =>
                {
                    b.Navigation("CarePlan");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSub", b =>
                {
                    b.Navigation("CarePlanDetail");

                    b.Navigation("CarePlanSubActivity");

                    b.Navigation("CarePlanSubCPGoals");

                    b.Navigation("CarePlanSubGoal");

                    b.Navigation("CarePlanSubIntervention");

                    b.Navigation("CarePlanSubProblemList");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CarePlanSubProblemList", b =>
                {
                    b.Navigation("CarePlanSubProblemListGoal");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReport", b =>
                {
                    b.Navigation("BillingInvoice");

                    b.Navigation("CareReportSocialSupport");

                    b.Navigation("InverseCareReportID_FKNavigation");

                    b.Navigation("PatientAMT");

                    b.Navigation("PatientAccessLine");

                    b.Navigation("PatientEBASDEP");

                    b.Navigation("PatientWound");

                    b.Navigation("PatientWoundVisit");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReportRehabilitation", b =>
                {
                    b.Navigation("CareReport");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CareReportSystemInfo", b =>
                {
                    b.Navigation("CareReport");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Chat", b =>
                {
                    b.Navigation("InverseParentID_FKNavigation");

                    b.Navigation("NotificationChat");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Code", b =>
                {
                    b.Navigation("BillingInvoice");

                    b.Navigation("BillingProposal");

                    b.Navigation("BillingService");

                    b.Navigation("Branch");

                    b.Navigation("CarePlanSubProblemListGoalOperator");

                    b.Navigation("CarePlanSubProblemListGoalScoreType");

                    b.Navigation("CareReportAirwayBreathingID_FKNavigation");

                    b.Navigation("CareReportBladderCareID_FKNavigation");

                    b.Navigation("CareReportBowelCareID_FKNavigation");

                    b.Navigation("CareReportCapillaryRefillID_FKNavigation");

                    b.Navigation("CareReportCirculationID_FKNavigation");

                    b.Navigation("CareReportCoughID_FKNavigation");

                    b.Navigation("CareReportDiapersID_FKNavigation");

                    b.Navigation("CareReportLipsID_FKNavigation");

                    b.Navigation("CareReportLowerEyelidsID_FKNavigation");

                    b.Navigation("CareReportO2AidID_FKNavigation");

                    b.Navigation("CareReportPainDescriptionID_FKNavigation");

                    b.Navigation("CareReportPeripheralPulsesPedalID_FKNavigation");

                    b.Navigation("CareReportPeripheralPulsesRadialID_FKNavigation");

                    b.Navigation("CareReportSleepRestID_FKNavigation");

                    b.Navigation("CareReportTemperatureID_FKNavigation");

                    b.Navigation("EnquiryCaregiverAtHomeID_FKNavigation");

                    b.Navigation("EnquiryEnquirySourceID_FKNavigation");

                    b.Navigation("EnquiryGenderID_FKNavigation");

                    b.Navigation("EnquiryLanguage");

                    b.Navigation("EnquiryPreferredLanguageID_FKNavigation");

                    b.Navigation("EnquiryRaceID_FKNavigation");

                    b.Navigation("EnquiryServicesRequired");

                    b.Navigation("EnquiryServicesRequiredID_FKNavigation");

                    b.Navigation("EnquiryUserOrganizationID_FKNavigation");

                    b.Navigation("EventEventTypeID_FKNavigation");

                    b.Navigation("EventPeriodTypeID_FKNavigation");

                    b.Navigation("Facility");

                    b.Navigation("ICAWoundCare");

                    b.Navigation("InverseMedicationGroupID_FKNavigation");

                    b.Navigation("ItemCategoryID_FKNavigation");

                    b.Navigation("ItemItemUnitID_FKNavigation");

                    b.Navigation("MedicationVitalSignType");

                    b.Navigation("NutritionTask");

                    b.Navigation("NutritionTaskReference");

                    b.Navigation("PatientBloodTypeID_FKNavigation");

                    b.Navigation("PatientDrugAllergyMedicationID_FKNavigation");

                    b.Navigation("PatientDrugAllergyReactionID_FKNavigation");

                    b.Navigation("PatientGenderID_FKNavigation");

                    b.Navigation("PatientInvoiceModeID_FKNavigation");

                    b.Navigation("PatientLanguage");

                    b.Navigation("PatientMaritalStatusID_FKNavigation");

                    b.Navigation("PatientMedicalHistory");

                    b.Navigation("PatientMedicationConsumeAcutePRNIndicationID_FKNavigation");

                    b.Navigation("PatientMedicationConsumeDosageID_FKNavigation");

                    b.Navigation("PatientMedicationConsumeFrequencyID_FKNavigation");

                    b.Navigation("PatientMedicationConsumeInstructedBy2ID_FKNavigation");

                    b.Navigation("PatientMedicationConsumeInstructedByID_FKNavigation");

                    b.Navigation("PatientMedicationConsumeMedicationID_FKNavigation");

                    b.Navigation("PatientMedicationConsumeRouteID_FKNavigation");

                    b.Navigation("PatientMedicationSupply");

                    b.Navigation("PatientOtherAllergyDescriptionID_FKNavigation");

                    b.Navigation("PatientOtherAllergyReactionID_FKNavigation");

                    b.Navigation("PatientPatientReferralByID_FKNavigation");

                    b.Navigation("PatientPatientTypeID_FKNavigation");

                    b.Navigation("PatientProfileBloodTypeID_FKNavigation");

                    b.Navigation("PatientProfilePatientOrganizationID_FKNavigation");

                    b.Navigation("PatientProfileReligionID_FKNavigation");

                    b.Navigation("PatientRaceID_FKNavigation");

                    b.Navigation("PatientReferralService");

                    b.Navigation("PatientReligionID_FKNavigation");

                    b.Navigation("PatientResidentTypeID_FKNavigation");

                    b.Navigation("PatientSocialSupportGenderID_FKNavigation");

                    b.Navigation("PatientSocialSupportMaritalStatusID_FKNavigation");

                    b.Navigation("PatientSocialSupportNationalityID_FKNavigation");

                    b.Navigation("PatientSocialSupportRelationshipID_FKNavigation");

                    b.Navigation("PatientSpecialIndicator");

                    b.Navigation("PatientWound");

                    b.Navigation("PatientWoundDraft");

                    b.Navigation("PatientWoundDraftTreatmentObjectives");

                    b.Navigation("PatientWoundVisitAppearance");

                    b.Navigation("PatientWoundVisitCleansingItem");

                    b.Navigation("PatientWoundVisitTreatmentObjectives");

                    b.Navigation("ProblemListGoalOperator");

                    b.Navigation("ProblemListGoalScoreType");

                    b.Navigation("ReceiptCurrencyID_FKNavigation");

                    b.Navigation("ReceiptPaymentModeID_FKNavigation");

                    b.Navigation("Resource");

                    b.Navigation("ServiceForBilling");

                    b.Navigation("ServiceForBillingCost");

                    b.Navigation("ServiceSkillsetServiceID_FKNavigation");

                    b.Navigation("ServiceSkillsetSkillsetID_FKNavigation");

                    b.Navigation("TD_WoundAssessmentFactor");

                    b.Navigation("TaskActionTypeID_FKNavigation");

                    b.Navigation("TaskDosageID_FKNavigation");

                    b.Navigation("TaskFrequencyID_FKNavigation");

                    b.Navigation("TaskMedicationID_FKNavigation");

                    b.Navigation("TaskServicesRequired");

                    b.Navigation("TeleconsultationRecording");

                    b.Navigation("TreatmentListItem");

                    b.Navigation("UserCategory");

                    b.Navigation("UserLanguage");

                    b.Navigation("UserOrganization");

                    b.Navigation("UserSkillset");
                });

            modelBuilder.Entity("C4WX1.Database.Models.CodeType", b =>
                {
                    b.Navigation("Code");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Diagnosis", b =>
                {
                    b.Navigation("CarePlan");
                });

            modelBuilder.Entity("C4WX1.Database.Models.DischargeSummaryReport", b =>
                {
                    b.Navigation("DischargeSummaryReportAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Disease", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("CPGoals");

                    b.Navigation("CarePlanDetail");

                    b.Navigation("CarePlanSubGoal");

                    b.Navigation("DiseaseInfo");

                    b.Navigation("DiseaseSubInfo");

                    b.Navigation("DiseaseVitalSignType");

                    b.Navigation("Intervention");

                    b.Navigation("PatientClinician");

                    b.Navigation("PatientFamilyHistory");

                    b.Navigation("PatientMedicationConsume");

                    b.Navigation("ProblemList");
                });

            modelBuilder.Entity("C4WX1.Database.Models.DiseaseSubInfo", b =>
                {
                    b.Navigation("PatientClinician");

                    b.Navigation("PatientFamilyHistory");

                    b.Navigation("PatientMedicationConsume");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EBASDEPQuestion", b =>
                {
                    b.Navigation("PatientEBASDEPAnswer");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Enquiry", b =>
                {
                    b.Navigation("EnquiryAttachment");

                    b.Navigation("EnquiryLanguage");

                    b.Navigation("EnquiryServicesRequired");
                });

            modelBuilder.Entity("C4WX1.Database.Models.EnquiryConfig", b =>
                {
                    b.Navigation("EnquiryEscPerson");

                    b.Navigation("EnquirySCM");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Event", b =>
                {
                    b.Navigation("EventUser");

                    b.Navigation("EventUserLog");

                    b.Navigation("NotificationEvent");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ExternalDoctor", b =>
                {
                    b.Navigation("PatientClinician");

                    b.Navigation("PatientWoundVisitClinician");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Facility", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("PatientFacility");

                    b.Navigation("UserCategoryFacility");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Group", b =>
                {
                    b.Navigation("GroupRole");
                });

            modelBuilder.Entity("C4WX1.Database.Models.InitialCareAssessment", b =>
                {
                    b.Navigation("ICAWoundCare");

                    b.Navigation("InitialCareAssessmentAttachment");

                    b.Navigation("InitialCareAssessmentSpecialInstruction");

                    b.Navigation("PatientAMT");

                    b.Navigation("PatientClinician");

                    b.Navigation("PatientDrugAllergy");

                    b.Navigation("PatientEBASDEP");

                    b.Navigation("PatientFamilyHistory");

                    b.Navigation("PatientOtherAllergy");

                    b.Navigation("PatientSocialSupport");

                    b.Navigation("PatientWound");

                    b.Navigation("PatientWoundVisit");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Intervention", b =>
                {
                    b.Navigation("CarePlanSubIntervention");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Item", b =>
                {
                    b.Navigation("BillingInvoiceConsumable");

                    b.Navigation("ItemStock");

                    b.Navigation("PatientWoundVisitTreatment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Language", b =>
                {
                    b.Navigation("Resource");
                });

            modelBuilder.Entity("C4WX1.Database.Models.MailSettings", b =>
                {
                    b.Navigation("MailSettingsMsgToUserType");

                    b.Navigation("WoundConsolidatedEmail");
                });

            modelBuilder.Entity("C4WX1.Database.Models.MultiDisciplinaryMeeting", b =>
                {
                    b.Navigation("MultiDisciplinaryMeetingDetail");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Notifications", b =>
                {
                    b.Navigation("NotificationChat");

                    b.Navigation("NotificationEvent");

                    b.Navigation("NotificationTask");

                    b.Navigation("NotificationVitalSignDetails");
                });

            modelBuilder.Entity("C4WX1.Database.Models.NutritionTaskReference", b =>
                {
                    b.Navigation("NutritionTaskAmountReferenceID_FKNavigation");

                    b.Navigation("NutritionTaskColorReferenceID_FKNavigation");

                    b.Navigation("NutritionTaskTypeReferenceID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Package", b =>
                {
                    b.Navigation("PatientPackage");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Patient", b =>
                {
                    b.Navigation("BillingInvoice");

                    b.Navigation("BillingProposal");

                    b.Navigation("CarePlan");

                    b.Navigation("CareReport");

                    b.Navigation("Chat");

                    b.Navigation("MultiDisciplinaryMeeting");

                    b.Navigation("NutritionTask");

                    b.Navigation("PatientAMT");

                    b.Navigation("PatientAttachment");

                    b.Navigation("PatientClinician");

                    b.Navigation("PatientDrugAllergy");

                    b.Navigation("PatientEBASDEP");

                    b.Navigation("PatientFacility");

                    b.Navigation("PatientFamilyHistory");

                    b.Navigation("PatientImmunisation");

                    b.Navigation("PatientLanguage");

                    b.Navigation("PatientMedicalHistory");

                    b.Navigation("PatientOtherAllergy");

                    b.Navigation("PatientPackage");

                    b.Navigation("PatientSocialSupport");

                    b.Navigation("PatientSpecialIndicator");

                    b.Navigation("PatientWound");

                    b.Navigation("PatientWoundDraft");

                    b.Navigation("Receipt");

                    b.Navigation("RecentView");

                    b.Navigation("Task");

                    b.Navigation("TeleconsultationRecording");

                    b.Navigation("Users");

                    b.Navigation("VitalSignRelationships");

                    b.Navigation("VitalSigns");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAMT", b =>
                {
                    b.Navigation("PatientAMTAnswer");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientAdditionalInfo", b =>
                {
                    b.Navigation("InitialCareAssessment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientClinician", b =>
                {
                    b.Navigation("CareReportSystemInfoPrimaryDoctorUserID_FKNavigation");

                    b.Navigation("CareReportSystemInfoSecondaryDoctorUserID_FKNavigation");

                    b.Navigation("PatientMedicalHistory");

                    b.Navigation("PatientReferralPrimaryClinicianID_FKNavigation");

                    b.Navigation("PatientReferralPrimaryNurseID_FKNavigation");

                    b.Navigation("PatientReferralSecondaryClinicianID_FKNavigation");

                    b.Navigation("PatientReferralSecondaryNurseID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientDrugAllergy", b =>
                {
                    b.Navigation("InverseReferID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientEBASDEP", b =>
                {
                    b.Navigation("PatientEBASDEPAnswer");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMBI", b =>
                {
                    b.Navigation("InitialCareAssessment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMFS", b =>
                {
                    b.Navigation("InitialCareAssessment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedication", b =>
                {
                    b.Navigation("InitialCareAssessment");

                    b.Navigation("Patient");

                    b.Navigation("PatientMedicationConsume");

                    b.Navigation("PatientMedicationSupply");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientMedicationConsume", b =>
                {
                    b.Navigation("InverseReferID_FKNavigation");

                    b.Navigation("PatientMedicationConsumeAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientNutrition", b =>
                {
                    b.Navigation("CareReport");

                    b.Navigation("InitialCareAssessment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientOtherAllergy", b =>
                {
                    b.Navigation("InverseReferID_FKNavigation");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientProfile", b =>
                {
                    b.Navigation("InitialCareAssessment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientRAF", b =>
                {
                    b.Navigation("InitialCareAssessment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientReferral", b =>
                {
                    b.Navigation("InitialCareAssessment");

                    b.Navigation("Patient");

                    b.Navigation("PatientReferralService");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientSocialSupport", b =>
                {
                    b.Navigation("CareReportSocialSupport");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWound", b =>
                {
                    b.Navigation("PatientWoundDraft");

                    b.Navigation("PatientWoundVisit");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundDraft", b =>
                {
                    b.Navigation("PatientWoundDraftTreatmentList");

                    b.Navigation("PatientWoundDraftTreatmentObjectives");
                });

            modelBuilder.Entity("C4WX1.Database.Models.PatientWoundVisit", b =>
                {
                    b.Navigation("InverseReferID_FKNavigation");

                    b.Navigation("PatientWoundDraft");

                    b.Navigation("PatientWoundReviewBy");

                    b.Navigation("PatientWoundVisitAppearance");

                    b.Navigation("PatientWoundVisitCleansingItem");

                    b.Navigation("PatientWoundVisitClinician");

                    b.Navigation("PatientWoundVisitTreatment");

                    b.Navigation("PatientWoundVisitTreatmentList");

                    b.Navigation("PatientWoundVisitTreatmentObjectives");

                    b.Navigation("WoundConsolidatedEmail");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ProblemList", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("CarePlanSubProblemList");

                    b.Navigation("ProblemListGoal");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ProblemListGoal", b =>
                {
                    b.Navigation("CarePlanSubProblemListGoal");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Receipt", b =>
                {
                    b.Navigation("ReceiptForInvoice");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Role", b =>
                {
                    b.Navigation("GroupRole");

                    b.Navigation("UserCategoryRole");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("C4WX1.Database.Models.ServiceForBilling", b =>
                {
                    b.Navigation("BillingInvoiceService");

                    b.Navigation("BillingProposalService");

                    b.Navigation("ServiceForBillingCost");
                });

            modelBuilder.Entity("C4WX1.Database.Models.SystemForDisease", b =>
                {
                    b.Navigation("CarePlanDetail");

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Task", b =>
                {
                    b.Navigation("NotificationTask");

                    b.Navigation("TaskFileAttachment");

                    b.Navigation("TaskServicesRequired");

                    b.Navigation("TaskSpecificDate");

                    b.Navigation("TaskUser");

                    b.Navigation("TaskUserLog");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TaskUserLog", b =>
                {
                    b.Navigation("TaskUserLogAttachment");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Thresholds", b =>
                {
                    b.Navigation("VitalSignRelationships");
                });

            modelBuilder.Entity("C4WX1.Database.Models.TreatmentListItem", b =>
                {
                    b.Navigation("PatientWoundDraftTreatmentList");

                    b.Navigation("PatientWoundVisitTreatmentList");

                    b.Navigation("TreatmentTOL");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Types", b =>
                {
                    b.Navigation("APIAccessKey");

                    b.Navigation("InverseparentCodeNavigation");

                    b.Navigation("NotificationMessageTemplates");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserCategory", b =>
                {
                    b.Navigation("Event");

                    b.Navigation("Task");

                    b.Navigation("UserCategoryFacility");

                    b.Navigation("UserCategoryParentChildChildUserCategoryID_FKNavigation");

                    b.Navigation("UserCategoryParentChildParentUserCategoryID_FKNavigation");

                    b.Navigation("UserCategoryRole");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.UserType", b =>
                {
                    b.Navigation("CareReportConfig");

                    b.Navigation("ExternalDoctor");

                    b.Navigation("MailSettingsMsgToUserType");

                    b.Navigation("UserUserType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.Users", b =>
                {
                    b.Navigation("AuditTrail");

                    b.Navigation("BillingInvoiceCreatedBy_FKNavigation");

                    b.Navigation("BillingInvoiceModifiedBy_FKNavigation");

                    b.Navigation("BillingProposalCreatedBy_FKNavigation");

                    b.Navigation("BillingProposalModifiedBy_FKNavigation");

                    b.Navigation("CareReport");

                    b.Navigation("CareReportSystemInfoKeyPerson1UserID_FKNavigation");

                    b.Navigation("CareReportSystemInfoKeyPerson2UserID_FKNavigation");

                    b.Navigation("Chat");

                    b.Navigation("Enquiry");

                    b.Navigation("EnquiryConfigEscalatingPersonID_FKNavigation");

                    b.Navigation("EnquiryConfigSCMID_FKNavigation");

                    b.Navigation("EnquiryEscPerson");

                    b.Navigation("EnquirySCM");

                    b.Navigation("Event");

                    b.Navigation("EventUser");

                    b.Navigation("EventUserLog");

                    b.Navigation("MobileAppVersioningCreatedBy_FKNavigation");

                    b.Navigation("MobileAppVersioningModifiedBy_FKNavigation");

                    b.Navigation("Notifications");

                    b.Navigation("PatientClinician");

                    b.Navigation("PatientWoundReviewBy");

                    b.Navigation("PatientWoundVisit");

                    b.Navigation("PatientWoundVisitClinician");

                    b.Navigation("ReceiptCreatedBy_FKNavigation");

                    b.Navigation("ReceiptModifiedBy_FKNavigation");

                    b.Navigation("RecentView");

                    b.Navigation("Task");

                    b.Navigation("TaskUser");

                    b.Navigation("TaskUserLog");

                    b.Navigation("UserAddress");

                    b.Navigation("UserBranch");

                    b.Navigation("UserLanguage");

                    b.Navigation("UserOrganization");

                    b.Navigation("UserRole");

                    b.Navigation("UserSkillset");

                    b.Navigation("UserUserType");
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSignDetails", b =>
                {
                    b.Navigation("NotificationVitalSignDetails");

                    b.Navigation("PatientAMT");

                    b.Navigation("PatientBradenScale");

                    b.Navigation("PatientEBASDEP");

                    b.Navigation("PatientGCS");

                    b.Navigation("PatientMBI");

                    b.Navigation("PatientMFS");

                    b.Navigation("PatientMMSE");

                    b.Navigation("PatientRAF");
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSignTypes", b =>
                {
                    b.Navigation("DiseaseVitalSignType");

                    b.Navigation("MedicationVitalSignType");

                    b.Navigation("VitalSignDetails");

                    b.Navigation("VitalSignRelationships");

                    b.Navigation("VitalSignTypeThreshold");
                });

            modelBuilder.Entity("C4WX1.Database.Models.VitalSigns", b =>
                {
                    b.Navigation("CareReport");

                    b.Navigation("InitialCareAssessment");

                    b.Navigation("PatientWoundVisit");

                    b.Navigation("VitalSignDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
